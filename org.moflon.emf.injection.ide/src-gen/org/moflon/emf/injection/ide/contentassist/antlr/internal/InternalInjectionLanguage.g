/*
 * generated by Xtext 2.14.0
 */
grammar InternalInjectionLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.moflon.emf.injection.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.moflon.emf.injection.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.moflon.emf.injection.services.InjectionLanguageGrammarAccess;

}
@parser::members {
	private InjectionLanguageGrammarAccess grammarAccess;

	public void setGrammarAccess(InjectionLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleInjectionFile
entryRuleInjectionFile
:
{ before(grammarAccess.getInjectionFileRule()); }
	 ruleInjectionFile
{ after(grammarAccess.getInjectionFileRule()); } 
	 EOF 
;

// Rule InjectionFile
ruleInjectionFile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInjectionFileAccess().getGroup()); }
		(rule__InjectionFile__Group__0)
		{ after(grammarAccess.getInjectionFileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRegularImport
entryRuleRegularImport
:
{ before(grammarAccess.getRegularImportRule()); }
	 ruleRegularImport
{ after(grammarAccess.getRegularImportRule()); } 
	 EOF 
;

// Rule RegularImport
ruleRegularImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRegularImportAccess().getGroup()); }
		(rule__RegularImport__Group__0)
		{ after(grammarAccess.getRegularImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStaticImport
entryRuleStaticImport
:
{ before(grammarAccess.getStaticImportRule()); }
	 ruleStaticImport
{ after(grammarAccess.getStaticImportRule()); } 
	 EOF 
;

// Rule StaticImport
ruleStaticImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStaticImportAccess().getGroup()); }
		(rule__StaticImport__Group__0)
		{ after(grammarAccess.getStaticImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
		(rule__QualifiedName__Group__0)
		{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard
:
{ before(grammarAccess.getQualifiedNameWithWildcardRule()); }
	 ruleQualifiedNameWithWildcard
{ after(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
		(rule__QualifiedNameWithWildcard__Group__0)
		{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClassDeclaration
entryRuleClassDeclaration
:
{ before(grammarAccess.getClassDeclarationRule()); }
	 ruleClassDeclaration
{ after(grammarAccess.getClassDeclarationRule()); } 
	 EOF 
;

// Rule ClassDeclaration
ruleClassDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassDeclarationAccess().getGroup()); }
		(rule__ClassDeclaration__Group__0)
		{ after(grammarAccess.getClassDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleJavaAnnotation
entryRuleJavaAnnotation
:
{ before(grammarAccess.getJavaAnnotationRule()); }
	 ruleJavaAnnotation
{ after(grammarAccess.getJavaAnnotationRule()); } 
	 EOF 
;

// Rule JavaAnnotation
ruleJavaAnnotation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getJavaAnnotationAccess().getGroup()); }
		(rule__JavaAnnotation__Group__0)
		{ after(grammarAccess.getJavaAnnotationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClassInjectionDeclaration
entryRuleClassInjectionDeclaration
:
{ before(grammarAccess.getClassInjectionDeclarationRule()); }
	 ruleClassInjectionDeclaration
{ after(grammarAccess.getClassInjectionDeclarationRule()); } 
	 EOF 
;

// Rule ClassInjectionDeclaration
ruleClassInjectionDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassInjectionDeclarationAccess().getGroup()); }
		(rule__ClassInjectionDeclaration__Group__0)
		{ after(grammarAccess.getClassInjectionDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMethodDeclaration
entryRuleMethodDeclaration
:
{ before(grammarAccess.getMethodDeclarationRule()); }
	 ruleMethodDeclaration
{ after(grammarAccess.getMethodDeclarationRule()); } 
	 EOF 
;

// Rule MethodDeclaration
ruleMethodDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMethodDeclarationAccess().getGroup()); }
		(rule__MethodDeclaration__Group__0)
		{ after(grammarAccess.getMethodDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameterDeclaration
entryRuleParameterDeclaration
:
{ before(grammarAccess.getParameterDeclarationRule()); }
	 ruleParameterDeclaration
{ after(grammarAccess.getParameterDeclarationRule()); } 
	 EOF 
;

// Rule ParameterDeclaration
ruleParameterDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterDeclarationAccess().getGroup()); }
		(rule__ParameterDeclaration__Group__0)
		{ after(grammarAccess.getParameterDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InjectionFile__ImportsAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInjectionFileAccess().getImportsRegularImportParserRuleCall_0_0_0()); }
		ruleRegularImport
		{ after(grammarAccess.getInjectionFileAccess().getImportsRegularImportParserRuleCall_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getInjectionFileAccess().getImportsStaticImportParserRuleCall_0_0_1()); }
		ruleStaticImport
		{ after(grammarAccess.getInjectionFileAccess().getImportsStaticImportParserRuleCall_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InjectionFile__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InjectionFile__Group__0__Impl
	rule__InjectionFile__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InjectionFile__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInjectionFileAccess().getImportsAssignment_0()); }
	(rule__InjectionFile__ImportsAssignment_0)*
	{ after(grammarAccess.getInjectionFileAccess().getImportsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InjectionFile__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InjectionFile__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InjectionFile__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInjectionFileAccess().getClassDeclarationAssignment_1()); }
	(rule__InjectionFile__ClassDeclarationAssignment_1)
	{ after(grammarAccess.getInjectionFileAccess().getClassDeclarationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RegularImport__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularImport__Group__0__Impl
	rule__RegularImport__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularImport__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularImportAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getRegularImportAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularImport__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularImport__Group__1__Impl
	rule__RegularImport__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularImport__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularImportAccess().getNamespaceAssignment_1()); }
	(rule__RegularImport__NamespaceAssignment_1)
	{ after(grammarAccess.getRegularImportAccess().getNamespaceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularImport__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularImport__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularImport__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularImportAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getRegularImportAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StaticImport__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StaticImport__Group__0__Impl
	rule__StaticImport__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticImport__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStaticImportAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getStaticImportAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticImport__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StaticImport__Group__1__Impl
	rule__StaticImport__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticImport__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStaticImportAccess().getStaticKeyword_1()); }
	'static'
	{ after(grammarAccess.getStaticImportAccess().getStaticKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticImport__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StaticImport__Group__2__Impl
	rule__StaticImport__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticImport__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStaticImportAccess().getNamespaceAssignment_2()); }
	(rule__StaticImport__NamespaceAssignment_2)
	{ after(grammarAccess.getStaticImportAccess().getNamespaceAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticImport__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StaticImport__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticImport__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStaticImportAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getStaticImportAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
	(rule__QualifiedName__Group_1__0)*
	{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildcard__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedNameWithWildcard__Group__0__Impl
	rule__QualifiedNameWithWildcard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName
	{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedNameWithWildcard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); }
	('.*')?
	{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClassDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDeclaration__Group__0__Impl
	rule__ClassDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDeclarationAccess().getAnnotationsAssignment_0()); }
	(rule__ClassDeclaration__AnnotationsAssignment_0)*
	{ after(grammarAccess.getClassDeclarationAccess().getAnnotationsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDeclaration__Group__1__Impl
	rule__ClassDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDeclarationAccess().getPartialKeyword_1()); }
	'partial'
	{ after(grammarAccess.getClassDeclarationAccess().getPartialKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDeclaration__Group__2__Impl
	rule__ClassDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDeclarationAccess().getClassKeyword_2()); }
	'class'
	{ after(grammarAccess.getClassDeclarationAccess().getClassKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDeclaration__Group__3__Impl
	rule__ClassDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDeclarationAccess().getClassNameAssignment_3()); }
	(rule__ClassDeclaration__ClassNameAssignment_3)
	{ after(grammarAccess.getClassDeclarationAccess().getClassNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDeclaration__Group__4__Impl
	rule__ClassDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDeclarationAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getClassDeclarationAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDeclaration__Group__5__Impl
	rule__ClassDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDeclarationAccess().getClassInjectionDeclarationAssignment_5()); }
	(rule__ClassDeclaration__ClassInjectionDeclarationAssignment_5)?
	{ after(grammarAccess.getClassDeclarationAccess().getClassInjectionDeclarationAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDeclaration__Group__6__Impl
	rule__ClassDeclaration__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDeclarationAccess().getMethodDeclarationsAssignment_6()); }
	(rule__ClassDeclaration__MethodDeclarationsAssignment_6)*
	{ after(grammarAccess.getClassDeclarationAccess().getMethodDeclarationsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDeclaration__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDeclarationAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getClassDeclarationAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__JavaAnnotation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JavaAnnotation__Group__0__Impl
	rule__JavaAnnotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaAnnotation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJavaAnnotationAccess().getCommercialAtKeyword_0()); }
	'@'
	{ after(grammarAccess.getJavaAnnotationAccess().getCommercialAtKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaAnnotation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JavaAnnotation__Group__1__Impl
	rule__JavaAnnotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaAnnotation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJavaAnnotationAccess().getNameAssignment_1()); }
	(rule__JavaAnnotation__NameAssignment_1)
	{ after(grammarAccess.getJavaAnnotationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaAnnotation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JavaAnnotation__Group__2__Impl
	rule__JavaAnnotation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaAnnotation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJavaAnnotationAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getJavaAnnotationAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaAnnotation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JavaAnnotation__Group__3__Impl
	rule__JavaAnnotation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaAnnotation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJavaAnnotationAccess().getParameterAssignment_3()); }
	(rule__JavaAnnotation__ParameterAssignment_3)
	{ after(grammarAccess.getJavaAnnotationAccess().getParameterAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaAnnotation__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JavaAnnotation__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaAnnotation__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJavaAnnotationAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getJavaAnnotationAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClassInjectionDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassInjectionDeclaration__Group__0__Impl
	rule__ClassInjectionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassInjectionDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassInjectionDeclarationAccess().getMembersKeyword_0()); }
	'@members'
	{ after(grammarAccess.getClassInjectionDeclarationAccess().getMembersKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassInjectionDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassInjectionDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassInjectionDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassInjectionDeclarationAccess().getBodyAssignment_1()); }
	(rule__ClassInjectionDeclaration__BodyAssignment_1)
	{ after(grammarAccess.getClassInjectionDeclarationAccess().getBodyAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MethodDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodDeclaration__Group__0__Impl
	rule__MethodDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodDeclarationAccess().getModelKeyword_0()); }
	'@model'
	{ after(grammarAccess.getMethodDeclarationAccess().getModelKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodDeclaration__Group__1__Impl
	rule__MethodDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodDeclarationAccess().getMethodNameAssignment_1()); }
	(rule__MethodDeclaration__MethodNameAssignment_1)
	{ after(grammarAccess.getMethodDeclarationAccess().getMethodNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodDeclaration__Group__2__Impl
	rule__MethodDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodDeclarationAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getMethodDeclarationAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodDeclaration__Group__3__Impl
	rule__MethodDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodDeclarationAccess().getParametersAssignment_3()); }
	(rule__MethodDeclaration__ParametersAssignment_3)?
	{ after(grammarAccess.getMethodDeclarationAccess().getParametersAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodDeclaration__Group__4__Impl
	rule__MethodDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodDeclarationAccess().getGroup_4()); }
	(rule__MethodDeclaration__Group_4__0)*
	{ after(grammarAccess.getMethodDeclarationAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodDeclaration__Group__5__Impl
	rule__MethodDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodDeclarationAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getMethodDeclarationAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodDeclaration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodDeclarationAccess().getBodyAssignment_6()); }
	(rule__MethodDeclaration__BodyAssignment_6)
	{ after(grammarAccess.getMethodDeclarationAccess().getBodyAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MethodDeclaration__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodDeclaration__Group_4__0__Impl
	rule__MethodDeclaration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodDeclarationAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getMethodDeclarationAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodDeclaration__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodDeclarationAccess().getParametersAssignment_4_1()); }
	(rule__MethodDeclaration__ParametersAssignment_4_1)
	{ after(grammarAccess.getMethodDeclarationAccess().getParametersAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDeclaration__Group__0__Impl
	rule__ParameterDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDeclarationAccess().getParameterTypeAssignment_0()); }
	(rule__ParameterDeclaration__ParameterTypeAssignment_0)
	{ after(grammarAccess.getParameterDeclarationAccess().getParameterTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDeclarationAccess().getParameterNameAssignment_1()); }
	(rule__ParameterDeclaration__ParameterNameAssignment_1)
	{ after(grammarAccess.getParameterDeclarationAccess().getParameterNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InjectionFile__ImportsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInjectionFileAccess().getImportsAlternatives_0_0()); }
		(rule__InjectionFile__ImportsAlternatives_0_0)
		{ after(grammarAccess.getInjectionFileAccess().getImportsAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InjectionFile__ClassDeclarationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInjectionFileAccess().getClassDeclarationClassDeclarationParserRuleCall_1_0()); }
		ruleClassDeclaration
		{ after(grammarAccess.getInjectionFileAccess().getClassDeclarationClassDeclarationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularImport__NamespaceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegularImportAccess().getNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
		ruleQualifiedNameWithWildcard
		{ after(grammarAccess.getRegularImportAccess().getNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticImport__NamespaceAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStaticImportAccess().getNamespaceQualifiedNameWithWildcardParserRuleCall_2_0()); }
		ruleQualifiedNameWithWildcard
		{ after(grammarAccess.getStaticImportAccess().getNamespaceQualifiedNameWithWildcardParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__AnnotationsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassDeclarationAccess().getAnnotationsJavaAnnotationParserRuleCall_0_0()); }
		ruleJavaAnnotation
		{ after(grammarAccess.getClassDeclarationAccess().getAnnotationsJavaAnnotationParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__ClassNameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassDeclarationAccess().getClassNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getClassDeclarationAccess().getClassNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__ClassInjectionDeclarationAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassDeclarationAccess().getClassInjectionDeclarationClassInjectionDeclarationParserRuleCall_5_0()); }
		ruleClassInjectionDeclaration
		{ after(grammarAccess.getClassDeclarationAccess().getClassInjectionDeclarationClassInjectionDeclarationParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__MethodDeclarationsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassDeclarationAccess().getMethodDeclarationsMethodDeclarationParserRuleCall_6_0()); }
		ruleMethodDeclaration
		{ after(grammarAccess.getClassDeclarationAccess().getMethodDeclarationsMethodDeclarationParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaAnnotation__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJavaAnnotationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getJavaAnnotationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaAnnotation__ParameterAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJavaAnnotationAccess().getParameterSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getJavaAnnotationAccess().getParameterSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassInjectionDeclaration__BodyAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassInjectionDeclarationAccess().getBodyCODE_BLOCKTerminalRuleCall_1_0()); }
		RULE_CODE_BLOCK
		{ after(grammarAccess.getClassInjectionDeclarationAccess().getBodyCODE_BLOCKTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__MethodNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodDeclarationAccess().getMethodNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getMethodDeclarationAccess().getMethodNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__ParametersAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodDeclarationAccess().getParametersParameterDeclarationParserRuleCall_3_0()); }
		ruleParameterDeclaration
		{ after(grammarAccess.getMethodDeclarationAccess().getParametersParameterDeclarationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__ParametersAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodDeclarationAccess().getParametersParameterDeclarationParserRuleCall_4_1_0()); }
		ruleParameterDeclaration
		{ after(grammarAccess.getMethodDeclarationAccess().getParametersParameterDeclarationParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__BodyAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodDeclarationAccess().getBodyCODE_BLOCKTerminalRuleCall_6_0()); }
		RULE_CODE_BLOCK
		{ after(grammarAccess.getMethodDeclarationAccess().getBodyCODE_BLOCKTerminalRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__ParameterTypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterDeclarationAccess().getParameterTypeQualifiedNameParserRuleCall_0_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getParameterDeclarationAccess().getParameterTypeQualifiedNameParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__ParameterNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterDeclarationAccess().getParameterNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getParameterDeclarationAccess().getParameterNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

fragment RULE_BLOCK_BEGIN : '<--';

fragment RULE_BLOCK_END : '-->';

RULE_CODE_BLOCK : RULE_BLOCK_BEGIN .* RULE_BLOCK_END;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
