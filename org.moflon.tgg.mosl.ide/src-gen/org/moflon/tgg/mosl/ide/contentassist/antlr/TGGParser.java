/*
 * generated by Xtext 2.34.0
 */
package org.moflon.tgg.mosl.ide.contentassist.antlr;

import java.util.Map;

import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.moflon.tgg.mosl.ide.contentassist.antlr.internal.InternalTGGParser;
import org.moflon.tgg.mosl.services.TGGGrammarAccess;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;

public class TGGParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(TGGGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, TGGGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getCorrTypeAccess().getAlternatives_1(), "rule__CorrType__Alternatives_1");
			builder.put(grammarAccess.getParamValueAccess().getAlternatives(), "rule__ParamValue__Alternatives");
			builder.put(grammarAccess.getAttributeConstraintAccess().getOpAlternatives_1_0(), "rule__AttributeConstraint__OpAlternatives_1_0");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getOperatorAccess().getValueAlternatives_0(), "rule__Operator__ValueAlternatives_0");
			builder.put(grammarAccess.getLiteralValueAccess().getAlternatives(), "rule__LiteralValue__Alternatives");
			builder.put(grammarAccess.getMOSLIncludingAccess().getAlternatives(), "rule__MOSLIncluding__Alternatives");
			builder.put(grammarAccess.getOperatorPatternAccess().getAlternatives(), "rule__OperatorPattern__Alternatives");
			builder.put(grammarAccess.getNamedElementsAccess().getAlternatives(), "rule__NamedElements__Alternatives");
			builder.put(grammarAccess.getNamePatternAccess().getAlternatives(), "rule__NamePattern__Alternatives");
			builder.put(grammarAccess.getTripleGraphGrammarFileAccess().getGroup(), "rule__TripleGraphGrammarFile__Group__0");
			builder.put(grammarAccess.getSchemaAccess().getGroup(), "rule__Schema__Group__0");
			builder.put(grammarAccess.getSchemaAccess().getGroup_4(), "rule__Schema__Group_4__0");
			builder.put(grammarAccess.getSchemaAccess().getGroup_5(), "rule__Schema__Group_5__0");
			builder.put(grammarAccess.getSchemaAccess().getGroup_6(), "rule__Schema__Group_6__0");
			builder.put(grammarAccess.getSchemaAccess().getGroup_7(), "rule__Schema__Group_7__0");
			builder.put(grammarAccess.getCorrTypeAccess().getGroup(), "rule__CorrType__Group__0");
			builder.put(grammarAccess.getCorrTypeAccess().getGroup_1_0(), "rule__CorrType__Group_1_0__0");
			builder.put(grammarAccess.getCorrTypeAccess().getGroup_1_1(), "rule__CorrType__Group_1_1__0");
			builder.put(grammarAccess.getAttrCondDefAccess().getGroup(), "rule__AttrCondDef__Group__0");
			builder.put(grammarAccess.getAttrCondDefAccess().getGroup_3(), "rule__AttrCondDef__Group_3__0");
			builder.put(grammarAccess.getAttrCondDefAccess().getGroup_3_1(), "rule__AttrCondDef__Group_3_1__0");
			builder.put(grammarAccess.getAttrCondDefAccess().getGroup_8(), "rule__AttrCondDef__Group_8__0");
			builder.put(grammarAccess.getAttrCondDefAccess().getGroup_9(), "rule__AttrCondDef__Group_9__0");
			builder.put(grammarAccess.getAttrCondDefAccess().getGroup_9_1(), "rule__AttrCondDef__Group_9_1__0");
			builder.put(grammarAccess.getAttrCondDefAccess().getGroup_9_1_1(), "rule__AttrCondDef__Group_9_1_1__0");
			builder.put(grammarAccess.getParamAccess().getGroup(), "rule__Param__Group__0");
			builder.put(grammarAccess.getParamTypeAccess().getGroup(), "rule__ParamType__Group__0");
			builder.put(grammarAccess.getParamTypeAccess().getGroup_1(), "rule__ParamType__Group_1__0");
			builder.put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_5(), "rule__Rule__Group_5__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_5_2(), "rule__Rule__Group_5_2__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_6(), "rule__Rule__Group_6__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_9(), "rule__Rule__Group_9__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_10(), "rule__Rule__Group_10__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_11(), "rule__Rule__Group_11__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_12(), "rule__Rule__Group_12__0");
			builder.put(grammarAccess.getAttrCondAccess().getGroup(), "rule__AttrCond__Group__0");
			builder.put(grammarAccess.getAttrCondAccess().getGroup_2(), "rule__AttrCond__Group_2__0");
			builder.put(grammarAccess.getAttrCondAccess().getGroup_2_1(), "rule__AttrCond__Group_2_1__0");
			builder.put(grammarAccess.getAttrCondDefLibraryAccess().getGroup(), "rule__AttrCondDefLibrary__Group__0");
			builder.put(grammarAccess.getAttrCondDefLibraryAccess().getGroup_2(), "rule__AttrCondDefLibrary__Group_2__0");
			builder.put(grammarAccess.getAttributeVariableAccess().getGroup(), "rule__AttributeVariable__Group__0");
			builder.put(grammarAccess.getCorrVariablePatternAccess().getGroup(), "rule__CorrVariablePattern__Group__0");
			builder.put(grammarAccess.getObjectVariablePatternAccess().getGroup(), "rule__ObjectVariablePattern__Group__0");
			builder.put(grammarAccess.getObjectVariablePatternAccess().getGroup_4(), "rule__ObjectVariablePattern__Group_4__0");
			builder.put(grammarAccess.getAttributeConstraintAccess().getGroup(), "rule__AttributeConstraint__Group__0");
			builder.put(grammarAccess.getAttributeAssignmentAccess().getGroup(), "rule__AttributeAssignment__Group__0");
			builder.put(grammarAccess.getEnumExpressionAccess().getGroup(), "rule__EnumExpression__Group__0");
			builder.put(grammarAccess.getAttributeExpressionAccess().getGroup(), "rule__AttributeExpression__Group__0");
			builder.put(grammarAccess.getLinkVariablePatternAccess().getGroup(), "rule__LinkVariablePattern__Group__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getUsingAccess().getGroup(), "rule__Using__Group__0");
			builder.put(grammarAccess.getLiteralValueAccess().getGroup_1(), "rule__LiteralValue__Group_1__0");
			builder.put(grammarAccess.getLiteralValueAccess().getGroup_2(), "rule__LiteralValue__Group_2__0");
			builder.put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getTripleGraphGrammarFileAccess().getSchemaAssignment_0(), "rule__TripleGraphGrammarFile__SchemaAssignment_0");
			builder.put(grammarAccess.getTripleGraphGrammarFileAccess().getRulesAssignment_1(), "rule__TripleGraphGrammarFile__RulesAssignment_1");
			builder.put(grammarAccess.getTripleGraphGrammarFileAccess().getLibraryAssignment_2(), "rule__TripleGraphGrammarFile__LibraryAssignment_2");
			builder.put(grammarAccess.getSchemaAccess().getImportsAssignment_0(), "rule__Schema__ImportsAssignment_0");
			builder.put(grammarAccess.getSchemaAccess().getUsingAssignment_1(), "rule__Schema__UsingAssignment_1");
			builder.put(grammarAccess.getSchemaAccess().getNameAssignment_3(), "rule__Schema__NameAssignment_3");
			builder.put(grammarAccess.getSchemaAccess().getSourceTypesAssignment_4_2(), "rule__Schema__SourceTypesAssignment_4_2");
			builder.put(grammarAccess.getSchemaAccess().getTargetTypesAssignment_5_2(), "rule__Schema__TargetTypesAssignment_5_2");
			builder.put(grammarAccess.getSchemaAccess().getCorrespondenceTypesAssignment_6_2(), "rule__Schema__CorrespondenceTypesAssignment_6_2");
			builder.put(grammarAccess.getSchemaAccess().getAttributeCondDefsAssignment_7_2(), "rule__Schema__AttributeCondDefsAssignment_7_2");
			builder.put(grammarAccess.getCorrTypeAccess().getNameAssignment_0(), "rule__CorrType__NameAssignment_0");
			builder.put(grammarAccess.getCorrTypeAccess().getSuperAssignment_1_0_1(), "rule__CorrType__SuperAssignment_1_0_1");
			builder.put(grammarAccess.getCorrTypeAccess().getSourceAssignment_1_1_2(), "rule__CorrType__SourceAssignment_1_1_2");
			builder.put(grammarAccess.getCorrTypeAccess().getTargetAssignment_1_1_4(), "rule__CorrType__TargetAssignment_1_1_4");
			builder.put(grammarAccess.getAttrCondDefAccess().getUserDefinedAssignment_0(), "rule__AttrCondDef__UserDefinedAssignment_0");
			builder.put(grammarAccess.getAttrCondDefAccess().getNameAssignment_1(), "rule__AttrCondDef__NameAssignment_1");
			builder.put(grammarAccess.getAttrCondDefAccess().getParamsAssignment_3_0(), "rule__AttrCondDef__ParamsAssignment_3_0");
			builder.put(grammarAccess.getAttrCondDefAccess().getParamsAssignment_3_1_1(), "rule__AttrCondDef__ParamsAssignment_3_1_1");
			builder.put(grammarAccess.getAttrCondDefAccess().getAllowedSyncAdornmentsAssignment_7(), "rule__AttrCondDef__AllowedSyncAdornmentsAssignment_7");
			builder.put(grammarAccess.getAttrCondDefAccess().getAllowedSyncAdornmentsAssignment_8_1(), "rule__AttrCondDef__AllowedSyncAdornmentsAssignment_8_1");
			builder.put(grammarAccess.getAttrCondDefAccess().getAllowedGenAdornmentsAssignment_9_1_0(), "rule__AttrCondDef__AllowedGenAdornmentsAssignment_9_1_0");
			builder.put(grammarAccess.getAttrCondDefAccess().getAllowedGenAdornmentsAssignment_9_1_1_1(), "rule__AttrCondDef__AllowedGenAdornmentsAssignment_9_1_1_1");
			builder.put(grammarAccess.getParamAccess().getIndexAssignment_0(), "rule__Param__IndexAssignment_0");
			builder.put(grammarAccess.getParamAccess().getTypeAssignment_2(), "rule__Param__TypeAssignment_2");
			builder.put(grammarAccess.getRuleAccess().getImportsAssignment_0(), "rule__Rule__ImportsAssignment_0");
			builder.put(grammarAccess.getRuleAccess().getUsingAssignment_1(), "rule__Rule__UsingAssignment_1");
			builder.put(grammarAccess.getRuleAccess().getAbstractRuleAssignment_2(), "rule__Rule__AbstractRuleAssignment_2");
			builder.put(grammarAccess.getRuleAccess().getNameAssignment_4(), "rule__Rule__NameAssignment_4");
			builder.put(grammarAccess.getRuleAccess().getSupertypesAssignment_5_1(), "rule__Rule__SupertypesAssignment_5_1");
			builder.put(grammarAccess.getRuleAccess().getSupertypesAssignment_5_2_1(), "rule__Rule__SupertypesAssignment_5_2_1");
			builder.put(grammarAccess.getRuleAccess().getKernelAssignment_6_1(), "rule__Rule__KernelAssignment_6_1");
			builder.put(grammarAccess.getRuleAccess().getSchemaAssignment_8(), "rule__Rule__SchemaAssignment_8");
			builder.put(grammarAccess.getRuleAccess().getSourcePatternsAssignment_9_2(), "rule__Rule__SourcePatternsAssignment_9_2");
			builder.put(grammarAccess.getRuleAccess().getTargetPatternsAssignment_10_2(), "rule__Rule__TargetPatternsAssignment_10_2");
			builder.put(grammarAccess.getRuleAccess().getCorrespondencePatternsAssignment_11_2(), "rule__Rule__CorrespondencePatternsAssignment_11_2");
			builder.put(grammarAccess.getRuleAccess().getAttrConditionsAssignment_12_2(), "rule__Rule__AttrConditionsAssignment_12_2");
			builder.put(grammarAccess.getAttrCondAccess().getNameAssignment_0(), "rule__AttrCond__NameAssignment_0");
			builder.put(grammarAccess.getAttrCondAccess().getValuesAssignment_2_0(), "rule__AttrCond__ValuesAssignment_2_0");
			builder.put(grammarAccess.getAttrCondAccess().getValuesAssignment_2_1_1(), "rule__AttrCond__ValuesAssignment_2_1_1");
			builder.put(grammarAccess.getAttrCondDefLibraryAccess().getNameAssignment_1(), "rule__AttrCondDefLibrary__NameAssignment_1");
			builder.put(grammarAccess.getAttrCondDefLibraryAccess().getAttributeCondDefsAssignment_2_1(), "rule__AttrCondDefLibrary__AttributeCondDefsAssignment_2_1");
			builder.put(grammarAccess.getAdornmentAccess().getValueAssignment(), "rule__Adornment__ValueAssignment");
			builder.put(grammarAccess.getAttributeVariableAccess().getObjectVarAssignment_0(), "rule__AttributeVariable__ObjectVarAssignment_0");
			builder.put(grammarAccess.getAttributeVariableAccess().getAttributeAssignment_2(), "rule__AttributeVariable__AttributeAssignment_2");
			builder.put(grammarAccess.getLocalVariableAccess().getNameAssignment(), "rule__LocalVariable__NameAssignment");
			builder.put(grammarAccess.getCorrVariablePatternAccess().getOpAssignment_0(), "rule__CorrVariablePattern__OpAssignment_0");
			builder.put(grammarAccess.getCorrVariablePatternAccess().getNameAssignment_1(), "rule__CorrVariablePattern__NameAssignment_1");
			builder.put(grammarAccess.getCorrVariablePatternAccess().getTypeAssignment_3(), "rule__CorrVariablePattern__TypeAssignment_3");
			builder.put(grammarAccess.getCorrVariablePatternAccess().getSourceAssignment_6(), "rule__CorrVariablePattern__SourceAssignment_6");
			builder.put(grammarAccess.getCorrVariablePatternAccess().getTargetAssignment_8(), "rule__CorrVariablePattern__TargetAssignment_8");
			builder.put(grammarAccess.getObjectVariablePatternAccess().getOpAssignment_0(), "rule__ObjectVariablePattern__OpAssignment_0");
			builder.put(grammarAccess.getObjectVariablePatternAccess().getNameAssignment_1(), "rule__ObjectVariablePattern__NameAssignment_1");
			builder.put(grammarAccess.getObjectVariablePatternAccess().getTypeAssignment_3(), "rule__ObjectVariablePattern__TypeAssignment_3");
			builder.put(grammarAccess.getObjectVariablePatternAccess().getAttributeAssignmentsAssignment_4_1(), "rule__ObjectVariablePattern__AttributeAssignmentsAssignment_4_1");
			builder.put(grammarAccess.getObjectVariablePatternAccess().getAttributeConstraintsAssignment_4_2(), "rule__ObjectVariablePattern__AttributeConstraintsAssignment_4_2");
			builder.put(grammarAccess.getObjectVariablePatternAccess().getLinkVariablePatternsAssignment_4_3(), "rule__ObjectVariablePattern__LinkVariablePatternsAssignment_4_3");
			builder.put(grammarAccess.getAttributeConstraintAccess().getAttributeAssignment_0(), "rule__AttributeConstraint__AttributeAssignment_0");
			builder.put(grammarAccess.getAttributeConstraintAccess().getOpAssignment_1(), "rule__AttributeConstraint__OpAssignment_1");
			builder.put(grammarAccess.getAttributeConstraintAccess().getValueExpAssignment_2(), "rule__AttributeConstraint__ValueExpAssignment_2");
			builder.put(grammarAccess.getAttributeAssignmentAccess().getAttributeAssignment_0(), "rule__AttributeAssignment__AttributeAssignment_0");
			builder.put(grammarAccess.getAttributeAssignmentAccess().getOpAssignment_1(), "rule__AttributeAssignment__OpAssignment_1");
			builder.put(grammarAccess.getAttributeAssignmentAccess().getValueExpAssignment_2(), "rule__AttributeAssignment__ValueExpAssignment_2");
			builder.put(grammarAccess.getEnumExpressionAccess().getEenumAssignment_1(), "rule__EnumExpression__EenumAssignment_1");
			builder.put(grammarAccess.getEnumExpressionAccess().getLiteralAssignment_3(), "rule__EnumExpression__LiteralAssignment_3");
			builder.put(grammarAccess.getAttributeExpressionAccess().getObjectVarAssignment_0(), "rule__AttributeExpression__ObjectVarAssignment_0");
			builder.put(grammarAccess.getAttributeExpressionAccess().getAttributeAssignment_2(), "rule__AttributeExpression__AttributeAssignment_2");
			builder.put(grammarAccess.getLiteralExpressionAccess().getValueAssignment(), "rule__LiteralExpression__ValueAssignment");
			builder.put(grammarAccess.getLinkVariablePatternAccess().getOpAssignment_0(), "rule__LinkVariablePattern__OpAssignment_0");
			builder.put(grammarAccess.getLinkVariablePatternAccess().getTypeAssignment_2(), "rule__LinkVariablePattern__TypeAssignment_2");
			builder.put(grammarAccess.getLinkVariablePatternAccess().getTargetAssignment_4(), "rule__LinkVariablePattern__TargetAssignment_4");
			builder.put(grammarAccess.getOperatorAccess().getValueAssignment(), "rule__Operator__ValueAssignment");
			builder.put(grammarAccess.getImportAccess().getNameAssignment_1(), "rule__Import__NameAssignment_1");
			builder.put(grammarAccess.getUsingAccess().getImportedNamespaceAssignment_1(), "rule__Using__ImportedNamespaceAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private TGGGrammarAccess grammarAccess;

	@Override
	protected InternalTGGParser createParser() {
		InternalTGGParser result = new InternalTGGParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TGGGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TGGGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
