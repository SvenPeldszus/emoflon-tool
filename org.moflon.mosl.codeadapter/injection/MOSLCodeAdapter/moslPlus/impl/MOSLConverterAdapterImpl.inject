import org.moflon.mosl.utils.MOSLLoader;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.moflon.mosl.utils.PathResolver;
import MOSLCodeAdapter.moslPlus.MoslPlusFactory;
import org.moflon.mosl.utils.exceptions.CanNotResolvePathException;
import org.moflon.mosl.MOSLUtils;

partial class MOSLConverterAdapterImpl {

@members <--
	private MOSLLoader loader = new MOSLLoader();
	private PathResolver resolver = new PathResolver(this);
-->
@model hasPostfix(String fileName, String postfix) <--
		String[] parts = fileName.split("\\.");
		return parts[parts.length-1].equalsIgnoreCase(postfix);
	-->
	
@model stringEquals(String arg0, String arg1) <--
		return arg0.compareTo(arg1)==0;
	-->
	
@model getImports(Node importReferences) <--
		return loader.getImport(importReferences);
	-->
	
@model copyNode(Node node) <--
		return EcoreUtil.copy(node);
	-->
	
@model deletePostfix(String fileName) <--
		return fileName.substring(0, fileName.lastIndexOf("."));
	-->
	
@model init() <--
		resolver.init();
		MOSLUtils.resetIndex();
	-->
	
@model addPath(String path, String name, Node node) <--
		try{
			resolver.addPath(path, name, node);
		} catch (RuntimeException e){
			MoslErrorMessage errorMessage = MoslPlusFactory.eINSTANCE.createMoslErrorMessage();
			errorMessage.setMessage(e.getMessage());
			errorMessage.setPath(path);
			this.getErrorHandler().add(errorMessage);
		}
	-->
	
@model getPath(String currentPath, String nameReference, MoslCategory category) <--
		try{
			return resolver.getPath(currentPath, nameReference, category);
		} catch (RuntimeException e){
			MoslErrorMessage errorMessage = MoslPlusFactory.eINSTANCE.createMoslErrorMessage();
			errorMessage.setMessage(e.getMessage());
			errorMessage.setPath(currentPath);
			this.getErrorHandler().add(errorMessage);
			throw new CanNotResolvePathException(e.getMessage(), e);
		}
	-->	
	
@model getNode(String path) <--
		return resolver.getNodeFromCache(path);
	-->	
	
@model concat(String arg0, String arg1) <--
		return arg0 + arg1;
	-->

@model addition(int arg0, int arg1) <--
		return arg0 + arg1;
-->	

@model addSearch(String path, Attribute searchCategory,	Attribute attribute) <--
		resolver.addSearchPair(path, searchCategory, attribute);
	-->	
	
@model resolve() <--
		resolver.resolveAllPathes();
	-->	

@model resolveCSPs() <--
		resolver.resolveCSPs();
-->

@model resolveOpposites() <--
		resolver.resolveOpposites();
-->
	
}		