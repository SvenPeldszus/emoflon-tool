
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import org.apache.commons.lang3.StringUtils;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EAnnotation;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EEnumLiteral;
import org.eclipse.emf.ecore.EGenericType;
import org.eclipse.emf.ecore.EModelElement;
import org.eclipse.emf.ecore.ENamedElement;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EParameter;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.ETypeParameter;
import org.eclipse.emf.ecore.ETypedElement;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.moflon.core.utilities.MoflonUtil;
import org.moflon.csp.codegenerator.MyBasicFormatRenderer;
import org.moflon.tgg.algorithm.delta.AttributeDelta;
import org.moflon.tgg.algorithm.delta.attribute.AttributConstraintContainer;
import org.moflon.tgg.algorithm.delta.attribute.AttributeConstraintCodeGenerator;
import org.stringtemplate.v4.ST;
import org.stringtemplate.v4.STGroupFile;
import MocaTree.MocaTreeFactory;
import MocaTree.Node;
import SDMLanguage.expressions.ComparingOperator;
import SDMLanguage.expressions.ComparisonExpression;
import SDMLanguage.expressions.Expression;
import SDMLanguage.expressions.LiteralExpression;
import SDMLanguage.patterns.AttributeAssignment;
import SDMLanguage.patterns.BindingOperator;
import SDMLanguage.patterns.Constraint;
import SDMLanguage.patterns.ObjectVariable;
import SDMLanguage.patterns.patternExpressions.AttributeValueExpression;
import SDMLanguage.sdmUtil.CompilerInjection;
import SDMLanguage.sdmUtil.CompilerInjectionEntry;
import SDMLanguage.sdmUtil.ImportInjectionEntry;
import SDMLanguage.sdmUtil.SdmUtilFactory;
import org.moflon.tgg.language.Domain;
import org.moflon.tgg.language.DomainType;
import org.moflon.tgg.language.TGGObjectVariable;
import org.moflon.tgg.language.TGGRule;
import org.moflon.tgg.language.algorithm.ApplicationTypes;
import org.moflon.tgg.language.compiler.CompilerPackage;
import org.moflon.tgg.language.compiler.TGGCompiler;
import org.moflon.tgg.language.compiler.compilerfacade.CompilerfacadePackage;
import org.moflon.tgg.language.compiler.compilerfacade.Helper;
import org.moflon.tgg.language.compiler.compilerfacade.InjectionHelper;
import org.moflon.tgg.language.csp.AttributeVariable;
import org.moflon.tgg.language.csp.CSP;
import org.moflon.tgg.language.csp.CspFactory;
import org.moflon.tgg.language.csp.Literal;
import org.moflon.tgg.language.csp.LocalVariable;
import org.moflon.tgg.language.csp.OperationalCSP;
import org.moflon.tgg.language.csp.TGGConstraint;
import org.moflon.tgg.language.csp.Variable;

partial class InjectionHelperImpl {

@members <--

   private void handleImports(final EClass ruleClass)
   {
      ImportInjectionEntry entryForNodeMapping = SdmUtilFactory.eINSTANCE.createImportInjectionEntry();
      entryForNodeMapping.setContent("org.moflon.tgg.runtime.TripleMatchNodeMapping");
      entryForNodeMapping.setEClass(ruleClass);
      this.getCompilerInjection().getImportInjectionEntries().add(entryForNodeMapping);

      ImportInjectionEntry entryForOptional = SdmUtilFactory.eINSTANCE.createImportInjectionEntry();
      entryForOptional.setContent("java.util.Optional");
      entryForOptional.setEClass(ruleClass);
      this.getCompilerInjection().getImportInjectionEntries().add(entryForOptional);
   }
   
-->

@model createInjectionForCheckAttributesMethod (String name, TGGRule rule, EClass ruleClass, TGGCompiler compiler) <--

      handleImports(ruleClass);
      AttributeConstraintCodeGenerator codeGen = new AttributeConstraintCodeGenerator(rule, name, compiler);
      return codeGen.getInjection();
-->

@model createInjectionForCheckTypesMethod (TGGRule rule, EOperation eOperation, Helper compilerHelper, ApplicationTypes direction) <--

      boolean forward = direction.equals(ApplicationTypes.FORWARD);
      Domain sourceDomain = rule.getSource();
      Domain targetDomain = rule.getTarget();

      String injectionContent = "return " + rule.getObjectVariable().stream().filter(ov -> {
         Domain domain = ((TGGObjectVariable) ov).getDomain();
         boolean hasCorrectDomain = (forward && domain.equals(sourceDomain)) || (!forward && domain.equals(targetDomain));
         boolean isGreenInRule = ov.getBindingOperator().equals(BindingOperator.CREATE);
         return hasCorrectDomain && isGreenInRule;
      }).map(compilerHelper::determineTypeCheckStatement).reduce("true", (acc, str) -> acc + " && " + str) + ";";

      if (compilerInjection == null)
         setCompilerInjection(SdmUtilFactory.eINSTANCE.createCompilerInjection());

      CompilerInjectionEntry entry = SdmUtilFactory.eINSTANCE.createCompilerInjectionEntry();
      entry.setContent(injectionContent);
      entry.setEOperation(eOperation);

      getCompilerInjection().getCompilerInjectionEntries().add(entry);
-->

}