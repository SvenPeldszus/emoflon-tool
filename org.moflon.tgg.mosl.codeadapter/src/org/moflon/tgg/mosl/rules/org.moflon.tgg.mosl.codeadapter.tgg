#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*
#using AttrCondDefLibrary.*

#rule LiteralExpressionRule #with org.moflon.tgg.mosl.codeadapter

#source {
	++literalExpression:LiteralExpression
}

#target {
	++tggLiteralExpression:LiteralExpression
}

#correspondence {
	++  literalExpressionToTggLiteralExpression :ExpressionToExpression {
		#src->literalExpression
		#trg->tggLiteralExpression
	}
}

#attributeConditions {
	MoslToTggLiteral (literalExpression.value, tggLiteralExpression.value)
}

#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule SourceCorrVariablePatternCheckToTGGLinkVariableRule #with org.moflon.tgg.mosl.codeadapter

#source {
	objectVariablePatternSource:ObjectVariablePattern
	corrVariablePattern:CorrVariablePattern {
		++  - source->objectVariablePatternSource
		- op->operator
	}
	!operator:Operator
}

#target {
	++tggLinkVariableSource:TGGLinkVariable {
		bindingOperator := enum::BindingOperator::CHECK_ONLY
		name := "source"
		++  - domain->domainCorrespondence
	}
	tggObjectVariableSource:TGGObjectVariable {
		++  - incomingLink->tggLinkVariableSource
	}
	tggObjectVariableCorr:TGGObjectVariable {
		bindingOperator == enum::BindingOperator::CHECK_ONLY
		- domain->domainCorrespondence
		++  - outgoingLink->tggLinkVariableSource
	}
	tggRule:TGGRule {
		++  - linkVariable->tggLinkVariableSource
		- correspondence->domainCorrespondence
		- objectVariable->tggObjectVariableCorr
	}
	domainCorrespondence:Domain {
		name == "Correspondence"
		type == enum::DomainType::CORRESPONDENCE
	}
}

#correspondence {
	objectVariablePatternSourceToTggObjectVariableSource :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePatternSource
		#trg->tggObjectVariableSource
	}
	corrVariablePatternToTggObjectVariableCorr :CorrVariablePatternToTGGObjectVariable {
		#src->corrVariablePattern
		#trg->tggObjectVariableCorr
	}
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule TargetCorrVariablePatternCreateToTGGLinkVariableRule #with org.moflon.tgg.mosl.codeadapter

#source {
	operator:Operator {
		value == "++"
	}
	objectVariablePatternTarget:ObjectVariablePattern
	corrVariablePattern:CorrVariablePattern {
		- op->operator
		++  - target->objectVariablePatternTarget
	}
}

#target {
	tggRule:TGGRule {
		++  - linkVariable->tggLinkVariableTarget
		- objectVariable->tggObjectVariableCorr
		- correspondence->domainCorrespondence
	}
	domainCorrespondence:Domain {
		name == "Correspondence"
		type == enum::DomainType::CORRESPONDENCE
	}
	tggObjectVariableCorr:TGGObjectVariable {
		bindingOperator == enum::BindingOperator::CREATE
		- domain->domainCorrespondence
		++  - outgoingLink->tggLinkVariableTarget
	}
	++tggLinkVariableTarget:TGGLinkVariable {
		name := "target"
		bindingOperator := enum::BindingOperator::CREATE
		++  - domain->domainCorrespondence
	}
	tggObjectVariableTarget:TGGObjectVariable {
		++  - incomingLink->tggLinkVariableTarget
	}
}

#correspondence {
	corrVariablePatternToTggObjectVariableCorr :CorrVariablePatternToTGGObjectVariable {
		#src->corrVariablePattern
		#trg->tggObjectVariableCorr
	}
	objectVariablePatternTargetToTggObjectVariableTarget :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePatternTarget
		#trg->tggObjectVariableTarget
	}
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule AttributeConstraintRightAttributeExpressionRule #with org.moflon.tgg.mosl.codeadapter

#source {
	attributeConstraint:AttributeConstraint {
		++  - valueExp->attributeExpression
	}
	++attributeExpression:AttributeExpression {
		++  - objectVar->objectVariablePatternSource
	}
	objectVariablePatternSource:ObjectVariablePattern
}

#target {
	comparisonExpression:ComparisonExpression {
		++  - rightExpression->attributeValueExpression
	}
	++attributeValueExpression:AttributeValueExpression {
		++  - object->tggObjectVariableSource
	}
	constraint:Constraint {
		- constraintExpression->comparisonExpression
	}
	tggObjectVariableSource:TGGObjectVariable
}

#correspondence {
	objectVariablePatternSourceToTggObjectVariableSource :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePatternSource
		#trg->tggObjectVariableSource
	}
	++  attributeExpressionToAttributeValueExpression :ExpressionToExpression {
		#src->attributeExpression
		#trg->attributeValueExpression
	}
	attributeConstraintToConstraint :AttributeConstraintToConstraint {
		#src->attributeConstraint
		#trg->constraint
	}
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule AttributeVariableTargetOVCheckRule #with org.moflon.tgg.mosl.codeadapter

#source {
	++attributeVariable:AttributeVariable {
		++  - objectVar->objectVariablePattern
	}
	attrCond:AttrCond {
		++  - values->attributeVariable
	}
	objectVariablePattern:ObjectVariablePattern
	rule:Rule {
		- targetPatterns->objectVariablePattern
		- attrConditions->attrCond
	}
}

#target {
	tggRule:TGGRule {
		- objectVariable->tggObjectVariable
		- csp->tggCSP
	}
	tggConstraint:TGGConstraint {
		++  - variables->tggAttributeVariable
	}
	tggObjectVariable:TGGObjectVariable
	tggCSP:CSP {
		- constraints->tggConstraint
		- variables->tggAttributeVariable
	}
	tggAttributeVariable:AttributeVariable
}

#correspondence {
	++  attributeVariableToTggAttributeVariable :ParamValueToVariable {
		#src->attributeVariable
		#trg->tggAttributeVariable
	}
	attrCondToTggConstraint :AttrCondToTGGConstraint {
		#src->attrCond
		#trg->tggConstraint
	}
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
	objectVariablePatternToTggObjectVariable :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePattern
		#trg->tggObjectVariable
	}
}

#attributeConditions {
	eq (attributeVariable.attribute, tggAttributeVariable.attribute)
	eq (tggObjectVariable.name, tggAttributeVariable.objectVariable)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule XtextRuleToTGGRule #with org.moflon.tgg.mosl.codeadapter

#source {
	++rule:Rule {
		++  - schema->schema
	}
	tggFile:TripleGraphGrammarFile {
		- schema->schema
		++  - rules->rule
	}
	schema:Schema
}

#target {
	tggModel:TripleGraphGrammar {
		++  - tggRule->tggRule
		- domain->domainSource
		- domain->domainTarget
		- domain->domainCorrespondence
	}
	project:TGGProject {
		- tgg->tggModel
		- corrPackage->corrPackage
	}
	corrPackage:EPackage {
		- eSubpackages->rulesPackage
	}
	domainTarget:Domain {
		name == "Target"
		type == enum::DomainType::TARGET
	}
	domainCorrespondence:Domain {
		type == enum::DomainType::CORRESPONDENCE
		name == "Correspondence"
	}
	++abstractRule:EClass
	domainSource:Domain {
		name == "Source"
		type == enum::DomainType::SOURCE
	}
	++tggRule:TGGRule {
		++  - correspondence->domainCorrespondence
		++  - csp->tggCSP
		++  - target->domainTarget
		++  - source->domainSource
	}
	rulesPackage:EPackage {
		name == "Rules"
		++  - eClassifiers->abstractRule
	}
	++tggCSP:CSP
}

#correspondence {
	++  ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
	tggFileToTgg :TripleGraphGrammarFileToTripleGraphGrammar {
		#src->tggFile
		#trg->tggModel
	}
}

#attributeConditions {
	eq (abstractRule.name, tggRule.name)
	eq (rule.abstractRule, tggRule.abstractRule)
	eq (rule.name, tggRule.name)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule ParamToSignatureElementRule #with org.moflon.tgg.mosl.codeadapter

#source {
	attrCond:AttrCond {
		- name->attrCondDef
	}
	++param:Param
	attrCondDef:AttrCondDef {
		++  - params->param
	}
}

#target {
	++signatureElement:SignatureElement
	tggConstraint:TGGConstraint {
		++  - signature->signatureElement
	}
}

#correspondence {
	++  paramToSignatureElement :ParamToSignatureElement {
		#src->param
		#trg->signatureElement
	}
	attrCondToTggConstraint :AttrCondToTGGConstraint {
		#src->attrCond
		#trg->tggConstraint
	}
}

#attributeConditions {
	eq (param.index, signatureElement.index)
	ParamTypeToSignatureElementType (param.type, signatureElement.type)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule KernelEdgeRule #with org.moflon.tgg.mosl.codeadapter

#source {
	kernelRule:Rule
	rule:Rule {
		++  - kernel->kernelRule
	}
}

#target {
	tggRule:TGGRule {
		++  - kernel->kernelTGGRule
	}
	kernelTGGRule:TGGRule
}

#correspondence {
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
	kernelRuleToKernelTGGRule :RuleToTGGRule {
		#src->kernelRule
		#trg->kernelTGGRule
	}
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule AttrCondCheckToTGGConstraintRule_ComplementParamToSignatureElements #complements AttrCondCheckToTGGConstraintRule#with org.moflon.tgg.mosl.codeadapter

#source {
	attrCondDef:AttrCondDef {
		- params->param
	}
	param:Param
}

#target {
	++tggConstraint:TGGConstraint {
		++  - signature->signatureElement
	}
	++signatureElement:SignatureElement
}

#correspondence {
	++  paramToSignatureElement :ParamToSignatureElement {
		#src->param
		#trg->signatureElement
	}
}

#attributeConditions {
	eq (param.index, signatureElement.index)
	eq (param.type, signatureElement.type)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule AttributeVariableCheckRule #with org.moflon.tgg.mosl.codeadapter

#source {
	attrCond:AttrCond {
		++  - values->attributeVariable
	}
	objectVariablePattern:ObjectVariablePattern
	rule:Rule {
		- sourcePatterns->objectVariablePattern
		- attrConditions->attrCond
	}
	++attributeVariable:AttributeVariable {
		++  - objectVar->objectVariablePattern
	}
}

#target {
	tggConstraint:TGGConstraint {
		++  - variables->tggAttributeVariable
	}
	tggRule:TGGRule {
		- objectVariable->tggObjectVariable
		- csp->tggCSP
	}
	tggObjectVariable:TGGObjectVariable
	tggCSP:CSP {
		- constraints->tggConstraint
		- variables->tggAttributeVariable
	}
	tggAttributeVariable:AttributeVariable
}

#correspondence {
	++  attributeVariableToTggAttributeVariable :ParamValueToVariable {
		#src->attributeVariable
		#trg->tggAttributeVariable
	}
	attrCondToTggConstraint :AttrCondToTGGConstraint {
		#src->attrCond
		#trg->tggConstraint
	}
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
	objectVariablePatternToTggObjectVariable :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePattern
		#trg->tggObjectVariable
	}
}

#attributeConditions {
	eq (attributeVariable.attribute, tggAttributeVariable.attribute)
	eq (tggObjectVariable.name, tggAttributeVariable.objectVariable)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule LocalVariableRule #with org.moflon.tgg.mosl.codeadapter

#source {
	attrCond:AttrCond {
		++  - values->localVariable
	}
	++localVariable:LocalVariable
	rule:Rule {
		- attrConditions->attrCond
	}
}

#target {
	tggConstraint:TGGConstraint {
		++  - variables->tggLocalVariable
	}
	tggCSP:CSP {
		- variables->nacLocalVariable
		++  - variables->tggLocalVariable
		- constraints->tggConstraint
	}
	++tggLocalVariable:LocalVariable
	tggRule:TGGRule {
		- csp->tggCSP
	}
	!nacLocalVariable:LocalVariable {
		name == localVariable . name
	}
}

#correspondence {
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
	attrCondToTggConstraint :AttrCondToTGGConstraint {
		#src->attrCond
		#trg->tggConstraint
	}
	++  localVariableToTggLocalVariable :ParamValueToVariable {
		#src->localVariable
		#trg->tggLocalVariable
	}
}

#attributeConditions {
	eq (localVariable.name, tggLocalVariable.name)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule CorrTypeDefToCorrespondenceRule #with org.moflon.tgg.mosl.codeadapter

#source {
	++corrType:CorrType
	tggFile:TripleGraphGrammarFile {
		- schema->schema
	}
	schema:Schema {
		++  - correspondenceTypes->corrType
	}
}

#target {
	project:TGGProject {
		- tgg->tggModel
		- corrPackage->corrPackage
	}
	tggModel:TripleGraphGrammar
	corrPackage:EPackage {
		++  - eClassifiers->correspondence
	}
	++correspondence:EClass
}

#correspondence {
	tggFileToTgg :TripleGraphGrammarFileToTripleGraphGrammar {
		#src->tggFile
		#trg->tggModel
	}
	++  corrTypeToCorrespondence :CorrTypeToEClass {
		#src->corrType
		#trg->correspondence
	}
}

#attributeConditions {
	eq (corrType.name, correspondence.name)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule AttributeConstraintEqualRule #with org.moflon.tgg.mosl.codeadapter

#source {
	++attributeConstraint:AttributeConstraint {
		op := " == "
	}
}

#target {
	++constraint:Constraint {
		++  - constraintExpression->comparisonExpression
	}
	++comparisonExpression:ComparisonExpression {
		operator := enum::ComparingOperator::EQUAL
	}
}

#correspondence {
	++  attributeConstraintToConstraint :AttributeConstraintToConstraint {
		#src->attributeConstraint
		#trg->constraint
	}
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule AttributeAssignmentRule #with org.moflon.tgg.mosl.codeadapter

#source {
	++attributeAssignment:AttributeAssignment {
		op := " := "
	}
	objectVariablePatternSource:ObjectVariablePattern {
		++  - attributeAssignments->attributeAssignment
	}
}

#target {
	++tggAttributeAssignment:AttributeAssignment
	tggObjectVariableSource:TGGObjectVariable {
		++  - attributeAssignment->tggAttributeAssignment
	}
}

#correspondence {
	++  attributeAssignmentToTggAttributeAssignment :AttributeAssignmentToAttributeAssignment {
		#src->attributeAssignment
		#trg->tggAttributeAssignment
	}
	objectVariablePatternSourceToTggObjectVariableSource :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePatternSource
		#trg->tggObjectVariableSource
	}
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule SourceLinkVariablePatternCreateToTGGLinkVariableRule #with org.moflon.tgg.mosl.codeadapter

#source {
	++linkVariablePatternTarget:LinkVariablePattern {
		++  - op->operator
	}
	++operator:Operator {
		value := "++"
	}
	objectVariablePatternTargetSrc:ObjectVariablePattern {
		++  - linkVariablePatterns->linkVariablePatternTarget
	}
	rule:Rule {
		- sourcePatterns->objectVariablePatternTargetSrc
	}
}

#target {
	domain:Domain {
		type == enum::DomainType::SOURCE
	}
	tggObjectVariableTargetSrc:TGGObjectVariable {
		++  - outgoingLink->tggLinkVariableTarget
		- domain->domain
	}
	tggRule:TGGRule {
		- source->domain
		++  - linkVariable->tggLinkVariableTarget
		- objectVariable->tggObjectVariableTargetSrc
	}
	++tggLinkVariableTarget:TGGLinkVariable {
		bindingOperator := enum::BindingOperator::CREATE
		++  - domain->domain
	}
}

#correspondence {
	++  linkVariablePatternTargetToTggLinkVariableTarget :LinkVariablePatternToTGGLinkVariable {
		#src->linkVariablePatternTarget
		#trg->tggLinkVariableTarget
	}
	objectVariablePatternTargetSrcToTggObjectVariableTargetSrc :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePatternTargetSrc
		#trg->tggObjectVariableTargetSrc
	}
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule SourceObjectVariablePatternCreateToTGGObjectVariableRule #with org.moflon.tgg.mosl.codeadapter

#source {
	rule:Rule {
		++  - sourcePatterns->objectVariablePatternSource
	}
	++operator:Operator {
		value := "++"
	}
	++objectVariablePatternSource:ObjectVariablePattern {
		++  - op->operator
	}
}

#target {
	tggRule:TGGRule {
		++  - objectVariable->tggObjectVariableSource
		- source->domainSource
	}
	++tggObjectVariableSource:TGGObjectVariable {
		bindingOperator := enum::BindingOperator::CREATE
		bindingSemantics := enum::BindingSemantics::MANDATORY
		++  - domain->domainSource
	}
	domainSource:Domain {
		type == enum::DomainType::SOURCE
		name == "Source"
	}
}

#correspondence {
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
	++  objectVariablePatternSourceToTggObjectVariableSource :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePatternSource
		#trg->tggObjectVariableSource
	}
}

#attributeConditions {
	eq (objectVariablePatternSource.name, tggObjectVariableSource.name)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule GenAdornmentRule_ComplementOtherConstraintsInOtherRules #complements GenAdornmentRule#with org.moflon.tgg.mosl.codeadapter

#source {
	++adornment:Adornment
}

#target {
	_csp:CSP {
		- constraints->tggConstraint
	}
	_rule:TGGRule {
		- csp->_csp
	}
	otherRule:TGGRule {
		- csp->otherCSP
	}
	++otherTggAdornment:Adornment
	otherCSP:CSP {
		- constraints->otherTGGConstraint
	}
	otherTGGConstraint:TGGConstraint {
		++  - modelgenAdornments->otherTggAdornment
	}
	++tggAdornment:Adornment
	tggConstraint:TGGConstraint {
		++  - modelgenAdornments->tggAdornment
	}
	tgg:TripleGraphGrammar {
		- tggRule->otherRule
		- tggRule->_rule
	}
}

#correspondence {
	++  adornmentToTggAdornment :AdornmentToAdornment {
		#src->adornment
		#trg->tggAdornment
	}
	++  adornmentToOtherTggAdornment :AdornmentToAdornment {
		#src->adornment
		#trg->otherTggAdornment
	}
}

#attributeConditions {
	eq (tggAdornment.value, otherTggAdornment.value)
	eq (tggConstraint.name, otherTGGConstraint.name)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule SyncAdornmentRule_ComplementOtherConstraintsWithinTheSameRule #complements SyncAdornmentRule#with org.moflon.tgg.mosl.codeadapter

#source {
	++adornment:Adornment
}

#target {
	++tggAdornment:Adornment
	tggConstraint:TGGConstraint {
		++  - allowedAdornments->tggAdornment
	}
	otherTGGConstraint:TGGConstraint {
		++  - allowedAdornments->otherTGGAdornment
	}
	++otherTGGAdornment:Adornment
	_csp:CSP {
		- constraints->tggConstraint
		- constraints->otherTGGConstraint
	}
}

#correspondence {
	++  tggAdornmentToAdornment :AdornmentToAdornment {
		#src->adornment
		#trg->tggAdornment
	}
	++  adornmentToOtherTGGAdornment :AdornmentToAdornment {
		#src->adornment
		#trg->otherTGGAdornment
	}
}

#attributeConditions {
	eq (tggAdornment.value, otherTGGAdornment.value)
	eq (tggConstraint.name, otherTGGConstraint.name)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule SourceLinkVariablePatternCheckToTGGLinkVariableRule #with org.moflon.tgg.mosl.codeadapter

#source {
	objectVariablePatternTargetSrc:ObjectVariablePattern {
		++  - linkVariablePatterns->linkVariablePatternTarget
	}
	rule:Rule {
		- sourcePatterns->objectVariablePatternTargetSrc
	}
	++linkVariablePatternTarget:LinkVariablePattern
}

#target {
	++tggLinkVariableTarget:TGGLinkVariable {
		bindingSemantics := enum::BindingSemantics::MANDATORY
		bindingOperator := enum::BindingOperator::CHECK_ONLY
		++  - domain->domain
	}
	domain:Domain {
		type == enum::DomainType::SOURCE
	}
	tggObjectVariableTargetSrc:TGGObjectVariable {
		- domain->domain
		++  - outgoingLink->tggLinkVariableTarget
	}
	tggRule:TGGRule {
		++  - linkVariable->tggLinkVariableTarget
		- source->domain
		- objectVariable->tggObjectVariableTargetSrc
	}
}

#correspondence {
	++  linkVariablePatternTargetToTggLinkVariableTarget :LinkVariablePatternToTGGLinkVariable {
		#src->linkVariablePatternTarget
		#trg->tggLinkVariableTarget
	}
	objectVariablePatternTargetSrcToTggObjectVariableTargetSrc :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePatternTargetSrc
		#trg->tggObjectVariableTargetSrc
	}
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule GenAdornmentRule #with org.moflon.tgg.mosl.codeadapter

#source {
	attrCondDef:AttrCondDef {
		++  - allowedGenAdornments->adornment
	}
	attrCond:AttrCond {
		- name->attrCondDef
	}
	++adornment:Adornment
}

#target {
	++tggAdornment:Adornment
	tggConstraint:TGGConstraint {
		++  - modelgenAdornments->tggAdornment
	}
}

#correspondence {
	attrCondToTggConstraint :AttrCondToTGGConstraint {
		#src->attrCond
		#trg->tggConstraint
	}
	++  tggAdornmentToAdornment :AdornmentToAdornment {
		#src->adornment
		#trg->tggAdornment
	}
}

#attributeConditions {
	eq (adornment.value, tggAdornment.value)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule CorrVariablePatternCreateToTGGObjectVariableRule #with org.moflon.tgg.mosl.codeadapter

#source {
	++operator:Operator {
		value := "++"
	}
	++corrVariablePattern:CorrVariablePattern {
		++  - op->operator
	}
	rule:Rule {
		++  - correspondencePatterns->corrVariablePattern
	}
}

#target {
	++tggObjectVariableCorr:TGGObjectVariable {
		bindingOperator := enum::BindingOperator::CREATE
		++  - domain->domainCorrespondence
	}
	tggRule:TGGRule {
		++  - objectVariable->tggObjectVariableCorr
		- correspondence->domainCorrespondence
	}
	domainCorrespondence:Domain {
		name == "Correspondence"
		type == enum::DomainType::CORRESPONDENCE
	}
}

#correspondence {
	++  corrVariablePatternToTggObjectVariableCorr :CorrVariablePatternToTGGObjectVariable {
		#src->corrVariablePattern
		#trg->tggObjectVariableCorr
	}
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
}

#attributeConditions {
	eq (corrVariablePattern.name, tggObjectVariableCorr.name)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule AttributeConstraintLessRule #with org.moflon.tgg.mosl.codeadapter

#source {
	++attributeConstraint:AttributeConstraint {
		op := " < "
	}
}

#target {
	++constraint:Constraint {
		++  - constraintExpression->comparisonExpression
	}
	++comparisonExpression:ComparisonExpression {
		operator := enum::ComparingOperator::LESS
	}
}

#correspondence {
	++  attributeConstraintToConstraint :AttributeConstraintToConstraint {
		#src->attributeConstraint
		#trg->constraint
	}
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule SourceObjectVariablePatternCheckToTGGObjectVariableRule #with org.moflon.tgg.mosl.codeadapter

#source {
	rule:Rule {
		++  - sourcePatterns->objectVariablePatternSource
	}
	++objectVariablePatternSource:ObjectVariablePattern
}

#target {
	tggRule:TGGRule {
		++  - objectVariable->tggObjectVariableSource
		- source->domainSource
	}
	domainSource:Domain {
		type == enum::DomainType::SOURCE
		name == "Source"
	}
	++tggObjectVariableSource:TGGObjectVariable {
		bindingSemantics := enum::BindingSemantics::MANDATORY
		bindingOperator := enum::BindingOperator::CHECK_ONLY
		++  - domain->domainSource
	}
}

#correspondence {
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
	++  objectVariablePatternSourceToTggObjectVariableSource :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePatternSource
		#trg->tggObjectVariableSource
	}
}

#attributeConditions {
	eq (objectVariablePatternSource.name, tggObjectVariableSource.name)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule TargetLinkVariablePatternCheckToTGGLinkVariableRule #with org.moflon.tgg.mosl.codeadapter

#source {
	++linkVariablePatternTarget:LinkVariablePattern
	objectVariablePatternTargetSrc:ObjectVariablePattern {
		++  - linkVariablePatterns->linkVariablePatternTarget
	}
	rule:Rule {
		- targetPatterns->objectVariablePatternTargetSrc
	}
}

#target {
	++tggLinkVariableTarget:TGGLinkVariable {
		bindingOperator := enum::BindingOperator::CHECK_ONLY
		bindingSemantics := enum::BindingSemantics::MANDATORY
		++  - domain->domain
	}
	tggObjectVariableTargetSrc:TGGObjectVariable {
		++  - outgoingLink->tggLinkVariableTarget
		- domain->domain
	}
	domain:Domain {
		type == enum::DomainType::TARGET
	}
	tggRule:TGGRule {
		- target->domain
		++  - linkVariable->tggLinkVariableTarget
		- objectVariable->tggObjectVariableTargetSrc
	}
}

#correspondence {
	objectVariablePatternTargetSrcToTggObjectVariableTargetSrc :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePatternTargetSrc
		#trg->tggObjectVariableTargetSrc
	}
	++  linkVariablePatternTargetToTggLinkVariableTarget :LinkVariablePatternToTGGLinkVariable {
		#src->linkVariablePatternTarget
		#trg->tggLinkVariableTarget
	}
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule AttributeConstraintLeftAttributeExpressionRule #with org.moflon.tgg.mosl.codeadapter

#source {
	attributeConstraint:AttributeConstraint
	objectVariablePatternSource:ObjectVariablePattern {
		++  - attributeConstraints->attributeConstraint
	}
}

#target {
	constraint:Constraint {
		- constraintExpression->comparisonExpression
	}
	comparisonExpression:ComparisonExpression {
		++  - leftExpression->attributeValueExpression
	}
	tggObjectVariableSource:TGGObjectVariable {
		++  - constraint->constraint
	}
	++attributeValueExpression:AttributeValueExpression {
		++  - object->tggObjectVariableSource
	}
}

#correspondence {
	attributeConstraintToConstraint :AttributeConstraintToConstraint {
		#src->attributeConstraint
		#trg->constraint
	}
	objectVariablePatternSourceToTggObjectVariableSource :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePatternSource
		#trg->tggObjectVariableSource
	}
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule AttrCondCheckToTGGConstraintRule_ComplementGenAdornments #complements AttrCondCheckToTGGConstraintRule#with org.moflon.tgg.mosl.codeadapter

#source {
	adornment:Adornment
	attrCondDef:AttrCondDef {
		- allowedGenAdornments->adornment
	}
}

#target {
	++tggConstraint:TGGConstraint {
		++  - modelgenAdornments->tggAdornment
	}
	++tggAdornment:Adornment
}

#correspondence {
	++  adornmentToTggAdornment :AdornmentToAdornment {
		#src->adornment
		#trg->tggAdornment
	}
}

#attributeConditions {
	eq (adornment.value, tggAdornment.value)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule LinkVariablePatternEdgeToTGGLinkVariableEdgeRule #with org.moflon.tgg.mosl.codeadapter

#source {
	linkVariablePatternSource:LinkVariablePattern {
		++  - target->objectVariablePatternSource
	}
	objectVariablePatternSource:ObjectVariablePattern
}

#target {
	tggLinkVariableSource:TGGLinkVariable
	tggObjectVariableSource:TGGObjectVariable {
		++  - incomingLink->tggLinkVariableSource
	}
}

#correspondence {
	objectVariablePatternSourceToTggObjectVariableSource :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePatternSource
		#trg->tggObjectVariableSource
	}
	linkVariablePatternSourceToTggLinkVariableSource :LinkVariablePatternToTGGLinkVariable {
		#src->linkVariablePatternSource
		#trg->tggLinkVariableSource
	}
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule TargetLinkVariablePatternCreateToTGGLinkVariableRule #with org.moflon.tgg.mosl.codeadapter

#source {
	rule:Rule {
		- targetPatterns->objectVariablePatternTargetSrc
	}
	objectVariablePatternTargetSrc:ObjectVariablePattern {
		++  - linkVariablePatterns->linkVariablePatternTarget
	}
	++linkVariablePatternTarget:LinkVariablePattern {
		++  - op->operator
	}
	++operator:Operator {
		value := "++"
	}
}

#target {
	tggRule:TGGRule {
		++  - linkVariable->tggLinkVariableTarget
		- target->domain
		- objectVariable->tggObjectVariableTargetSrc
	}
	domain:Domain {
		type == enum::DomainType::TARGET
	}
	tggObjectVariableTargetSrc:TGGObjectVariable {
		++  - outgoingLink->tggLinkVariableTarget
		- domain->domain
	}
	++tggLinkVariableTarget:TGGLinkVariable {
		bindingOperator := enum::BindingOperator::CREATE
		++  - domain->domain
	}
}

#correspondence {
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
	++  linkVariablePatternTargetToTggLinkVariableTarget :LinkVariablePatternToTGGLinkVariable {
		#src->linkVariablePatternTarget
		#trg->tggLinkVariableTarget
	}
	objectVariablePatternTargetSrcToTggObjectVariableTargetSrc :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePatternTargetSrc
		#trg->tggObjectVariableTargetSrc
	}
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule SyncAdornmentRule #with org.moflon.tgg.mosl.codeadapter

#source {
	++adornment:Adornment
	attrCondDef:AttrCondDef {
		++  - allowedSyncAdornments->adornment
	}
	attrCond:AttrCond {
		- name->attrCondDef
	}
}

#target {
	tggConstraint:TGGConstraint {
		++  - allowedAdornments->tggAdornment
	}
	++tggAdornment:Adornment
}

#correspondence {
	attrCondToTggConstraint :AttrCondToTGGConstraint {
		#src->attrCond
		#trg->tggConstraint
	}
	++  tggAdornmentToAdornment :AdornmentToAdornment {
		#src->adornment
		#trg->tggAdornment
	}
}

#attributeConditions {
	eq (adornment.value, tggAdornment.value)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule AttributeConstraintRightExpressionEdgeRule #with org.moflon.tgg.mosl.codeadapter

#source {
	attributeConstraint:AttributeConstraint {
		++  - valueExp->expression
	}
	expression:Expression
}

#target {
	constraint:Constraint {
		- constraintExpression->comparisonExpression
	}
	tggExpression:Expression
	comparisonExpression:ComparisonExpression {
		++  - rightExpression->tggExpression
	}
}

#correspondence {
	attributeConstraintToConstraint :AttributeConstraintToConstraint {
		#src->attributeConstraint
		#trg->constraint
	}
	expressionToTggExpression :ExpressionToExpression {
		#src->expression
		#trg->tggExpression
	}
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule SourceLinkVariablePatternNACToTGGLinkVariableRule #with org.moflon.tgg.mosl.codeadapter

#source {
	objectVariablePatternTargetSrc:ObjectVariablePattern {
		++  - linkVariablePatterns->linkVariablePatternTarget
	}
	rule:Rule {
		- sourcePatterns->objectVariablePatternTargetSrc
	}
	++operator:Operator {
		value := "!"
	}
	++linkVariablePatternTarget:LinkVariablePattern {
		++  - op->operator
	}
}

#target {
	tggRule:TGGRule {
		++  - linkVariable->tggLinkVariableTarget
		- objectVariable->tggObjectVariableTargetSrc
		- source->domain
	}
	++tggLinkVariableTarget:TGGLinkVariable {
		bindingSemantics := enum::BindingSemantics::NEGATIVE
		bindingOperator := enum::BindingOperator::CHECK_ONLY
		++  - domain->domain
	}
	tggObjectVariableTargetSrc:TGGObjectVariable {
		- domain->domain
		++  - outgoingLink->tggLinkVariableTarget
	}
	domain:Domain {
		type == enum::DomainType::SOURCE
	}
}

#correspondence {
	objectVariablePatternTargetSrcToTggObjectVariableTargetSrc :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePatternTargetSrc
		#trg->tggObjectVariableTargetSrc
	}
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
	++  linkVariablePatternTargetToTggLinkVariableTarget :LinkVariablePatternToTGGLinkVariable {
		#src->linkVariablePatternTarget
		#trg->tggLinkVariableTarget
	}
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule AttrCondCheckToTGGConstraintRule #with org.moflon.tgg.mosl.codeadapter

#source {
	attrCondDef:AttrCondDef
	schema:Schema {
		- attributeCondDefs->attrCondDef
	}
	rule:Rule {
		- schema->schema
		++  - attrConditions->attrCond
	}
	++attrCond:AttrCond {
		++  - name->attrCondDef
	}
}

#target {
	tggRule:TGGRule {
		- csp->tggCSP
	}
	++tggConstraint:TGGConstraint
	tggCSP:CSP {
		++  - constraints->tggConstraint
	}
}

#correspondence {
	++  attrCondToTggConstraint :AttrCondToTGGConstraint {
		#src->attrCond
		#trg->tggConstraint
	}
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
}

#attributeConditions {
	eq (attrCondDef.name, tggConstraint.name)
	eq (attrCondDef.userDefined, tggConstraint.userDefined)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule AttributeVariableRule #with org.moflon.tgg.mosl.codeadapter

#source {
	objectVariablePattern:ObjectVariablePattern
	rule:Rule {
		- sourcePatterns->objectVariablePattern
		- attrConditions->attrCond
	}
	attrCond:AttrCond {
		++  - values->attributeVariable
	}
	++attributeVariable:AttributeVariable {
		++  - objectVar->objectVariablePattern
	}
}

#target {
	tggRule:TGGRule {
		- objectVariable->tggObjectVariable
		- csp->tggCSP
	}
	tggCSP:CSP {
		- variables->attributeVariableNAC
		++  - variables->tggAttributeVariable
		- constraints->tggConstraint
	}
	tggConstraint:TGGConstraint {
		++  - variables->tggAttributeVariable
	}
	!attributeVariableNAC:AttributeVariable {
		objectVariable == objectVariablePattern . name
		attribute == attributeVariable . attribute
	}
	++tggAttributeVariable:AttributeVariable
	tggObjectVariable:TGGObjectVariable
}

#correspondence {
	attrCondToTggConstraint :AttrCondToTGGConstraint {
		#src->attrCond
		#trg->tggConstraint
	}
	objectVariablePatternToTggObjectVariable :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePattern
		#trg->tggObjectVariable
	}
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
	++  attributeVariableToTggAttributeVariable :ParamValueToVariable {
		#src->attributeVariable
		#trg->tggAttributeVariable
	}
}

#attributeConditions {
	eq (tggAttributeVariable.objectVariable, tggObjectVariable.name)
	eq (attributeVariable.attribute, tggAttributeVariable.attribute)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule AttributeConstraintLessOrEqualRule #with org.moflon.tgg.mosl.codeadapter

#source {
	++attributeConstraint:AttributeConstraint {
		op := " <= "
	}
}

#target {
	++comparisonExpression:ComparisonExpression {
		operator := enum::ComparingOperator::LESS_OR_EQUAL
	}
	++constraint:Constraint {
		++  - constraintExpression->comparisonExpression
	}
}

#correspondence {
	++  attributeConstraintToConstraint :AttributeConstraintToConstraint {
		#src->attributeConstraint
		#trg->constraint
	}
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule AttributeVariableTargetOVRule #with org.moflon.tgg.mosl.codeadapter

#source {
	++attributeVariable:AttributeVariable {
		++  - objectVar->objectVariablePattern
	}
	objectVariablePattern:ObjectVariablePattern
	rule:Rule {
		- targetPatterns->objectVariablePattern
		- attrConditions->attrCond
	}
	attrCond:AttrCond {
		++  - values->attributeVariable
	}
}

#target {
	++tggAttributeVariable:AttributeVariable
	tggConstraint:TGGConstraint {
		++  - variables->tggAttributeVariable
	}
	tggRule:TGGRule {
		- objectVariable->tggObjectVariable
		- csp->tggCSP
	}
	tggObjectVariable:TGGObjectVariable
	!attributeVariableNAC:AttributeVariable {
		attribute == attributeVariable . attribute
		objectVariable == objectVariablePattern . name
	}
	tggCSP:CSP {
		- variables->attributeVariableNAC
		++  - variables->tggAttributeVariable
		- constraints->tggConstraint
	}
}

#correspondence {
	objectVariablePatternToTggObjectVariable :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePattern
		#trg->tggObjectVariable
	}
	++  attributeVariableToTggAttributeVariable :ParamValueToVariable {
		#src->attributeVariable
		#trg->tggAttributeVariable
	}
	attrCondToTggConstraint :AttrCondToTGGConstraint {
		#src->attrCond
		#trg->tggConstraint
	}
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
}

#attributeConditions {
	eq (tggObjectVariable.name, tggAttributeVariable.objectVariable)
	eq (attributeVariable.attribute, tggAttributeVariable.attribute)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule CorrVariablePatternCheckToTGGObjectVariableRule #with org.moflon.tgg.mosl.codeadapter

#source {
	++corrVariablePattern:CorrVariablePattern
	rule:Rule {
		++  - correspondencePatterns->corrVariablePattern
	}
}

#target {
	tggRule:TGGRule {
		- correspondence->domainCorrespondence
		++  - objectVariable->tggObjectVariableCorr
	}
	++tggObjectVariableCorr:TGGObjectVariable {
		bindingOperator := enum::BindingOperator::CHECK_ONLY
		++  - domain->domainCorrespondence
	}
	domainCorrespondence:Domain {
		name == "Correspondence"
		type == enum::DomainType::CORRESPONDENCE
	}
}

#correspondence {
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
	++  corrVariablePatternToTggObjectVariableCorr :CorrVariablePatternToTGGObjectVariable {
		#src->corrVariablePattern
		#trg->tggObjectVariableCorr
	}
}

#attributeConditions {
	eq (corrVariablePattern.name, tggObjectVariableCorr.name)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule TargetLinkVariablePatternNACToTGGLinkVariableRule #with org.moflon.tgg.mosl.codeadapter

#source {
	rule:Rule {
		- targetPatterns->objectVariablePatternTargetSrc
	}
	++operator:Operator {
		value := "!"
	}
	objectVariablePatternTargetSrc:ObjectVariablePattern {
		++  - linkVariablePatterns->linkVariablePatternTarget
	}
	++linkVariablePatternTarget:LinkVariablePattern {
		++  - op->operator
	}
}

#target {
	tggRule:TGGRule {
		++  - linkVariable->tggLinkVariableTarget
		- target->domain
		- objectVariable->tggObjectVariableTargetSrc
	}
	++tggLinkVariableTarget:TGGLinkVariable {
		bindingOperator := enum::BindingOperator::CHECK_ONLY
		bindingSemantics := enum::BindingSemantics::NEGATIVE
		++  - domain->domain
	}
	domain:Domain {
		type == enum::DomainType::TARGET
	}
	tggObjectVariableTargetSrc:TGGObjectVariable {
		++  - outgoingLink->tggLinkVariableTarget
		- domain->domain
	}
}

#correspondence {
	objectVariablePatternTargetSrcToTggObjectVariableTargetSrc :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePatternTargetSrc
		#trg->tggObjectVariableTargetSrc
	}
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
	++  linkVariablePatternTargetToTggLinkVariableTarget :LinkVariablePatternToTGGLinkVariable {
		#src->linkVariablePatternTarget
		#trg->tggLinkVariableTarget
	}
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule LocalVariableCheckRule #with org.moflon.tgg.mosl.codeadapter

#source {
	rule:Rule {
		- attrConditions->attrCond
	}
	++localVariable:LocalVariable
	attrCond:AttrCond {
		++  - values->localVariable
	}
}

#target {
	tggLocalVariable:LocalVariable
	tggCSP:CSP {
		- constraints->tggConstraint
		- variables->tggLocalVariable
	}
	tggConstraint:TGGConstraint {
		++  - variables->tggLocalVariable
	}
	tggRule:TGGRule {
		- csp->tggCSP
	}
}

#correspondence {
	attrCondToTggConstraint :AttrCondToTGGConstraint {
		#src->attrCond
		#trg->tggConstraint
	}
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
	++  localVariableToTggLocalVariable :ParamValueToVariable {
		#src->localVariable
		#trg->tggLocalVariable
	}
}

#attributeConditions {
	eq (localVariable.name, tggLocalVariable.name)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule AttributeAssignmentExpressionEdgeRule #with org.moflon.tgg.mosl.codeadapter

#source {
	attributeAssignment:AttributeAssignment {
		++  - valueExp->expression
	}
	expression:Expression
}

#target {
	tggAttributeAssignment:AttributeAssignment {
		++  - valueExpression->tggExpression
	}
	tggExpression:Expression
}

#correspondence {
	expressionToTggExpression :ExpressionToExpression {
		#src->expression
		#trg->tggExpression
	}
	attributeAssignmentToTggAttributeAssignment :AttributeAssignmentToAttributeAssignment {
		#src->attributeAssignment
		#trg->tggAttributeAssignment
	}
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule SourceCorrVariablePatternCreateToTGGLinkVariableRule #with org.moflon.tgg.mosl.codeadapter

#source {
	corrVariablePattern:CorrVariablePattern {
		++  - source->objectVariablePatternSource
		- op->operator
	}
	objectVariablePatternSource:ObjectVariablePattern
	operator:Operator {
		value == "++"
	}
}

#target {
	tggRule:TGGRule {
		++  - linkVariable->tggLinkVariableSource
		- correspondence->domainCorrespondence
		- objectVariable->tggObjectVariableCorr
	}
	domainCorrespondence:Domain {
		type == enum::DomainType::CORRESPONDENCE
		name == "Correspondence"
	}
	tggObjectVariableSource:TGGObjectVariable {
		++  - incomingLink->tggLinkVariableSource
	}
	++tggLinkVariableSource:TGGLinkVariable {
		name := "source"
		bindingOperator := enum::BindingOperator::CREATE
		++  - domain->domainCorrespondence
	}
	tggObjectVariableCorr:TGGObjectVariable {
		bindingOperator == enum::BindingOperator::CREATE
		- domain->domainCorrespondence
		++  - outgoingLink->tggLinkVariableSource
	}
}

#correspondence {
	objectVariablePatternSourceToTggObjectVariableSource :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePatternSource
		#trg->tggObjectVariableSource
	}
	corrVariablePatternToTggObjectVariableCorr :CorrVariablePatternToTGGObjectVariable {
		#src->corrVariablePattern
		#trg->tggObjectVariableCorr
	}
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule RootRule2 #with org.moflon.tgg.mosl.codeadapter

#source {
	++schema:Schema
	++tggFile:TripleGraphGrammarFile {
		++  - schema->schema
	}
}

#target {
	++domainTarget:Domain {
		name := "Target"
		type := enum::DomainType::TARGET
		++  - metamodel->metamodelTarget
	}
	++corrPackage:EPackage {
		++  - eSubpackages->rulesPackage
	}
	++rulesPackage:EPackage {
		name := "Rules"
		nsPrefix := "Rules"
	}
	++domainSource:Domain {
		name := "Source"
		type := enum::DomainType::SOURCE
		++  - metamodel->metamodelSource
	}
	++metamodelTarget:Metamodel
	++project:TGGProject {
		++  - corrPackage->corrPackage
		++  - tgg->tggModel
	}
	++tggModel:TripleGraphGrammar {
		++  - metamodel->metamodelSource
		++  - metamodel->metamodelTarget
		++  - metamodel->metamodelCorrespondence
		++  - domain->domainSource
		++  - domain->domainTarget
		++  - domain->domainCorrespondence
	}
	++domainCorrespondence:Domain {
		name := "Correspondence"
		type := enum::DomainType::CORRESPONDENCE
		++  - metamodel->metamodelCorrespondence
	}
	++metamodelCorrespondence:Metamodel
	++metamodelSource:Metamodel
}

#correspondence {
	++  tggFileToTgg :TripleGraphGrammarFileToTripleGraphGrammar {
		#src->tggFile
		#trg->tggModel
	}
}

#attributeConditions {
	CapitalizeString (corrPackage.name, ^corrPkgName)
	addSuffix (corrPackage.nsURI, "#//Rules", rulesPackage.nsURI)
	eq (tggModel.name, corrPackage.nsPrefix)
	addSuffix (^corrPkgName, ".ecore", ^nsURIend)
	eq (schema.name, tggModel.name)
	addPrefix ("platform:/plugin/", corrPackage.nsPrefix, ^nsURIstart)
	eq (corrPackage.name, metamodelCorrespondence.name)
	NamespaceToName (tggModel.name, corrPackage.name)
	concat ("/model/", ^nsURIstart, ^nsURIend, corrPackage.nsURI)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule TargetObjectVariablePatternNACToTGGObjectVariableRule #with org.moflon.tgg.mosl.codeadapter

#source {
	++objectVariablePatternTarget:ObjectVariablePattern {
		++  - op->operator
	}
	++operator:Operator {
		value := "!"
	}
	rule:Rule {
		++  - targetPatterns->objectVariablePatternTarget
	}
}

#target {
	tggRule:TGGRule {
		++  - objectVariable->tggObjectVariableTarget
		- target->domainTarget
	}
	++tggObjectVariableTarget:TGGObjectVariable {
		bindingSemantics := enum::BindingSemantics::NEGATIVE
		bindingOperator := enum::BindingOperator::CHECK_ONLY
		++  - domain->domainTarget
	}
	domainTarget:Domain {
		type == enum::DomainType::TARGET
		name == "Target"
	}
}

#correspondence {
	++  objectVariablePatternTargetToTggObjectVariableTarget :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePatternTarget
		#trg->tggObjectVariableTarget
	}
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
}

#attributeConditions {
	eq (objectVariablePatternTarget.name, tggObjectVariableTarget.name)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule RefinementEdgeRule #with org.moflon.tgg.mosl.codeadapter

#source {
	rule:Rule {
		++  - supertypes->superRule
	}
	superRule:Rule
}

#target {
	tggRule:TGGRule {
		++  - refines->superTGGRule
	}
	superTGGRule:TGGRule
}

#correspondence {
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
	superTGGRuleToSuperRule :RuleToTGGRule {
		#src->superRule
		#trg->superTGGRule
	}
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule GenAdornmentRule_ComplementOtherConstraintsWithinTheSameRule #complements GenAdornmentRule#with org.moflon.tgg.mosl.codeadapter

#source {
	++adornment:Adornment
}

#target {
	++otherTggAdornment:Adornment
	otherTGGConstraint:TGGConstraint {
		++  - modelgenAdornments->otherTggAdornment
	}
	++tggAdornment:Adornment
	tggConstraint:TGGConstraint {
		++  - modelgenAdornments->tggAdornment
	}
	_csp:CSP {
		- constraints->otherTGGConstraint
		- constraints->tggConstraint
	}
}

#correspondence {
	++  adornmentToOtherTggAdornment :AdornmentToAdornment {
		#src->adornment
		#trg->otherTggAdornment
	}
	++  adornmentToTggAdornment :AdornmentToAdornment {
		#src->adornment
		#trg->tggAdornment
	}
}

#attributeConditions {
	eq (tggAdornment.value, otherTggAdornment.value)
	eq (tggConstraint.name, otherTGGConstraint.name)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule LiteralRule #with org.moflon.tgg.mosl.codeadapter

#source {
	++literal:LiteralExpression
	attrCond:AttrCond {
		++  - values->literal
	}
	rule:Rule {
		- attrConditions->attrCond
	}
}

#target {
	tggCSP:CSP {
		++  - variables->tggLiteral
		- constraints->tggConstraint
		- variables->literalNAC
	}
	tggRule:TGGRule {
		- csp->tggCSP
	}
	++tggLiteral:Literal {
		bound := true
	}
	tggConstraint:TGGConstraint {
		++  - variables->tggLiteral
	}
	!literalNAC:Literal {
		value == literal . value
	}
}

#correspondence {
	attrCondToTggConstraint :AttrCondToTGGConstraint {
		#src->attrCond
		#trg->tggConstraint
	}
	++  literalToTggLiteral :ParamValueToVariable {
		#src->literal
		#trg->tggLiteral
	}
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
}

#attributeConditions {
	eq (literal.value, tggLiteral.value)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule AttributeConstraintUnequalRule #with org.moflon.tgg.mosl.codeadapter

#source {
	++attributeConstraint:AttributeConstraint {
		op := " != "
	}
}

#target {
	++comparisonExpression:ComparisonExpression {
		operator := enum::ComparingOperator::UNEQUAL
	}
	++constraint:Constraint {
		++  - constraintExpression->comparisonExpression
	}
}

#correspondence {
	++  attributeConstraintToConstraint :AttributeConstraintToConstraint {
		#src->attributeConstraint
		#trg->constraint
	}
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule TargetObjectVariablePatternCreateToTGGObjectVariableRule #with org.moflon.tgg.mosl.codeadapter

#source {
	rule:Rule {
		++  - targetPatterns->objectVariablePatternTarget
	}
	++objectVariablePatternTarget:ObjectVariablePattern {
		++  - op->operator
	}
	++operator:Operator {
		value := "++"
	}
}

#target {
	domainTarget:Domain {
		name == "Target"
		type == enum::DomainType::TARGET
	}
	++tggObjectVariableTarget:TGGObjectVariable {
		bindingOperator := enum::BindingOperator::CREATE
		bindingSemantics := enum::BindingSemantics::MANDATORY
		++  - domain->domainTarget
	}
	tggRule:TGGRule {
		++  - objectVariable->tggObjectVariableTarget
		- target->domainTarget
	}
}

#correspondence {
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
	++  objectVariablePatternToTggObjectVariableTarget :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePatternTarget
		#trg->tggObjectVariableTarget
	}
}

#attributeConditions {
	eq (objectVariablePatternTarget.name, tggObjectVariableTarget.name)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule ParamToSignatureElementRule_ComplementOtherConstraintsWithinTheSameRule #complements ParamToSignatureElementRule#with org.moflon.tgg.mosl.codeadapter

#source {
	++param:Param
}

#target {
	tggConstraint:TGGConstraint {
		++  - signature->signatureElement
	}
	_csp:CSP {
		- constraints->otherTGGConstraint
		- constraints->tggConstraint
	}
	++otherSignatureElement:SignatureElement
	otherTGGConstraint:TGGConstraint {
		++  - signature->otherSignatureElement
	}
	++signatureElement:SignatureElement
}

#correspondence {
	++  paramToOtherSignatureElement :ParamToSignatureElement {
		#src->param
		#trg->otherSignatureElement
	}
	++  paramToSignatureElement :ParamToSignatureElement {
		#src->param
		#trg->signatureElement
	}
}

#attributeConditions {
	eq (tggConstraint.name, otherTGGConstraint.name)
	eq (signatureElement.type, otherSignatureElement.type)
	eq (signatureElement.index, otherSignatureElement.index)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule LiteralCheckRule #with org.moflon.tgg.mosl.codeadapter

#source {
	attrCond:AttrCond {
		++  - values->literal
	}
	++literal:LiteralExpression
	rule:Rule {
		- attrConditions->attrCond
	}
}

#target {
	tggRule:TGGRule {
		- csp->tggCSP
	}
	tggConstraint:TGGConstraint {
		++  - variables->tggLiteral
	}
	tggLiteral:Literal
	tggCSP:CSP {
		- constraints->tggConstraint
		- variables->tggLiteral
	}
}

#correspondence {
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
	++  literalToTggLiteral :ParamValueToVariable {
		#src->literal
		#trg->tggLiteral
	}
	attrCondToTggConstraint :AttrCondToTGGConstraint {
		#src->attrCond
		#trg->tggConstraint
	}
}

#attributeConditions {
	eq (literal.value, tggLiteral.value)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule CorrVariablePatternNACToTGGObjectVariableRule #with org.moflon.tgg.mosl.codeadapter

#source {
	++operator:Operator {
		value := "!"
	}
	++corrVariablePattern:CorrVariablePattern {
		++  - op->operator
	}
	rule:Rule {
		++  - correspondencePatterns->corrVariablePattern
	}
}

#target {
	domainCorrespondence:Domain {
		type == enum::DomainType::CORRESPONDENCE
		name == "Correspondence"
	}
	tggRule:TGGRule {
		++  - objectVariable->tggObjectVariableCorr
		- correspondence->domainCorrespondence
	}
	++tggObjectVariableCorr:TGGObjectVariable {
		bindingSemantics := enum::BindingSemantics::NEGATIVE
		bindingOperator := enum::BindingOperator::CHECK_ONLY
		++  - domain->domainCorrespondence
	}
}

#correspondence {
	++  corrVariablePatternToTggObjectVariableCorr :CorrVariablePatternToTGGObjectVariable {
		#src->corrVariablePattern
		#trg->tggObjectVariableCorr
	}
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
}

#attributeConditions {
	eq (corrVariablePattern.name, tggObjectVariableCorr.name)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule SourceObjectVariablePatternNACToTGGObjectVariableRule #with org.moflon.tgg.mosl.codeadapter

#source {
	++objectVariablePatternSource:ObjectVariablePattern {
		++  - op->operator
	}
	++operator:Operator {
		value := "!"
	}
	rule:Rule {
		++  - sourcePatterns->objectVariablePatternSource
	}
}

#target {
	++tggObjectVariableSource:TGGObjectVariable {
		bindingSemantics := enum::BindingSemantics::NEGATIVE
		bindingOperator := enum::BindingOperator::CHECK_ONLY
		++  - domain->domainSource
	}
	domainSource:Domain {
		name == "Source"
		type == enum::DomainType::SOURCE
	}
	tggRule:TGGRule {
		- source->domainSource
		++  - objectVariable->tggObjectVariableSource
	}
}

#correspondence {
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
	++  objectVariablePatternSourceToTggObjectVariableSource :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePatternSource
		#trg->tggObjectVariableSource
	}
}

#attributeConditions {
	eq (objectVariablePatternSource.name, tggObjectVariableSource.name)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule ParamToSignatureElementRule_ComplementOtherConstraintsInOtherRules #complements ParamToSignatureElementRule#with org.moflon.tgg.mosl.codeadapter

#source {
	++param:Param
}

#target {
	++signatureElement:SignatureElement
	_rule:TGGRule {
		- csp->_csp
	}
	otherRule:TGGRule {
		- csp->otherCSP
	}
	_csp:CSP {
		- constraints->tggConstraint
	}
	otherTGGConstraint:TGGConstraint {
		++  - signature->otherSignatureElement
	}
	++otherSignatureElement:SignatureElement
	tggConstraint:TGGConstraint {
		++  - signature->signatureElement
	}
	tgg:TripleGraphGrammar {
		- tggRule->_rule
		- tggRule->otherRule
	}
	otherCSP:CSP {
		- constraints->otherTGGConstraint
	}
}

#correspondence {
	++  paramToSignatureElement :ParamToSignatureElement {
		#src->param
		#trg->signatureElement
	}
	++  otherSignatureElementToParam :ParamToSignatureElement {
		#src->param
		#trg->otherSignatureElement
	}
}

#attributeConditions {
	eq (signatureElement.type, otherSignatureElement.type)
	eq (signatureElement.index, otherSignatureElement.index)
	eq (tggConstraint.name, otherTGGConstraint.name)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule AttrCondCreateToTGGConstraintRule #with org.moflon.tgg.mosl.codeadapter

#source {
	++attrCond:AttrCond {
		++  - name->attrCondDef
	}
	rule:Rule {
		++  - attrConditions->attrCond
		- schema->schema
	}
	!attrCondDefNac:AttrCondDef {
		name == tggConstraint . name
	}
	++attrCondDef:AttrCondDef
	schema:Schema {
		- attributeCondDefs->attrCondDefNac
		++  - attributeCondDefs->attrCondDef
	}
}

#target {
	tggRule:TGGRule {
		- csp->tggCSP
	}
	tggCSP:CSP {
		++  - constraints->tggConstraint
	}
	++tggConstraint:TGGConstraint
}

#correspondence {
	++  attrCondToTggConstraint :AttrCondToTGGConstraint {
		#src->attrCond
		#trg->tggConstraint
	}
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
}

#attributeConditions {
	eq (attrCondDef.name, tggConstraint.name)
	eq (attrCondDef.userDefined, tggConstraint.userDefined)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule TargetObjectVariablePatternCheckToTGGObjectVariableRule #with org.moflon.tgg.mosl.codeadapter

#source {
	rule:Rule {
		++  - targetPatterns->objectVariablePatternTarget
	}
	++objectVariablePatternTarget:ObjectVariablePattern
}

#target {
	tggRule:TGGRule {
		- target->domainTarget
		++  - objectVariable->tggObjectVariableTarget
	}
	domainTarget:Domain {
		name == "Target"
		type == enum::DomainType::TARGET
	}
	++tggObjectVariableTarget:TGGObjectVariable {
		bindingOperator := enum::BindingOperator::CHECK_ONLY
		bindingSemantics := enum::BindingSemantics::MANDATORY
		++  - domain->domainTarget
	}
}

#correspondence {
	++  objectVariablePatternTargetToTggObjectVariableTarget :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePatternTarget
		#trg->tggObjectVariableTarget
	}
	ruleToTggRule :RuleToTGGRule {
		#src->rule
		#trg->tggRule
	}
}

#attributeConditions {
	eq (objectVariablePatternTarget.name, tggObjectVariableTarget.name)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule AttributeConstraintGreaterOrEqualRule #with org.moflon.tgg.mosl.codeadapter

#source {
	++attributeConstraint:AttributeConstraint {
		op := " >= "
	}
}

#target {
	++constraint:Constraint {
		++  - constraintExpression->comparisonExpression
	}
	++comparisonExpression:ComparisonExpression {
		operator := enum::ComparingOperator::GREATER_OR_EQUAL
	}
}

#correspondence {
	++  attributeConstraintToConstraint :AttributeConstraintToConstraint {
		#src->attributeConstraint
		#trg->constraint
	}
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule AttrCondCheckToTGGConstraintRule_ComplementSyncAdornments #complements AttrCondCheckToTGGConstraintRule#with org.moflon.tgg.mosl.codeadapter

#source {
	attrCondDef:AttrCondDef {
		- allowedSyncAdornments->adornment
	}
	adornment:Adornment
}

#target {
	++tggConstraint:TGGConstraint {
		++  - allowedAdornments->tggAdornment
	}
	++tggAdornment:Adornment
}

#correspondence {
	++  adornmentToTggAdornment :AdornmentToAdornment {
		#src->adornment
		#trg->tggAdornment
	}
}

#attributeConditions {
	eq (tggAdornment.value, adornment.value)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule AttributeAssignmentAttributeExpressionRule #with org.moflon.tgg.mosl.codeadapter

#source {
	attributeAssignment:AttributeAssignment {
		++  - valueExp->attributeExpression
	}
	objectVariablePatternSource:ObjectVariablePattern
	++attributeExpression:AttributeExpression {
		++  - objectVar->objectVariablePatternSource
	}
}

#target {
	tggAttributeAssignment:AttributeAssignment {
		++  - valueExpression->attributeValueExpression
	}
	tggObjectVariableSource:TGGObjectVariable
	++attributeValueExpression:AttributeValueExpression {
		++  - object->tggObjectVariableSource
	}
}

#correspondence {
	objectVariablePatternSourceToTggObjectVariableSource :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePatternSource
		#trg->tggObjectVariableSource
	}
	++  attributeExpressionToAttributeValueExpression :ExpressionToExpression {
		#src->attributeExpression
		#trg->attributeValueExpression
	}
	attributeAssignmentToTggAttributeAssignment :AttributeAssignmentToAttributeAssignment {
		#src->attributeAssignment
		#trg->tggAttributeAssignment
	}
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule AttributeConstraintGreaterRule #with org.moflon.tgg.mosl.codeadapter

#source {
	++attributeConstraint:AttributeConstraint {
		op := " > "
	}
}

#target {
	++constraint:Constraint {
		++  - constraintExpression->comparisonExpression
	}
	++comparisonExpression:ComparisonExpression {
		operator := enum::ComparingOperator::GREATER
	}
}

#correspondence {
	++  attributeConstraintToConstraint :AttributeConstraintToConstraint {
		#src->attributeConstraint
		#trg->constraint
	}
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule SyncAdornmentRule_ComplementOtherConstraintsInOtherRules #complements SyncAdornmentRule#with org.moflon.tgg.mosl.codeadapter

#source {
	++adornment:Adornment
}

#target {
	++tggAdornment:Adornment
	++otherTGGadornment:Adornment
	otherTGGConstraint:TGGConstraint {
		++  - allowedAdornments->otherTGGadornment
	}
	otherCSP:CSP {
		- constraints->otherTGGConstraint
	}
	tggConstraint:TGGConstraint {
		++  - allowedAdornments->tggAdornment
	}
	tgg:TripleGraphGrammar {
		- tggRule->_rule
		- tggRule->otherRule
	}
	otherRule:TGGRule {
		- csp->otherCSP
	}
	_csp:CSP {
		- constraints->tggConstraint
	}
	_rule:TGGRule {
		- csp->_csp
	}
}

#correspondence {
	++  tggAdornmentToAdornment :AdornmentToAdornment {
		#src->adornment
		#trg->tggAdornment
	}
	++  adornmentToOtherTGGadornment :AdornmentToAdornment {
		#src->adornment
		#trg->otherTGGadornment
	}
}

#attributeConditions {
	eq (tggConstraint.name, otherTGGConstraint.name)
	eq (otherTGGadornment.value, tggAdornment.value)
}


#using org.moflon.tgg.mosl.codeadapter.*  #using AttrCondDefLibrary.*

#rule TargetCorrVariablePatternCheckToTGGLinkVariableRule #with org.moflon.tgg.mosl.codeadapter

#source {
	!operator:Operator
	corrVariablePattern:CorrVariablePattern {
		++  - target->objectVariablePatternTarget
		- op->operator
	}
	objectVariablePatternTarget:ObjectVariablePattern
}

#target {
	domainCorrespondence:Domain {
		name == "Correspondence"
		type == enum::DomainType::CORRESPONDENCE
	}
	tggRule:TGGRule {
		- objectVariable->tggObjectVariableCorr
		++  - linkVariable->tggLinkVariableTarget
		- correspondence->domainCorrespondence
	}
	++tggLinkVariableTarget:TGGLinkVariable {
		bindingOperator := enum::BindingOperator::CHECK_ONLY
		name := "target"
		++  - domain->domainCorrespondence
	}
	tggObjectVariableTarget:TGGObjectVariable {
		++  - incomingLink->tggLinkVariableTarget
	}
	tggObjectVariableCorr:TGGObjectVariable {
		bindingOperator == enum::BindingOperator::CHECK_ONLY
		++  - outgoingLink->tggLinkVariableTarget
		- domain->domainCorrespondence
	}
}

#correspondence {
	objectVariablePatternTargetToTggObjectVariableTarget :ObjectVariablePatternToTGGObjectVariable {
		#src->objectVariablePatternTarget
		#trg->tggObjectVariableTarget
	}
	corrVariablePatternToTggObjectVariableCorr :CorrVariablePatternToTGGObjectVariable {
		#src->corrVariablePattern
		#trg->tggObjectVariableCorr
	}
}


