
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphMorphisms.impl.SymbolicGraphMorphismImpl;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphs.Conjunction;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphs.Disjunction;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphs.Predicate;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphs.SymbolicGraphsFactory;
import java.util.stream.Collectors;

partial class OldSemanticAnalyserImpl {



@model removeFormula (SymbolicGraph graphG) <--

		CategoryUtil util = CategoryUtilsFactory.eINSTANCE.createCategoryUtil();
		SymbolicGraphMorphism isoMor = util.copyGraph(graphG);
		SymbolicGraph copy = isoMor.getDom();

		Disjunction dis = SymbolicGraphsFactory.eINSTANCE.createDisjunction();
		copy.setFormula(dis);

		Conjunction conj = SymbolicGraphsFactory.eINSTANCE.createConjunction();
		dis.getOf().add(conj);

		Predicate pred = SymbolicGraphsFactory.eINSTANCE.createPredicate();
		pred.setSymbol("#T");
		conj.getOf().add(pred);

		return isoMor;
-->

@model getRestrictionMorphism (SymbolicGraph graphG) <--

		CategoryUtil util = CategoryUtilsFactory.eINSTANCE.createCategoryUtil();
		SymbolicGraphMorphism isoMor = util.copyGraph(graphG);
		isoMor.getDom().getLabelNodes().stream().filter(ln -> ln.getLabelEdge().isEmpty()).collect(Collectors.toList())
				.forEach(ln -> {
					isoMor.getDom().getLabelNodes().remove(ln);
					((SymbolicGraphMorphismImpl) isoMor).labelNodeMap.removeMapping(ln);

				});
		return isoMor;
-->

}