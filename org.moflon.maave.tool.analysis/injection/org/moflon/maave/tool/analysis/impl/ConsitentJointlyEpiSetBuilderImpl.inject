
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;
import org.moflon.maave.tool.analysis.util.SubgraphBuilder;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphMorphisms.SymbolicGraphMorphism;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphMorphisms.SymbolicGraphMorphismsFactory;
import org.moflon.maave.tool.category.CategoryFactory;
import org.moflon.maave.tool.category.SymbolicGraphCat;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphMorphisms.MorphismPair;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphMorphisms.MorphismPairSet;
import org.moflon.maave.tool.category.SymbolicPushout;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.ConfigurableMorphismFinder;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingFactory;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MorphismFinderFactory;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingUtils.ConfigurableMorphismClassFactory;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingUtils.MatchingUtilsFactory;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingUtils.MorphismClass;

partial class ConsitentJointlyEpiSetBuilderImpl {

@members <--

   private MorphismPair deriveMinimalContext(SymbolicGraphMorphism morA_L1, SymbolicGraphMorphism morA_L2, SymbolicGraphCat cat)
   {
      SymbolicPushout po = cat.pushout(morA_L1, morA_L2);
      MorphismPair minContext = SymbolicGraphMorphismsFactory.eINSTANCE.createMorphismPair();
      minContext.setFirst(po.getMorphism().get(0));
      minContext.setSecond(po.getMorphism().get(1));
      return minContext;
   }
   
-->

@model deriveMinimalContexts (SymbolicGraph graphL2, SymbolicGraphMorphism morA_L1) <--

      ConfigurableMorphismClassFactory morClassFac = MatchingUtilsFactory.eINSTANCE.createConfigurableMorphismClassFactory();
      MorphismClass morClass = morClassFac.createMorphismClass("I", "I", "I", "I", "*");

      MorphismFinderFactory morFinderFac = MatchingFactory.eINSTANCE.createMorphismFinderFactory();
      ConfigurableMorphismFinder morFinderForA = morFinderFac.createMorphismFinder(morA_L1.getDom(), morClass);

      SymbolicGraphMorphism emptyMorA_L2 = SymbolicGraphMorphismsFactory.eINSTANCE.createSymbolicGraphMorphism();
      emptyMorA_L2.setDom(morA_L1.getDom());
      emptyMorA_L2.setCodom(graphL2);

      MorphismsSet morSetA_L2 = morFinderForA.getAllMorphisms(emptyMorA_L2);

      SymbolicGraphCat category = CategoryFactory.eINSTANCE.createSymbolicGraphCat();
      MorphismPairSet criticalPairSet = SymbolicGraphMorphismsFactory.eINSTANCE.createMorphismPairSet();
      morSetA_L2.getMorphisms().stream().map(x -> this.deriveMinimalContext(morA_L1, x, category)).forEach(x -> criticalPairSet.getMorphismPairs().add(x));
      return criticalPairSet;
-->

@model filterMinimalContexts (MorphismPairSet criticalPairSet) <--

      MorphismPairSet consistentCritPairSet = SymbolicGraphMorphismsFactory.eINSTANCE.createMorphismPairSet();
      List<MorphismPair> minimalContexts = new LinkedList<MorphismPair>(criticalPairSet.getMorphismPairs());

      for (MorphismPair crPair : minimalContexts)
      {
         if (this.getGraphTransformationSystem().checkConsistency(crPair.getFirst().getCodom()).isValid())
         {
            consistentCritPairSet.getMorphismPairs().add(crPair);
         }
      }
      return consistentCritPairSet;
-->

@model getAllMinimalContexts (SymbolicGraph graphL1, SymbolicGraph graphL2, GraphTransformationSystem gts) <--

      this.setGraphTransformationSystem(gts);
      MorphismsSet subgraphs = this.getAllSubgraphs(graphL1);

      List<MorphismPairSet> rawMinContextsList = subgraphs.getMorphisms().stream().map(x -> this.deriveMinimalContexts(graphL2, x))
            .collect(Collectors.toList());
      MorphismPairSet rawMinContexts = SymbolicGraphMorphismsFactory.eINSTANCE.createMorphismPairSet();
      for (MorphismPairSet morphismPairSet : rawMinContextsList)
      {
         rawMinContexts.getMorphismPairs().addAll(morphismPairSet.getMorphismPairs());
      }
      MorphismPairSet filteredMinContexts = this.filterMinimalContexts(rawMinContexts);
      return filteredMinContexts;
-->

@model getAllSubgraphs (SymbolicGraph symbGraph) <--

      SubgraphBuilder subgraphBuilder = new SubgraphBuilder(symbGraph);
      return subgraphBuilder.getAllSubgraphs();
-->

}