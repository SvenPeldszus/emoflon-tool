/*
 * generated by Xtext
 */
package org.moflon.tgg.mosl.ui.quickfix

import org.moflon.tgg.mosl.validation.TGGValidator
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.validation.Issue
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext
import org.moflon.tgg.mosl.tgg.ObjectVariablePattern
import org.moflon.tgg.mosl.tgg.Rule

//import org.eclipse.xtext.ui.editor.quickfix.Fix
//import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
//import org.eclipse.xtext.validation.Issue

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#quick-fixes
 */
class TGGQuickfixProvider extends org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider {

	@Fix(TGGValidator::NOT_UNIQUE_OBJECT_VARIABLE_NAME)
	def fixDuplicateNames(Issue issue, IssueResolutionAcceptor acceptor) {
		var messageParts = issue.message.split("'");
		var name ="";
		if (messageParts.size() == 3)
			name = messageParts.get(1);
			
		acceptor.accept(issue, 
    			"change name",    // label
    			"change name '" + name +"' to '" + name + "1'", // description
    			null,           // icon 
    			new ISemanticModification() {
     					override apply(EObject element, IModificationContext context) {
        					val ovPattern = element as ObjectVariablePattern;
        					ovPattern.name = ovPattern.name + '1';
						}				
				}
		)
	}
	
	@Fix(TGGValidator::TYPE_IS_ABSTRACT)
	def changeRuleToAbstract(Issue issue, IssueResolutionAcceptor acceptor) {
		var messageParts = issue.message.split("'");
		var name ="";
		if (messageParts.size() == 5)
			name = messageParts.get(1);
			
		acceptor.accept(issue, 
    			"change Rule to abstract",    // label
    			"change Rule to abstract '" + name +"'", // description
    			null,           // icon 
    			new ISemanticModification() {
     					override apply(EObject element, IModificationContext context) {
        					val ovPattern = element as ObjectVariablePattern;
        					if(ovPattern.eContainer instanceof Rule){
        						var rule = ovPattern.eContainer as Rule;
        						rule.abstractRule = true;
        					}
						}				
				}
		)
	}
//	@Fix(MyDslValidator::INVALID_NAME)
//	def capitalizeName(Issue issue, IssueResolutionAcceptor acceptor) {
//		acceptor.accept(issue, 'Capitalize name', 'Capitalize the name.', 'upcase.png') [
//			context |
//			val xtextDocument = context.xtextDocument
//			val firstLetter = xtextDocument.get(issue.offset, 1)
//			xtextDocument.replace(issue.offset, 1, firstLetter.toUpperCase)
//		]
//	}
}
