
import SDMLanguage.SDMLanguagePackage;
import SDMLanguage.activities.MoflonEOperation;
import SDMLanguage.activities.StoryNode;
import SDMLanguage.patterns.StoryPattern;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.moflon.core.utilities.eMoflonEMFUtil;
import org.moflon.maave.tests.lang.mnoq.MnoqPackage;

partial class CPATestImpl {



@model getTestPattern (String name) <--

		ResourceSet rs = new ResourceSetImpl();
		//    rs.getResourceFactoryRegistry().getExtensionToFactoryMap().put("xmi", new XMIResourceFactoryImpl());
		//    rs.getURIConverter().getURIMap().put(URI.createPlatformResourceURI("/", true), URI.createFileURI(args[0] + "\\"));
		//    rs.getURIConverter().getURIMap().put(URI.createPlatformPluginURI("/DiagramChasingTestGen/", true), URI.createPlatformResourceURI("/DiagramChasingTestGen/", true));

		//URI testGeneratorURI =URI.createURI("DiagramChasingTestGen/model/DiagramChasingTestGen.ecore",true);
		SDMLanguagePackage.eINSTANCE.getClass();
		MnoqPackage.eINSTANCE.getClass();
		EPackage pack = (EPackage) eMoflonEMFUtil
				.loadModel("../DiagramChasingTestGen/model/DiagramChasingTestGen.ecore");

		EClass clazz = (EClass) pack.getEClassifier("CPATest");
		MoflonEOperation eop = (MoflonEOperation) clazz.getEAllOperations().stream()
				.filter(x -> x.getName().equals(name)).findFirst().get();
		StoryNode stn = (StoryNode) eop.getActivity().getOwnedActivityNode().stream()
				.filter(x -> x instanceof StoryNode).findFirst().get();
		return stn.getStoryPattern();
-->

}