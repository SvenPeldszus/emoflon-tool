
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingUtils.CategoryUtil;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingUtils.MatchingUtilsFactory;
import java.util.List;
import java.util.stream.Collectors;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphs.LabelNode;
import org.moflon.maave.tool.category.CategoryFactory;
import org.moflon.maave.tool.category.SymbolicGraphCat;

partial class NormalFormBuilderImpl {



@model getNormalForm (SymbolicGraph graphG) <--

      CategoryUtil catUtil = MatchingUtilsFactory.eINSTANCE.createCategoryUtil();
      SymbolicGraphMorphism morA_G = catUtil.copyGraph(graphG);
      SymbolicGraph graphA = morA_G.getDom();
      List<LabelNode> auxLabelNodes = graphA.getLabelNodes().stream().filter(ln -> ln.getLabelEdge().isEmpty()).collect(Collectors.toList());
      for (LabelNode labelNode : auxLabelNodes)
      {
         morA_G.getDom().getLabelNodes().remove(labelNode);
         morA_G.removeMapping(labelNode);
      }

      SymbolicGraphCat cat = CategoryFactory.eINSTANCE.createSymbolicGraphCat();
      return cat.Project(morA_G);
-->

}