
import org.moflon.maave.tool.analysis.confluence.NaiveConfDirectDerivationIterator;
import java.util.List;
import java.util.stream.Collectors;
import org.moflon.maave.tool.analysis.confluence.ItterativeDirectDerivationIterator;
import org.moflon.maave.tool.analysis.CriticalPairBuilder;
import org.moflon.maave.tool.analysis.JointlyEpiSetBuilder;

partial class DirectConfluenceModuloNFEQAnalyserImpl {



@model checkConfluence (GraphTransformationSystem gts) <--

      CriticalPairBuilder criticalPairBuilder = AnalysisFactory.eINSTANCE.createBasicSymbolicCriticalPairBuilder();
      JointlyEpiSetBuilder jointlyEpiSetBuilder = AnalysisFactory.eINSTANCE.createNonEmptySemanticJointlyEpiSetBuilder();
      this.setGraphTransformationSystem(gts);
      ConfluenceAnalysisReport report = ConfluenceFactory.eINSTANCE.createConfluenceAnalysisReport();
      for (int i = 0; i < gts.getRules().size(); i++)
      {
         for (int j = i+1; j < gts.getRules().size(); j++)
         {
            SymbGTRule rule1 = gts.getRules().get(i);
            SymbGTRule rule2 = gts.getRules().get(j);

            long timeStampStart = System.currentTimeMillis();
            DirectDerivationPairSet criticalPairSet = criticalPairBuilder.getAllCriticalPairs(rule1, rule2, gts, jointlyEpiSetBuilder);
            long timeStampCPA = System.currentTimeMillis();
            ConfluenceAnalysisResult result = criticalPairSet.getPairsOfDirectDerivations().parallelStream().map(x -> this.checkDirectConfluence(x))
                  .filter(s -> s.isValid() == false).findAny().orElse(ConfluenceFactory.eINSTANCE.createConfluenceAnalysisResult());
            long timeStampConfluence = System.currentTimeMillis();
            if (result.getNonConfluentCriticalPair() == null)
            {
               result.setValid(true);
            }
            result.setMessage("Confluence analysis result for Rules: " + rule1.getName() + " | " + rule2.getName());
            result.setNrOfCriticalpairs(criticalPairSet.getPairsOfDirectDerivations().size());
            result.setTimeForCPA(timeStampCPA - timeStampStart);
            result.setTimeForConfluence(timeStampConfluence - timeStampCPA);
            report.getConfluenceStates().add(result);
         }
      }
      return report;
-->

@model getDerivationItterator (SymbGTRule production, SymbolicGraphMorphism morN_P, SymbolicGraph graphG) <--

      ItterativeDirectDerivationIterator derIter = ConfluenceFactory.eINSTANCE.createItterativeDirectDerivationIterator();
      derIter.init(production, morN_P, this.getGraphTransformationSystem());
      return derIter;
-->

}