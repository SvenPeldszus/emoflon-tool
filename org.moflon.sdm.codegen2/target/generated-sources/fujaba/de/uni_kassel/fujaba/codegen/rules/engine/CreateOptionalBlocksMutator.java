/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.rules.engine;
import java.util.Iterator;

import de.uni_kassel.fujaba.codegen.rules.Operation;
import de.uni_kassel.fujaba.codegen.rules.OptionalBlock;
import de.uni_kassel.fujaba.codegen.rules.Token;
import de.uni_kassel.fujaba.codegen.rules.UMLObjectRef;
import de.uni_paderborn.fujaba.uml.behavior.UMLObject;
import de.upb.tools.sdm.JavaSDM; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDMException;


public class CreateOptionalBlocksMutator extends CreateBlocksMutator
{


   public boolean checkToJoinBlock (OptionalBlock optionalBlock , Operation otherChildOp )
   {
      boolean fujaba__Success = false;
      UMLObject obj = null;
      Iterator fujaba__IterOtherChildOpToObjectRef = null;
      UMLObjectRef objectRef = null;
      Iterator fujaba__IterOptionalBlockToObjectRef = null;

      // story pattern Successor of Successor of Successor of 
      try 
      {
         fujaba__Success = false; 

         // check object optionalBlock is really bound
         JavaSDM.ensure ( optionalBlock != null );
         // check object otherChildOp is really bound
         JavaSDM.ensure ( otherChildOp != null );
         // check isomorphic binding between objects otherChildOp and optionalBlock
         JavaSDM.ensure ( !otherChildOp.equals (optionalBlock) );

         // iterate to-many link needs from otherChildOp to objectRef
         fujaba__Success = false;
         fujaba__IterOtherChildOpToObjectRef = otherChildOp.iteratorOfNeeds ();

         while ( !(fujaba__Success) && fujaba__IterOtherChildOpToObjectRef.hasNext () )
         {
            try
            {
               objectRef = (UMLObjectRef) fujaba__IterOtherChildOpToObjectRef.next ();

               // check object objectRef is really bound
               JavaSDM.ensure ( objectRef != null );
               // check link needs from objectRef to optionalBlock
               JavaSDM.ensure (!(objectRef.hasInDependentOperations (optionalBlock)));

               // search to-one link ref from objectRef to obj
               obj = objectRef.getRef ();

               // check object obj is really bound
               JavaSDM.ensure ( obj != null );

               // attribute condition type == UMLObject.OPTIONAL
               JavaSDM.ensure ( obj.getType () == UMLObject.OPTIONAL );



               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return false;

      }
      // story pattern Successor of Successor of Successor of Successor of 
      try 
      {
         fujaba__Success = false; 

         // check object optionalBlock is really bound
         JavaSDM.ensure ( optionalBlock != null );
         // check object otherChildOp is really bound
         JavaSDM.ensure ( otherChildOp != null );
         // check isomorphic binding between objects otherChildOp and optionalBlock
         JavaSDM.ensure ( !otherChildOp.equals (optionalBlock) );

         // iterate to-many link needs from optionalBlock to objectRef
         fujaba__Success = false;
         fujaba__IterOptionalBlockToObjectRef = optionalBlock.iteratorOfNeeds ();

         while ( !(fujaba__Success) && fujaba__IterOptionalBlockToObjectRef.hasNext () )
         {
            try
            {
               objectRef = (UMLObjectRef) fujaba__IterOptionalBlockToObjectRef.next ();

               // check object objectRef is really bound
               JavaSDM.ensure ( objectRef != null );
               // check link needs from objectRef to otherChildOp
               JavaSDM.ensure (!(objectRef.hasInDependentOperations (otherChildOp)));


               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return false;

      }
      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // check object optionalBlock is really bound
         JavaSDM.ensure ( optionalBlock != null );
         // check object otherChildOp is really bound
         JavaSDM.ensure ( otherChildOp != null );
         // check isomorphic binding between objects otherChildOp and optionalBlock
         JavaSDM.ensure ( !otherChildOp.equals (optionalBlock) );

         // create link children from optionalBlock to otherChildOp
         optionalBlock.addToChildren (otherChildOp);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return true;
   }

   public void createBlock (Token op )
   {
      boolean fujaba__Success = false;
      Object _TmpObject = null;
      Operation operation = null;
      UMLObject object = null;
      Iterator fujaba__IterChildToObjectRef = null;
      UMLObjectRef objectRef = null;
      Iterator fujaba__IterOperationToChild = null;
      Operation child = null;

      do
      {
         // story pattern 
         try 
         {
            fujaba__Success = false; 

            _TmpObject = op;

            // ensure correct type and really bound of object operation
            JavaSDM.ensure ( _TmpObject instanceof Operation );
            operation = (Operation) _TmpObject;

            // iterate to-many link children from operation to child
            fujaba__Success = false;
            fujaba__IterOperationToChild = operation.iteratorOfChildren ();

            while ( !(fujaba__Success) && fujaba__IterOperationToChild.hasNext () )
            {
               try
               {
                  _TmpObject =  fujaba__IterOperationToChild.next ();

                  // ensure correct type and really bound of object child
                  JavaSDM.ensure ( _TmpObject instanceof Operation );
                  child = (Operation) _TmpObject;

                  // check isomorphic binding between objects operation and child
                  JavaSDM.ensure ( !operation.equals (child) );

                  // iterate to-many link needs from child to objectRef
                  fujaba__Success = false;
                  fujaba__IterChildToObjectRef = child.iteratorOfNeeds ();

                  while ( !(fujaba__Success) && fujaba__IterChildToObjectRef.hasNext () )
                  {
                     try
                     {
                        objectRef = (UMLObjectRef) fujaba__IterChildToObjectRef.next ();

                        // check object objectRef is really bound
                        JavaSDM.ensure ( objectRef != null );
                        // search to-one link ref from objectRef to object
                        object = objectRef.getRef ();

                        // check object object is really bound
                        JavaSDM.ensure ( object != null );

                        // attribute condition type == UMLObject.OPTIONAL
                        JavaSDM.ensure ( object.getType () == UMLObject.OPTIONAL );

                        // constraint !(child instanceof OptionalBlock)
                        JavaSDM.ensure ( !(child instanceof OptionalBlock) );
                        // constraint !(op instanceof OptionalBlock)
                        JavaSDM.ensure ( !(op instanceof OptionalBlock) );


                        fujaba__Success = true;
                     }
                     catch ( JavaSDMException fujaba__InternalException )
                     {
                        fujaba__Success = false;
                     }
                  }
                  JavaSDM.ensure (fujaba__Success);

                  fujaba__Success = true;
               }
               catch ( JavaSDMException fujaba__InternalException )
               {
                  fujaba__Success = false;
               }
            }
            JavaSDM.ensure (fujaba__Success);
            // collabStat call
            this.createOptionalBlock( operation, child );
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }


      }
      while ( fujaba__Success );return ;
   }

   public void createOptionalBlock (Operation op , Operation childOp )
   {
      boolean fujaba__Success = false;
      OptionalBlock optionalBlock = null;
      UMLObject obj = null;
      Iterator fujaba__IterChildOpToNeeds = null;
      UMLObjectRef needs = null;
      Object _TmpObject = null;
      Operation otherChildOp = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object childOp is really bound
         JavaSDM.ensure ( childOp != null );
         // check object op is really bound
         JavaSDM.ensure ( op != null );
         // check isomorphic binding between objects op and childOp
         JavaSDM.ensure ( !op.equals (childOp) );

         // check link children from op to childOp
         JavaSDM.ensure (op.hasInChildren (childOp));

         // create object optionalBlock
         optionalBlock = new OptionalBlock ( );

         // create link children from op to optionalBlock
         op.addBeforeOfChildren (childOp, optionalBlock);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern Successor of 
      try 
      {
         fujaba__Success = false; 

         // check object childOp is really bound
         JavaSDM.ensure ( childOp != null );
         // check object optionalBlock is really bound
         JavaSDM.ensure ( optionalBlock != null );
         // check isomorphic binding between objects optionalBlock and childOp
         JavaSDM.ensure ( !optionalBlock.equals (childOp) );

         // iterate to-many link needs from childOp to needs
         fujaba__Success = false;
         fujaba__IterChildOpToNeeds = childOp.iteratorOfNeeds ();

         while ( fujaba__IterChildOpToNeeds.hasNext () )
         {
            try
            {
               needs = (UMLObjectRef) fujaba__IterChildOpToNeeds.next ();

               // check object needs is really bound
               JavaSDM.ensure ( needs != null );
               // search to-one link ref from needs to obj
               obj = needs.getRef ();

               // check object obj is really bound
               JavaSDM.ensure ( obj != null );

               // attribute condition type == UMLObject.OPTIONAL
               JavaSDM.ensure ( obj.getType () == UMLObject.OPTIONAL );

               // create link needs from needs to optionalBlock
               needs.addToDependentOperations (optionalBlock);



               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      do
      {
         // story pattern Successor of Successor of 
         try 
         {
            fujaba__Success = false; 

            // check object childOp is really bound
            JavaSDM.ensure ( childOp != null );
            // check object op is really bound
            JavaSDM.ensure ( op != null );
            // check isomorphic binding between objects op and childOp
            JavaSDM.ensure ( !op.equals (childOp) );

            // check link children from op to childOp
            JavaSDM.ensure (op.hasInChildren (childOp));

            // search multilink UMLMultiLink[{next}]
            // search to-one link children from op to otherChildOp
            _TmpObject = op.getNextOfChildren (childOp);

            // ensure correct type and really bound of object otherChildOp
            JavaSDM.ensure ( _TmpObject instanceof Operation );
            otherChildOp = (Operation) _TmpObject;


            // check isomorphic binding between objects otherChildOp and childOp
            JavaSDM.ensure ( !otherChildOp.equals (childOp) );

            // check isomorphic binding between objects otherChildOp and op
            JavaSDM.ensure ( !otherChildOp.equals (op) );

            // constraint this.checkToJoinBlock( optionalBlock, otherChildOp )
            JavaSDM.ensure ( this.checkToJoinBlock( optionalBlock, otherChildOp ) );

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }


      }
      while ( fujaba__Success );// story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object childOp is really bound
         JavaSDM.ensure ( childOp != null );
         // check object optionalBlock is really bound
         JavaSDM.ensure ( optionalBlock != null );
         // check isomorphic binding between objects optionalBlock and childOp
         JavaSDM.ensure ( !optionalBlock.equals (childOp) );

         // create link children from optionalBlock to childOp
         optionalBlock.addToChildren (0, childOp);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

}


