/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.rules;
import java.util.Collections;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.fujaba.codegen.textlang.UMLTextLangInfo;
import de.uni_paderborn.fujaba.uml.behavior.UMLLink;
import de.uni_paderborn.fujaba.uml.behavior.UMLObject;
import de.upb.tools.fca.FEmptyIterator;
import de.upb.tools.fca.FHashMap;
import de.upb.tools.fca.FHashSet; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDM;
import de.upb.tools.sdm.JavaSDMException; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public class ObjectSet implements Cloneable
{


   /**
    * <pre>
    *           0..1     objectSet     0..n
    * ObjectSet ------------------------- UMLTextLangInfo
    *           objectSet               UMLTextLangInfos
    * </pre>
    */
   public static final String PROPERTY_UML_TEXT_LANG_INFOS = "UMLTextLangInfos";

   @Property( name = PROPERTY_UML_TEXT_LANG_INFOS, partner = UMLTextLangInfo.PROPERTY_OBJECT_SET, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashSet<UMLTextLangInfo> UMLTextLangInfos;

   @Property( name = PROPERTY_UML_TEXT_LANG_INFOS )
   public Set<? extends UMLTextLangInfo> getUMLTextLangInfos()
   {
      return ((this.UMLTextLangInfos == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.UMLTextLangInfos));
   }

   @Property( name = PROPERTY_UML_TEXT_LANG_INFOS )
   public boolean addToUMLTextLangInfos (UMLTextLangInfo value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.UMLTextLangInfos == null)
         {
            this.UMLTextLangInfos = new FHashSet<UMLTextLangInfo> ();

         }
      
         changed = this.UMLTextLangInfos.add (value);
         if (changed)
         {
            value.setObjectSet (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_UML_TEXT_LANG_INFOS )
   public ObjectSet withUMLTextLangInfos (UMLTextLangInfo value)
   {
      addToUMLTextLangInfos (value);
      return this;
   }

   public ObjectSet withoutUMLTextLangInfos (UMLTextLangInfo value)
   {
      removeFromUMLTextLangInfos (value);
      return this;
   }


   public boolean removeFromUMLTextLangInfos (UMLTextLangInfo value)
   {
      boolean changed = false;

      if ((this.UMLTextLangInfos != null) && (value != null))
      {
      
         changed = this.UMLTextLangInfos.remove (value);
         if (changed)
         {
            value.setObjectSet (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_UML_TEXT_LANG_INFOS )
   public void removeAllFromUMLTextLangInfos (){
   
      UMLTextLangInfo tmpValue;
      Iterator<? extends UMLTextLangInfo> iter = this.iteratorOfUMLTextLangInfos ();
      while (iter.hasNext ())
      {
         tmpValue = (UMLTextLangInfo) iter.next ();
         this.removeFromUMLTextLangInfos (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_UML_TEXT_LANG_INFOS )
   public boolean hasInUMLTextLangInfos (UMLTextLangInfo value)
   {
      return ((this.UMLTextLangInfos != null) &&
              (value != null) &&
              this.UMLTextLangInfos.contains (value));
   }

   @Property( name = PROPERTY_UML_TEXT_LANG_INFOS )
   public Iterator<? extends UMLTextLangInfo> iteratorOfUMLTextLangInfos ()
   {
      return ((this.UMLTextLangInfos == null)
              ? FEmptyIterator.<UMLTextLangInfo>get ()
              : this.UMLTextLangInfos.iterator ());
   }

   @Property( name = PROPERTY_UML_TEXT_LANG_INFOS )
   public int sizeOfUMLTextLangInfos ()
   {
      return ((this.UMLTextLangInfos == null)
              ? 0
              : this.UMLTextLangInfos.size ());
   }

   public Object clone ()
   {
      boolean fujaba__Success = false;
      ObjectSet clone = null;
      Iterator fujaba__IterThisToObjRef = null;
      UMLObjectRef objRef = null;
      Iterator fujaba__IterThisToLinkRef = null;
      UMLLinkRef linkRef = null;

      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // create object clone
         clone = new ObjectSet ( );

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object clone is really bound
         JavaSDM.ensure ( clone != null );
         // check isomorphic binding between objects this and clone
         JavaSDM.ensure ( !this.equals (clone) );

         // iterate to-many link items from this to objRef
         fujaba__Success = false;
         fujaba__IterThisToObjRef = this.iteratorOfItems ();

         while ( fujaba__IterThisToObjRef.hasNext () )
         {
            try
            {
               objRef = (UMLObjectRef) fujaba__IterThisToObjRef.next ();

               // check object objRef is really bound
               JavaSDM.ensure ( objRef != null );
               // create link items from objRef to clone
               objRef.addToList (clone);


               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern Successor of storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object clone is really bound
         JavaSDM.ensure ( clone != null );
         // check isomorphic binding between objects this and clone
         JavaSDM.ensure ( !this.equals (clone) );

         // iterate to-many link links from this to linkRef
         fujaba__Success = false;
         fujaba__IterThisToLinkRef = this.iteratorOfLinks ();

         while ( fujaba__IterThisToLinkRef.hasNext () )
         {
            try
            {
               linkRef = (UMLLinkRef) fujaba__IterThisToLinkRef.next ();

               // check object linkRef is really bound
               JavaSDM.ensure ( linkRef != null );
               // create link links from linkRef to clone
               linkRef.setList (clone);


               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return clone;
   }

   public UMLLinkRef getOrCreateLinkRef (UMLLink link )
   {
      boolean fujaba__Success = false;
      UMLLinkRef linkRef = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // search to-one link links from this to linkRef
         linkRef = this.getFromLinks (link);

         // check object linkRef is really bound
         JavaSDM.ensure ( linkRef != null );


         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return linkRef;

      }
      // story pattern Successor of storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object link is really bound
         JavaSDM.ensure ( link != null );
         // create object linkRef
         linkRef = new UMLLinkRef ( );

         // create link ref from linkRef to link
         linkRef.setRef (link);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern Successor of Successor of storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object linkRef is really bound
         JavaSDM.ensure ( linkRef != null );
         // create link links from linkRef to this
         linkRef.setList (this);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return linkRef;
   }

   public UMLObjectRef getOrCreateObjectRef (UMLObject object )
   {
      boolean fujaba__Success = false;
      UMLObjectRef objectRef = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // search to-one link items from this to objectRef
         objectRef = this.getFromItems (object);

         // check object objectRef is really bound
         JavaSDM.ensure ( objectRef != null );


         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return objectRef;

      }
      // story pattern Successor of storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object object is really bound
         JavaSDM.ensure ( object != null );
         // create object objectRef
         objectRef = new UMLObjectRef ( );

         // create link ref from objectRef to object
         objectRef.setRef (object);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern Successor of Successor of storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object objectRef is really bound
         JavaSDM.ensure ( objectRef != null );
         // create link items from objectRef to this
         objectRef.addToList (this);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return objectRef;
   }

   /**
    * <pre>
    *           0..n     items     0..1
    * ObjectSet ------------------------- UMLObjectRef
    *           list               items
    * </pre>
    */
   public static final String PROPERTY_ITEMS = "items";

   @Property( name = PROPERTY_ITEMS, partner = UMLObjectRef.PROPERTY_LIST, kind = ReferenceHandler.ReferenceKind.QUALIFIED_TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashMap<UMLObject, UMLObjectRef> items;

   @Property( name = PROPERTY_ITEMS )
   public Map<UMLObject, ? extends UMLObjectRef> getItems()
   {
      return ((this.items == null)
              ? Collections.EMPTY_MAP
              : Collections.unmodifiableMap(this.items));
   }

   @Property( name = PROPERTY_ITEMS )
   public boolean addToItems (UMLObjectRef value)
   {
      return this.addToItems (getKeyForItems (value), value);
   }

   @Property( name = PROPERTY_ITEMS )
   public ObjectSet withItems (UMLObjectRef value)
   {
      addToItems (value);
      return this;
   }

   public ObjectSet withoutItems (UMLObjectRef value)
   {
      removeFromItems (value);
      return this;
   }


   public boolean removeFromItems (UMLObjectRef value)
   {
      return removeFromItems (getKeyForItems (value), value);
   }

   @Property( name = PROPERTY_ITEMS )
   public void removeAllFromItems (){
   
      Map.Entry entry;
      Iterator iter = entriesOfItems ();
      while (iter.hasNext ())
      {
         entry = (Map.Entry) iter.next ();
         removeFromItems ((UMLObject) entry.getKey (), (UMLObjectRef) entry.getValue ());
      }
   }

   @Property( name = PROPERTY_ITEMS )
   public boolean hasInItems (UMLObjectRef value)
   {
      return (this.hasInItems (this.getKeyForItems (value), value));
   }

   @Property( name = PROPERTY_ITEMS )
   public Iterator<? extends UMLObjectRef> iteratorOfItems ()
   {
      return ((this.items == null)
              ? FEmptyIterator.<UMLObjectRef>get ()
              : this.items.values ().iterator ());
   }

   @Property( name = PROPERTY_ITEMS )
   public int sizeOfItems ()
   {
      return ((this.items == null)
              ? 0
              : this.items.size ());
   }

   @Property( name = PROPERTY_ITEMS )
   public boolean hasInItems (UMLObject key, UMLObjectRef value)
   {
      return ((this.items != null) &&
              (value != null || this.items.containsKey (key)) && 
              (this.items.get (key) == value));
   }

   @Property( name = PROPERTY_ITEMS )
   public boolean hasKeyInItems (UMLObject key)
   {
      return ((this.items != null) &&
              this.items.containsKey (key));
   }

   @Property( name = PROPERTY_ITEMS )
   public Iterator<UMLObject> keysOfItems ()
   {
      return ((this.items == null)
              ? FEmptyIterator.<UMLObject>get ()
              : this.items.keySet ().iterator ());
   }

   @Property( name = PROPERTY_ITEMS )
   public Iterator entriesOfItems ()
   {
      return ((this.items == null)
              ? FEmptyIterator.get ()
              : this.items.entrySet ().iterator ());
   }

   @Property( name = PROPERTY_ITEMS )
   protected boolean addToItems (UMLObject key, UMLObjectRef value)
   {
      boolean changed = false;

      if (this.items == null)
      {
         this.items = new FHashMap<UMLObject, UMLObjectRef> ();
      }
   
      UMLObjectRef oldValue = (UMLObjectRef) this.items.put (key, value);
      if (oldValue != value)
      {
         if (oldValue != null)
         {
            oldValue.removeFromList (this);
         }
         if (value != null)
         {
            value.addToList (this);
         }
         changed = true;
      }
   
      return changed;
   }

   @Property( name = PROPERTY_ITEMS )
   protected boolean addToItems (Map.Entry entry)
   {
      return addToItems ((UMLObject) entry.getKey (), (UMLObjectRef) entry.getValue ());
   }

   @Property( name = PROPERTY_ITEMS )
   protected boolean removeFromItems (UMLObject key, UMLObjectRef value)
   {
      boolean changed = false;

      if (this.items != null)
      {
         UMLObjectRef oldValue = (UMLObjectRef) this.items.get (key);
         if (oldValue == value && 
             (oldValue != null || this.items.containsKey (key)))
         {
         
            this.items.remove (key);
            if (value != null)
            {
               value.removeFromList (this);
            }
            changed = true;
         
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_ITEMS )
   public boolean removeKeyFromItems (UMLObject key)
   {
      boolean changed = false;

      if (this.items != null)
      {
         changed = this.items.containsKey (key);
         if (changed)
         {
         
            UMLObjectRef tmpValue = (UMLObjectRef) this.items.remove (key);
            if (tmpValue != null)
            {
               tmpValue.removeFromList (this);
            }
         
         }
      }
      return changed;
   }
   @Property( name = PROPERTY_ITEMS )
   public UMLObjectRef getFromItems (UMLObject key)
   {
      return ((this.items == null)
              ? null
              : (UMLObjectRef) this.items.get (key));
   }
   @Property( name = PROPERTY_ITEMS )
   public UMLObject getKeyForItems (UMLObjectRef value)
   {
      return (value == null ? null : value.getRef ());
   }

   @Property( name = PROPERTY_ITEMS )
   public void keyChangedInItems (UMLObject oldKey, UMLObjectRef value)
   {
      if ((this.items != null) &&  
          (oldKey != getKeyForItems (value)))
      {
         UMLObjectRef oldValue = (UMLObjectRef) this.items.get (oldKey);
         if (oldValue == value)
         {
            this.items.remove (oldKey);
            oldValue = (UMLObjectRef)this.items.put (this.getKeyForItems (value), value);
            if (oldValue != null)
            {
               oldValue.removeFromList (this);
            }
         }
      }
   }

   /**
    * <pre>
    *           0..1     links     0..1
    * ObjectSet ------------------------- UMLLinkRef
    *           list               links
    * </pre>
    */
   public static final String PROPERTY_LINKS = "links";

   @Property( name = PROPERTY_LINKS, partner = UMLLinkRef.PROPERTY_LIST, kind = ReferenceHandler.ReferenceKind.QUALIFIED_TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashMap<UMLLink, UMLLinkRef> links;

   @Property( name = PROPERTY_LINKS )
   public Map<UMLLink, ? extends UMLLinkRef> getLinks()
   {
      return ((this.links == null)
              ? Collections.EMPTY_MAP
              : Collections.unmodifiableMap(this.links));
   }

   @Property( name = PROPERTY_LINKS )
   public boolean addToLinks (UMLLinkRef value)
   {
      return this.addToLinks (getKeyForLinks (value), value);
   }

   @Property( name = PROPERTY_LINKS )
   public ObjectSet withLinks (UMLLinkRef value)
   {
      addToLinks (value);
      return this;
   }

   public ObjectSet withoutLinks (UMLLinkRef value)
   {
      removeFromLinks (value);
      return this;
   }


   public boolean removeFromLinks (UMLLinkRef value)
   {
      return removeFromLinks (getKeyForLinks (value), value);
   }

   @Property( name = PROPERTY_LINKS )
   public void removeAllFromLinks (){
   
      Map.Entry entry;
      Iterator iter = entriesOfLinks ();
      while (iter.hasNext ())
      {
         entry = (Map.Entry) iter.next ();
         removeFromLinks ((UMLLink) entry.getKey (), (UMLLinkRef) entry.getValue ());
      }
   }

   @Property( name = PROPERTY_LINKS )
   public boolean hasInLinks (UMLLinkRef value)
   {
      return (this.hasInLinks (this.getKeyForLinks (value), value));
   }

   @Property( name = PROPERTY_LINKS )
   public Iterator<? extends UMLLinkRef> iteratorOfLinks ()
   {
      return ((this.links == null)
              ? FEmptyIterator.<UMLLinkRef>get ()
              : this.links.values ().iterator ());
   }

   @Property( name = PROPERTY_LINKS )
   public int sizeOfLinks ()
   {
      return ((this.links == null)
              ? 0
              : this.links.size ());
   }

   @Property( name = PROPERTY_LINKS )
   public boolean hasInLinks (UMLLink key, UMLLinkRef value)
   {
      return ((this.links != null) &&
              (value != null || this.links.containsKey (key)) && 
              (this.links.get (key) == value));
   }

   @Property( name = PROPERTY_LINKS )
   public boolean hasKeyInLinks (UMLLink key)
   {
      return ((this.links != null) &&
              this.links.containsKey (key));
   }

   @Property( name = PROPERTY_LINKS )
   public Iterator<UMLLink> keysOfLinks ()
   {
      return ((this.links == null)
              ? FEmptyIterator.<UMLLink>get ()
              : this.links.keySet ().iterator ());
   }

   @Property( name = PROPERTY_LINKS )
   public Iterator entriesOfLinks ()
   {
      return ((this.links == null)
              ? FEmptyIterator.get ()
              : this.links.entrySet ().iterator ());
   }

   @Property( name = PROPERTY_LINKS )
   protected boolean addToLinks (UMLLink key, UMLLinkRef value)
   {
      boolean changed = false;

      if (this.links == null)
      {
         this.links = new FHashMap<UMLLink, UMLLinkRef> ();
      }
   
      UMLLinkRef oldValue = (UMLLinkRef) this.links.put (key, value);
      if (oldValue != value)
      {
         if (oldValue != null)
         {
            oldValue.setList (null);
         }
         if (value != null)
         {
            value.setList (this);
         }
         changed = true;
      }
   
      return changed;
   }

   @Property( name = PROPERTY_LINKS )
   protected boolean addToLinks (Map.Entry entry)
   {
      return addToLinks ((UMLLink) entry.getKey (), (UMLLinkRef) entry.getValue ());
   }

   @Property( name = PROPERTY_LINKS )
   protected boolean removeFromLinks (UMLLink key, UMLLinkRef value)
   {
      boolean changed = false;

      if (this.links != null)
      {
         UMLLinkRef oldValue = (UMLLinkRef) this.links.get (key);
         if (oldValue == value && 
             (oldValue != null || this.links.containsKey (key)))
         {
         
            this.links.remove (key);
            if (value != null)
            {
               value.setList (null);
            }
            changed = true;
         
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_LINKS )
   public boolean removeKeyFromLinks (UMLLink key)
   {
      boolean changed = false;

      if (this.links != null)
      {
         changed = this.links.containsKey (key);
         if (changed)
         {
         
            UMLLinkRef tmpValue = (UMLLinkRef) this.links.remove (key);
            if (tmpValue != null)
            {
               tmpValue.setList (null);
            }
         
         }
      }
      return changed;
   }
   @Property( name = PROPERTY_LINKS )
   public UMLLinkRef getFromLinks (UMLLink key)
   {
      return ((this.links == null)
              ? null
              : (UMLLinkRef) this.links.get (key));
   }
   @Property( name = PROPERTY_LINKS )
   public UMLLink getKeyForLinks (UMLLinkRef value)
   {
      return (value == null ? null : value.getRef ());
   }

   @Property( name = PROPERTY_LINKS )
   public void keyChangedInLinks (UMLLink oldKey, UMLLinkRef value)
   {
      if ((this.links != null) &&  
          (oldKey != getKeyForLinks (value)))
      {
         UMLLinkRef oldValue = (UMLLinkRef) this.links.get (oldKey);
         if (oldValue == value)
         {
            this.links.remove (oldKey);
            oldValue = (UMLLinkRef)this.links.put (this.getKeyForLinks (value), value);
            if (oldValue != null)
            {
               oldValue.setList (null);
            }
         }
      }
   }

   public void removeYou()
   {
      this.removeAllFromUMLTextLangInfos ();
      this.removeAllFromItems ();
      this.removeAllFromLinks ();
   }
}


