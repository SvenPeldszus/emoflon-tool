/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.textlang;

import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;
import java.util.StringTokenizer;

import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.fujaba.codegen.rules.ObjectSet;
import de.uni_kassel.fujaba.codegen.rules.UMLObjectRef;
import de.uni_paderborn.fujaba.basic.Utility;
import de.uni_paderborn.fujaba.metamodel.structure.FAttr;
import de.uni_paderborn.fujaba.metamodel.structure.FClass;
import de.uni_paderborn.fujaba.metamodel.structure.FType;
import de.uni_paderborn.fujaba.uml.behavior.UMLAttrExprPair;
import de.uni_paderborn.fujaba.uml.behavior.UMLObject;
import de.uni_paderborn.fujaba.uml.behavior.UMLStoryPattern;
import de.upb.tools.fca.FEmptyIterator;
import de.upb.tools.fca.FEmptyListIterator;
import de.upb.tools.fca.FHashSet; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.fca.FLinkedList;
import de.upb.tools.sdm.JavaSDM; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDMException;


public class UMLTextLangInfo
{


   public void analyseId ()
   {
      boolean fujaba__Success = false;
      FClass ooc = null;
      Iterator fujaba__IterSstoryPatternToOo = null;
      UMLObject oo = null;
      UMLSymTabContext stc = null;
      UMLStoryPattern sstoryPattern = null;
      ObjectSet objSet = null;
      UMLObjectRef or = null;
      Iterator fujaba__IterSocToSo = null;
      Object _TmpObject = null;
      UMLObject so = null;
      FType at = null;
      FAttr attr = null;
      UMLObjectRef sor = null;
      FClass soc = null;
      FClass contClass = null;
      UMLSymTabContext prevStc = null;
      Iterator fujaba__IterThisToStc = null;

      // is it the name of some object of this story pattern?
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // search to-one link objectSet from this to objSet
         objSet = this.getObjectSet ();

         // check object objSet is really bound
         JavaSDM.ensure ( objSet != null );

         // search to-one link subjectStoryPattern from this to sstoryPattern
         sstoryPattern = this.getSubjectStoryPattern ();

         // check object sstoryPattern is really bound
         JavaSDM.ensure ( sstoryPattern != null );

         // search to-one link symTabContexts from this to stc
         stc = this.getLastOfSymTabContexts ();

         // check object stc is really bound
         JavaSDM.ensure ( stc != null );

         // iterate to-many link objects from sstoryPattern to oo
         fujaba__Success = false;
         fujaba__IterSstoryPatternToOo = sstoryPattern.iteratorOfObjects ();

         while ( !(fujaba__Success) && fujaba__IterSstoryPatternToOo.hasNext () )
         {
            try
            {
               oo = (UMLObject) fujaba__IterSstoryPatternToOo.next ();

               // check object oo is really bound
               JavaSDM.ensure ( oo != null );
               // attribute condition objectName == word
               JavaSDM.ensure ( JavaSDM.stringCompare ((String) oo.getObjectName (), word) == 0 );

               // search to-one link instanceOf from oo to ooc
               ooc = oo.getInstanceOf ();

               // check object ooc is really bound
               JavaSDM.ensure ( ooc != null );

               // constraint ! stc.isAfterDot()
               JavaSDM.ensure ( ! stc.isAfterDot() );


               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);



         // create link context from stc to ooc
         stc.setContext (ooc);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         // story pattern 
         try 
         {
            fujaba__Success = false; 

            or = objSet.getOrCreateObjectRef (oo);

            // check object or is really bound
            JavaSDM.ensure ( or != null );
            // create link needs from this to or
            this.addToNeeds (or);

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         return ;

      }
      // is it an direct attr of the subject object?
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // search to-one link symTabContexts from this to stc
         stc = this.getLastOfSymTabContexts ();

         // check object stc is really bound
         JavaSDM.ensure ( stc != null );

         // search to-one link context from stc to soc
         _TmpObject = stc.getContext ();

         // ensure correct type and really bound of object soc
         JavaSDM.ensure ( _TmpObject instanceof FClass );
         soc = (FClass) _TmpObject;


         // search to-one link subjectObject from stc to sor
         sor = stc.getSubjectObject ();

         // check object sor is really bound
         JavaSDM.ensure ( sor != null );

         // search to-one link attrs from soc to attr
         attr = soc.getFromAttrs (word);

         // check object attr is really bound
         JavaSDM.ensure ( attr != null );

         // search to-one link attrType from attr to at
         at = attr.getAttrType ();

         // check object at is really bound
         JavaSDM.ensure ( at != null );

         // iterate to-many link instanceOf from soc to so
         fujaba__Success = false;
         fujaba__IterSocToSo = soc.iteratorOfInstances ();

         while ( !(fujaba__Success) && fujaba__IterSocToSo.hasNext () )
         {
            try
            {
               _TmpObject =  fujaba__IterSocToSo.next ();

               // ensure correct type and really bound of object so
               JavaSDM.ensure ( _TmpObject instanceof UMLObject );
               so = (UMLObject) _TmpObject;

               // check link ref from sor to so
               JavaSDM.ensure (so.equals (sor.getRef ()));

               // constraint ! stc.isAfterDot()
               JavaSDM.ensure ( ! stc.isAfterDot() );

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);





         // assign attribute this
         this.setCopyWordToFullText (false);
         // assign attribute this
         this.setFullText (fullText + so.getObjectName() + ".get" + Utility.upFirstChar (attr.getName ()) + "()");
         // destroy link context from stc to soc
         stc.setContext (null);
         // create link context from stc to at
         stc.setContext (at);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return ;

      }
      // is it an attribute of the previous context?
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // iterate to-many link symTabContexts from this to stc
         fujaba__Success = false;
         fujaba__IterThisToStc = this.iteratorOfSymTabContexts ();

         while ( !(fujaba__Success) && fujaba__IterThisToStc.hasNext () )
         {
            try
            {
               stc = (UMLSymTabContext) fujaba__IterThisToStc.next ();

               // check object stc is really bound
               JavaSDM.ensure ( stc != null );
               // search multilink UMLMultiLink[{next}]
               // search to-one link symTabContexts from this to prevStc
               prevStc = this.getPreviousOfSymTabContexts (stc);

               // check object prevStc is really bound
               JavaSDM.ensure ( prevStc != null );

               // check isomorphic binding between objects stc and prevStc
               JavaSDM.ensure ( !stc.equals (prevStc) );

               // search to-one link context from prevStc to contClass
               _TmpObject = prevStc.getContext ();

               // ensure correct type and really bound of object contClass
               JavaSDM.ensure ( _TmpObject instanceof FClass );
               contClass = (FClass) _TmpObject;


               // search to-one link attrs from contClass to attr
               attr = contClass.getFromAttrs (word);

               // check object attr is really bound
               JavaSDM.ensure ( attr != null );

               // search to-one link attrType from attr to at
               at = attr.getAttrType ();

               // check object at is really bound
               JavaSDM.ensure ( at != null );

               // constraint stc.isAfterDot ()
               JavaSDM.ensure ( stc.isAfterDot () );





               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         // assign attribute this
         this.setCopyWordToFullText (false);
         // assign attribute this
         this.setFullText (fullText + "get" + Utility.upFirstChar (attr.getName ()) + "()");
         // create link context from stc to at
         stc.setContext (at);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   /**
    * <pre>
    *           0..1     attrExpr     0..1
    * UMLTextLangInfo ------------------------> UMLAttrExprPair
    *           uMLTextLangInfo               attrExpr
    * </pre>
    */
   public static final String PROPERTY_ATTR_EXPR = "attrExpr";

   @Property( name = PROPERTY_ATTR_EXPR, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private UMLAttrExprPair attrExpr;

   @Property( name = PROPERTY_ATTR_EXPR )
   public boolean setAttrExpr (UMLAttrExprPair value)
   {
      boolean changed = false;

      if (this.attrExpr != value)
      {
      
         UMLAttrExprPair oldValue = this.attrExpr;
         this.attrExpr = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ATTR_EXPR )
   public UMLTextLangInfo withAttrExpr (UMLAttrExprPair value)
   {
      setAttrExpr (value);
      return this;
   }

   public UMLAttrExprPair getAttrExpr ()
   {
      return this.attrExpr;
   }

   public void computeContext ()
   {
      boolean fujaba__Success = false;
      FClass oc = null;
      UMLObject so = null;
      UMLObjectRef sor = null;
      UMLSymTabContext stc = null;

      // do we have a subject object?
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // search to-one link symTabContexts from this to stc
         stc = this.getLastOfSymTabContexts ();

         // check object stc is really bound
         JavaSDM.ensure ( stc != null );

         // search to-one link subjectObject from stc to sor
         sor = stc.getSubjectObject ();

         // check object sor is really bound
         JavaSDM.ensure ( sor != null );

         // search to-one link ref from sor to so
         so = sor.getRef ();

         // check object so is really bound
         JavaSDM.ensure ( so != null );

         // search to-one link instanceOf from so to oc
         oc = so.getInstanceOf ();

         // check object oc is really bound
         JavaSDM.ensure ( oc != null );

         // constraint ! stc.isAfterDot()
         JavaSDM.ensure ( ! stc.isAfterDot() );




         // create link context from stc to oc
         stc.setContext (oc);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   public static final String PROPERTY_COPY_WORD_TO_FULL_TEXT = "copyWordToFullText";

   @Property( name = PROPERTY_COPY_WORD_TO_FULL_TEXT, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private boolean copyWordToFullText = true;

   @Property( name = PROPERTY_COPY_WORD_TO_FULL_TEXT )
   public void setCopyWordToFullText (boolean value)
   {
      this.copyWordToFullText = value;
   }

   public UMLTextLangInfo withCopyWordToFullText (boolean value)
   {
      setCopyWordToFullText (value);
      return this;
   }

   @Property( name = PROPERTY_COPY_WORD_TO_FULL_TEXT )
   public boolean isCopyWordToFullText ()
   {
      return this.copyWordToFullText;
   }

   public static final String PROPERTY_DELIMITERS = "delimiters";

   @Property( name = PROPERTY_DELIMITERS, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String delimiters = ".()[]{}=<>!%&?^~|+-*/\\\"\':;, \t\n";

   @Property( name = PROPERTY_DELIMITERS )
   public void setDelimiters (String value)
   {
      this.delimiters = value;
   }

   public UMLTextLangInfo withDelimiters (String value)
   {
      setDelimiters (value);
      return this;
   }

   @Property( name = PROPERTY_DELIMITERS )
   public String getDelimiters ()
   {
      return this.delimiters;
   }

   public static final String PROPERTY_FULL_TEXT = "fullText";

   @Property( name = PROPERTY_FULL_TEXT, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String fullText = "";

   @Property( name = PROPERTY_FULL_TEXT )
   public void setFullText (String value)
   {
      this.fullText = value;
   }

   public UMLTextLangInfo withFullText (String value)
   {
      setFullText (value);
      return this;
   }

   @Property( name = PROPERTY_FULL_TEXT )
   public String getFullText ()
   {
      return this.fullText;
   }

   public boolean isName (String word )
   {
      boolean fujaba__Success = false;

      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // constraint ! " if else while for new return null true false ".matches(".* " + word + " .*")
         JavaSDM.ensure ( ! " if else while for new return null true false ".matches(".* " + word + " .*") );
         // constraint ! word.startsWith("\"")
         JavaSDM.ensure ( ! word.startsWith("\"") );
         // constraint delimiters.indexOf(word) < 0
         JavaSDM.ensure ( delimiters.indexOf(word) < 0 );
         // constraint word.matches ("^[a-zA-Z].*")
         JavaSDM.ensure ( word.matches ("^[a-zA-Z].*") );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return true;

      }
      return false;
   }

   public static final String PROPERTY_LONG_WORD = "longWord";

   @Property( name = PROPERTY_LONG_WORD, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String longWord;

   @Property( name = PROPERTY_LONG_WORD )
   public void setLongWord (String value)
   {
      this.longWord = value;
   }

   public UMLTextLangInfo withLongWord (String value)
   {
      setLongWord (value);
      return this;
   }

   @Property( name = PROPERTY_LONG_WORD )
   public String getLongWord ()
   {
      return this.longWord;
   }

   /**
    * <pre>
    *           0..n     needs     0..n
    * UMLTextLangInfo ------------------------- UMLObjectRef
    *           usedByTextLangInfo               needs
    * </pre>
    */
   public static final String PROPERTY_NEEDS = "needs";

   @Property( name = PROPERTY_NEEDS, partner = UMLObjectRef.PROPERTY_USED_BY_TEXT_LANG_INFO, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashSet<UMLObjectRef> needs;

   @Property( name = PROPERTY_NEEDS )
   public Set<? extends UMLObjectRef> getNeeds()
   {
      return ((this.needs == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.needs));
   }

   @Property( name = PROPERTY_NEEDS )
   public boolean addToNeeds (UMLObjectRef value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.needs == null)
         {
            this.needs = new FHashSet<UMLObjectRef> ();

         }
      
         changed = this.needs.add (value);
         if (changed)
         {
            value.addToUsedByTextLangInfo (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_NEEDS )
   public UMLTextLangInfo withNeeds (UMLObjectRef value)
   {
      addToNeeds (value);
      return this;
   }

   public UMLTextLangInfo withoutNeeds (UMLObjectRef value)
   {
      removeFromNeeds (value);
      return this;
   }


   public boolean removeFromNeeds (UMLObjectRef value)
   {
      boolean changed = false;

      if ((this.needs != null) && (value != null))
      {
      
         changed = this.needs.remove (value);
         if (changed)
         {
            value.removeFromUsedByTextLangInfo (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_NEEDS )
   public void removeAllFromNeeds (){
   
      UMLObjectRef tmpValue;
      Iterator<? extends UMLObjectRef> iter = this.iteratorOfNeeds ();
      while (iter.hasNext ())
      {
         tmpValue = (UMLObjectRef) iter.next ();
         this.removeFromNeeds (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_NEEDS )
   public boolean hasInNeeds (UMLObjectRef value)
   {
      return ((this.needs != null) &&
              (value != null) &&
              this.needs.contains (value));
   }

   @Property( name = PROPERTY_NEEDS )
   public Iterator<? extends UMLObjectRef> iteratorOfNeeds ()
   {
      return ((this.needs == null)
              ? FEmptyIterator.<UMLObjectRef>get ()
              : this.needs.iterator ());
   }

   @Property( name = PROPERTY_NEEDS )
   public int sizeOfNeeds ()
   {
      return ((this.needs == null)
              ? 0
              : this.needs.size ());
   }

   private void nextToken ()
   {
      boolean fujaba__Success = false;
      StringTokenizer tokens = null;
      boolean done = false;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // attribute condition copyWordToFullText == true
         JavaSDM.ensure ( this.isCopyWordToFullText () == true );

         // attribute condition word != null
         JavaSDM.ensure ( JavaSDM.stringCompare ((String) this.getWord (), null) != 0 );

         // assign attribute this
         this.setFullText (fullText  + word);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // assign attribute this
         this.setCopyWordToFullText (true);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // search to-one link tokens from this to tokens
         tokens = this.getTokens ();

         // check object tokens is really bound
         JavaSDM.ensure ( tokens != null );


         // collabStat call
         done = false;
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      while ( ! done )
      {
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // check object tokens is really bound
            JavaSDM.ensure ( tokens != null );
            // check link tokens from this to tokens
            JavaSDM.ensure (tokens.equals (this.getTokens ()));

            // constraint tokens.hasMoreTokens()
            JavaSDM.ensure ( tokens.hasMoreTokens() );
            // assign attribute this
            this.setWord (tokens.nextToken ().trim());
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         if ( fujaba__Success )
         {
            // start of a string constant?
            // story pattern Successor of storypatternwiththis
            try 
            {
               fujaba__Success = false; 

               // attribute condition word == "\""
               JavaSDM.ensure ( JavaSDM.stringCompare ((String) this.getWord (), "\"") == 0 );

               // collabStat call
               readStringConstant();
               // collabStat call
               longWord = word;
               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }

            // story pattern 
            try 
            {
               fujaba__Success = false; 

               // attribute condition word != ""
               JavaSDM.ensure ( JavaSDM.stringCompare ((String) this.getWord (), "") != 0 );

               // collabStat call
               done = true;
               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }


         }
         else
         {
            // story pattern storypatternwiththis
            try 
            {
               fujaba__Success = false; 

               // assign attribute this
               this.setWord (null);
               // collabStat call
               done = true;
               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }


         }

      }
      return ;
   }

   /**
    * <pre>
    *           0..n     objectSet     0..1
    * UMLTextLangInfo ------------------------- ObjectSet
    *           UMLTextLangInfos               objectSet
    * </pre>
    */
   public static final String PROPERTY_OBJECT_SET = "objectSet";

   @Property( name = PROPERTY_OBJECT_SET, partner = ObjectSet.PROPERTY_UML_TEXT_LANG_INFOS, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private ObjectSet objectSet;

   @Property( name = PROPERTY_OBJECT_SET )
   public boolean setObjectSet (ObjectSet value)
   {
      boolean changed = false;

      if (this.objectSet != value)
      {
      
         ObjectSet oldValue = this.objectSet;
         UMLTextLangInfo source = this;
         if (this.objectSet != null)
         {
            this.objectSet = null;
            oldValue.removeFromUMLTextLangInfos (this);
         }
         this.objectSet = value;

         if (value != null)
         {
            value.addToUMLTextLangInfos (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_OBJECT_SET )
   public UMLTextLangInfo withObjectSet (ObjectSet value)
   {
      setObjectSet (value);
      return this;
   }

   public ObjectSet getObjectSet ()
   {
      return this.objectSet;
   }

   public void parseBracketExpr (String openBracket , String closeBracket )
   {
      boolean fujaba__Success = false;
      int pos = 0;
      String closer = null;

      // opening bracket?
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // constraint openBracket == null
         JavaSDM.ensure ( openBracket == null );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         // Skip opening bracket
         // story pattern Successor of storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // attribute condition word == openBracket
            JavaSDM.ensure ( JavaSDM.stringCompare ((String) this.getWord (), openBracket) == 0 );

            // collabStat call
            this.nextToken();
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }


      }
      while( true )
      {
         // until closing bracket is found
         // story pattern Successor of storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // attribute condition word != closeBracket
            JavaSDM.ensure ( JavaSDM.stringCompare ((String) this.getWord (), closeBracket) != 0 );

            // attribute condition word != null
            JavaSDM.ensure ( JavaSDM.stringCompare ((String) this.getWord (), null) != 0 );

            // collabStat call
            pos = "{[(".indexOf (word);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }



      	// loop termination check 
      	if ( !( fujaba__Success ) )
      	{
      		break;
      	}
	
         // new bracket expr starts
         // story pattern Successor of Successor of storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // constraint pos >= 0
            JavaSDM.ensure ( pos >= 0 );
            // collabStat call
            closer = "}])".substring (pos, 1);
            // collabStat call
            this.parseBracketExpr (word, closer);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         if ( !( fujaba__Success ) )
         {
            // an identifier?
            // story pattern storypatternwiththis
            try 
            {
               fujaba__Success = false; 

               // constraint isName (word)
               JavaSDM.ensure ( isName (word) );
               // collabStat call
               this.computeContext ();
               // collabStat call
               this.parseNameExpr();
               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }

            if ( !( fujaba__Success ) )
            {
               // skip operator
               // story pattern 
               try 
               {
                  fujaba__Success = false; 

                  // collabStat call
                  this.nextToken ();
                  fujaba__Success = true;
               }
               catch ( JavaSDMException fujaba__InternalException )
               {
                  fujaba__Success = false;
               }


            }

         }

      }
      // skip closing bracket
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // attribute condition word != null
         JavaSDM.ensure ( JavaSDM.stringCompare ((String) this.getWord (), null) != 0 );

         // collabStat call
         this.nextToken();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   public void parseNameExpr ()
   {
      boolean fujaba__Success = false;
      String closer = null;
      UMLSymTabContext stc = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // constraint isName (word)
         JavaSDM.ensure ( isName (word) );
         // collabStat call
         this.analyseId ();
         // collabStat call
         this.nextToken();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return ;

      }
      if ( !( word != null ) )
      {
         return ;

      }
      int  pos = "[(".indexOf(word);
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // constraint pos >= 0
         JavaSDM.ensure ( pos >= 0 );
         // collabStat call
         this.parseBracketExpr(word, closer);
         // collabStat call
         closer = "])".substring (pos, 1);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // attribute condition word == "."
         JavaSDM.ensure ( JavaSDM.stringCompare ((String) this.getWord (), ".") == 0 );

         // create object stc
         stc = new UMLSymTabContext ( );

         // assign attribute stc
         stc.setAfterDot (true);
         // create link symTabContexts from stc to this
         stc.setTextLangInfo (this);

         // collabStat call
         this.nextToken();
         // collabStat call
         this.parseNameExpr ();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         // story pattern Successor of storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // check object stc is really bound
            JavaSDM.ensure ( stc != null );
            // delete object stc
            stc.removeYou ();

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }


      }
      return ;
   }

   public void parse ()
   {
      boolean fujaba__Success = false;
      ObjectSet objSet = null;
      Iterator fujaba__IterSoToStoryPattern = null;
      Object _TmpObject = null;
      UMLStoryPattern storyPattern = null;
      UMLObject so = null;
      UMLAttrExprPair attrExprPair = null;
      UMLObjectRef subjectObjRef = null;
      UMLSymTabContext stc = null;
      StringTokenizer tokens = null;

      // Ensure ObjectSet
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // negative check for link objectSet from this
         JavaSDM.ensure (this.getObjectSet () == null);
         // create object objSet
         objSet = new ObjectSet ( );

         // create link objectSet from objSet to this
         objSet.addToUMLTextLangInfos (this);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // Is it an attrExprPair
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // search to-one link objectSet from this to objSet
         objSet = this.getObjectSet ();

         // check object objSet is really bound
         JavaSDM.ensure ( objSet != null );


         // search to-one link attrExpr from this to attrExprPair
         attrExprPair = this.getAttrExpr ();

         // check object attrExprPair is really bound
         JavaSDM.ensure ( attrExprPair != null );

         // search to-one link attrExprPairs from attrExprPair to so
         so = attrExprPair.getRevAttrs ();

         // check object so is really bound
         JavaSDM.ensure ( so != null );

         // iterate to-many link elements from so to storyPattern
         fujaba__Success = false;
         fujaba__IterSoToStoryPattern = so.iteratorOfDiagrams ();

         while ( !(fujaba__Success) && fujaba__IterSoToStoryPattern.hasNext () )
         {
            try
            {
               _TmpObject =  fujaba__IterSoToStoryPattern.next ();

               // ensure correct type and really bound of object storyPattern
               JavaSDM.ensure ( _TmpObject instanceof UMLStoryPattern );
               storyPattern = (UMLStoryPattern) _TmpObject;


               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);


         // create link subjectStoryPattern from this to storyPattern
         this.setSubjectStoryPattern (storyPattern);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            subjectObjRef = objSet.getOrCreateObjectRef(so);

            // check object subjectObjRef is really bound
            JavaSDM.ensure ( subjectObjRef != null );
            // create object stc
            stc = new UMLSymTabContext ( );

            // assign attribute this
            this.setText (attrExprPair.getExpression());
            // create link subjectObject from subjectObjRef to stc
            subjectObjRef.addToSymTabContexts (stc);

            // create link symTabContexts from this to stc
            this.addToSymTabContexts (stc);

            // create link needs from subjectObjRef to this
            subjectObjRef.addToUsedByTextLangInfo (this);

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }


      }
      // Prepare the scanner
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         tokens = new StringTokenizer (text, delimiters, true);

         // check object tokens is really bound
         JavaSDM.ensure ( tokens != null );
         // create link tokens from this to tokens
         this.setTokens (tokens);

         // collabStat call
         this.nextToken();
         // collabStat call
         this.parseBracketExpr(null, null);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   public void readStringConstant ()
   {
      boolean fujaba__Success = false;

      do
      {
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // constraint tokens.hasMoreTokens()
            JavaSDM.ensure ( tokens.hasMoreTokens() );
            // assign attribute this
            this.setWord (tokens.nextToken());
            // collabStat call
            longWord = longWord + word;
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         // in case of a \ ignore next token
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // attribute condition word == "\\"
            JavaSDM.ensure ( JavaSDM.stringCompare ((String) this.getWord (), "\\") == 0 );

            // constraint tokens.hasMoreTokens()
            JavaSDM.ensure ( tokens.hasMoreTokens() );
            // assign attribute this
            this.setWord (tokens.nextToken());
            // collabStat call
            longWord = longWord + word;
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         if ( fujaba__Success )
         {
            // story pattern storypatternwiththis
            try 
            {
               fujaba__Success = false; 

               // constraint tokens.hasMoreTokens()
               JavaSDM.ensure ( tokens.hasMoreTokens() );
               // assign attribute this
               this.setWord (tokens.nextToken());
               // collabStat call
               longWord = longWord + word;
               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }


         }
         // end of string?
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // attribute condition word == "\""
            JavaSDM.ensure ( JavaSDM.stringCompare ((String) this.getWord (), "\"") == 0 );

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }


      }
      while ( !( fujaba__Success ) );// story pattern 
      try 
      {
         fujaba__Success = false; 

         // assign attribute this
         this.setWord (longWord);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   /**
    * <pre>
    *           0..n     subjectStoryPattern     0..1
    * UMLTextLangInfo ------------------------> UMLStoryPattern
    *           UMLTextLangInfos               subjectStoryPattern
    * </pre>
    */
   public static final String PROPERTY_SUBJECT_STORY_PATTERN = "subjectStoryPattern";

   @Property( name = PROPERTY_SUBJECT_STORY_PATTERN, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private UMLStoryPattern subjectStoryPattern;

   @Property( name = PROPERTY_SUBJECT_STORY_PATTERN )
   public boolean setSubjectStoryPattern (UMLStoryPattern value)
   {
      boolean changed = false;

      if (this.subjectStoryPattern != value)
      {
      
         UMLStoryPattern oldValue = this.subjectStoryPattern;
         this.subjectStoryPattern = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_SUBJECT_STORY_PATTERN )
   public UMLTextLangInfo withSubjectStoryPattern (UMLStoryPattern value)
   {
      setSubjectStoryPattern (value);
      return this;
   }

   public UMLStoryPattern getSubjectStoryPattern ()
   {
      return this.subjectStoryPattern;
   }

   /**
    * <pre>
    *           0..1     symTabContexts     0..n
    * UMLTextLangInfo ------------------------- UMLSymTabContext
    *           textLangInfo               symTabContexts
    * </pre>
    */
   public static final String PROPERTY_SYM_TAB_CONTEXTS = "symTabContexts";

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS, partner = UMLSymTabContext.PROPERTY_TEXT_LANG_INFO, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FLinkedList<UMLSymTabContext> symTabContexts;

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public List<? extends UMLSymTabContext> getSymTabContexts()
   {
      return ((this.symTabContexts == null)
              ? Collections.EMPTY_LIST
              : Collections.unmodifiableList(this.symTabContexts));
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public boolean addToSymTabContexts (UMLSymTabContext value)
   {
      boolean changed = false;

      if (value != null && !this.hasInSymTabContexts (value))
      {
         if (this.symTabContexts == null)
         {
            this.symTabContexts = new FLinkedList<UMLSymTabContext> ();

         }
      
         changed = this.symTabContexts.add (value);
         if (changed)
         {
            value.setTextLangInfo (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public UMLTextLangInfo withSymTabContexts (UMLSymTabContext value)
   {
      addToSymTabContexts (value);
      return this;
   }

   public UMLTextLangInfo withoutSymTabContexts (UMLSymTabContext value)
   {
      removeFromSymTabContexts (value);
      return this;
   }


   public boolean removeFromSymTabContexts (UMLSymTabContext value)
   {
      boolean changed = false;

      if ((this.symTabContexts != null) && (value != null))
      {
      
         changed = this.symTabContexts.remove (value);
         if (changed)
         {
            value.setTextLangInfo (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public void removeAllFromSymTabContexts (){
   
      UMLSymTabContext tmpValue;
      Iterator<? extends UMLSymTabContext> iter = this.iteratorOfSymTabContexts ();
      while (iter.hasNext ())
      {
         tmpValue = (UMLSymTabContext) iter.next ();
         this.removeFromSymTabContexts (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public boolean hasInSymTabContexts (UMLSymTabContext value)
   {
      return ((this.symTabContexts != null) &&
              (value != null) &&
              this.symTabContexts.contains (value));
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public ListIterator<? extends UMLSymTabContext> iteratorOfSymTabContexts ()
   {
      return ((this.symTabContexts == null)
              ? FEmptyListIterator.<UMLSymTabContext>get ()
              : this.symTabContexts.listIterator());
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public int sizeOfSymTabContexts ()
   {
      return ((this.symTabContexts == null)
              ? 0
              : this.symTabContexts.size ());
   }
   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public UMLSymTabContext getFirstOfSymTabContexts ()
   {
      if (symTabContexts == null)
      {
         return null;
      }
      else
      {
         if (symTabContexts.size() == 0) 	 
         { 	 
            return null; 	 
         }
         return (UMLSymTabContext) symTabContexts.getFirst ();
      }
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public UMLSymTabContext getLastOfSymTabContexts ()
   {
      if (symTabContexts == null)
      {
         return null;
      }
      else
      {
         if (symTabContexts.size() == 0) 	 
         { 	 
            return null; 	 
         }
         return (UMLSymTabContext) symTabContexts.getLast ();
      }
   }
   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public UMLSymTabContext getFromSymTabContexts ( int index )
   {
      if (index >= 0 && index < sizeOfSymTabContexts ())
      {
         return (UMLSymTabContext) this.symTabContexts.get (index);
      }
      else
      {
         throw new IllegalArgumentException ("getSymTabContextsAt(" + index + ")" );
      }
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public int indexOfSymTabContexts ( UMLSymTabContext value )
   {
      return ((this.symTabContexts == null)
              ? -1
              : this.symTabContexts.indexOf (value));
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public int indexOfSymTabContexts ( UMLSymTabContext value, int index )
   {
      return ((this.symTabContexts == null)
   	       ? -1
   	       : this.symTabContexts.indexOf (value, index));
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public int lastIndexOfSymTabContexts ( UMLSymTabContext value )
   {
      return ((this.symTabContexts == null)
               ? -1
               : this.symTabContexts.lastIndexOf (value));
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public int lastIndexOfSymTabContexts ( UMLSymTabContext value, int index )
   {
      return ((this.symTabContexts == null)
               ? -1
               : this.symTabContexts.lastIndexOf (value, index));
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public boolean isBeforeOfSymTabContexts ( UMLSymTabContext leftObject, UMLSymTabContext rightObject)
   {
      if (symTabContexts == null)
      {
         return false;
      }
      else
      {
         return symTabContexts.isBefore (leftObject, rightObject);
      }
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public boolean isAfterOfSymTabContexts ( UMLSymTabContext leftObject, UMLSymTabContext rightObject)
   {
      if (symTabContexts == null)
      {
         return false;
      }
      else
      {
         return symTabContexts.isAfter (leftObject, rightObject);
      }
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public UMLSymTabContext getNextOfSymTabContexts ( UMLSymTabContext object )
   {
      if (symTabContexts == null)
      {
         return null;
      }
      else
      {
         return (UMLSymTabContext) symTabContexts.getNextOf (object);
      }
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public UMLSymTabContext getNextOfSymTabContexts ( UMLSymTabContext object, int index)
   {
      if (symTabContexts == null)
      {
         return null;
      }
      else
      {
         return (UMLSymTabContext) symTabContexts.getNextOf (object, index);
      }
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public UMLSymTabContext getPreviousOfSymTabContexts ( UMLSymTabContext object)
   {
      if (symTabContexts == null)
      {
         return null;
      }
      else
      {
         return (UMLSymTabContext) symTabContexts.getPreviousOf (object);
      }
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public UMLSymTabContext getPreviousOfSymTabContexts ( UMLSymTabContext object, int index )
   {
      if (symTabContexts == null)
      {
         return null;
      }
      else
      {
         return (UMLSymTabContext) symTabContexts.getPreviousOf (object, index);
      }
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public boolean addAfterOfSymTabContexts ( UMLSymTabContext refObject, UMLSymTabContext value)
   {
      boolean changed = false;
      if (symTabContexts != null)
      {
         int index = symTabContexts.indexOf (refObject);
         changed = addToSymTabContexts (index+1, value);
      }
      return changed;
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public boolean addBeforeOfSymTabContexts ( UMLSymTabContext refObject, UMLSymTabContext value)
   {
      boolean changed = false;
      if (symTabContexts != null)
      {
         int index = symTabContexts.indexOf (refObject);
         changed = addToSymTabContexts (index, value);
      }
      return changed;
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public boolean addToSymTabContexts (int index, UMLSymTabContext value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.symTabContexts == null)
         {
            this.symTabContexts = new FLinkedList<UMLSymTabContext> (); // or FTreeSet () or FLinkedList ()
         }
         int oldIndex = this.indexOfSymTabContexts (value);
         if (oldIndex != index)
         {
            try
            {
            
               if (oldIndex > -1)
               {
                  symTabContexts.remove (oldIndex);
               }
               symTabContexts.add (index, value);
               if (oldIndex < 0)
               {
                  value.setTextLangInfo (this);
               }
               changed = true;
            
            }
            catch (IndexOutOfBoundsException ex)
            {
               return false;
            }
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public boolean setInSymTabContexts (int index, UMLSymTabContext value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.symTabContexts == null)
         {
            this.symTabContexts = new FLinkedList<UMLSymTabContext> (); // or FTreeSet () or FLinkedList ()
         }
         int oldIndex = this.indexOfSymTabContexts (value);
         if (oldIndex != index)
         {
            try
            {
            
               UMLSymTabContext oldValue = (UMLSymTabContext)this.symTabContexts.set (index, value);
               if (oldIndex > -1)
               {
                  this.symTabContexts.remove (oldIndex);
               }
               if (oldValue != value)
               {
                  if (oldValue != null)
                  {
                     oldValue.setTextLangInfo (null);
                  }
                  if (oldIndex < 0)
                  {
                     value.setTextLangInfo (this);
                  }
                  changed = true;
               }
            
            }
            catch (IndexOutOfBoundsException ex)
            {
               return false;
            }
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public boolean removeFromSymTabContexts (int index)
   {
      boolean changed = false;

      if (this.symTabContexts != null && (index >= 0 && index < this.symTabContexts.size ()))
      {
      
         UMLSymTabContext tmpValue = (UMLSymTabContext) this.symTabContexts.remove (index);
         if (tmpValue != null)
         {
            tmpValue.setTextLangInfo (null);
            changed = true;
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public boolean removeFromSymTabContexts (int index, UMLSymTabContext value)
   {
      boolean changed = false;

      if ((this.symTabContexts != null) && (value != null) && 
          (index >= 0 && index < this.symTabContexts.size ()))
      {
         UMLSymTabContext oldValue = (UMLSymTabContext) this.symTabContexts.get (index);
         if (oldValue == value)
         {
         
            changed = this.removeFromSymTabContexts (index);
         
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public ListIterator<? extends UMLSymTabContext> iteratorOfSymTabContexts ( UMLSymTabContext  lowerBound )
   {
      ListIterator<UMLSymTabContext> result = FEmptyListIterator.<UMLSymTabContext>get ();

      if (symTabContexts != null && lowerBound != null)
      {
         int index = symTabContexts.indexOf (lowerBound) + 1;
         result = symTabContexts.listIterator (index);
      }
      else if (symTabContexts != null && lowerBound == null)
      {
         result = symTabContexts.listIterator (0);
      }

      return result;
   }

   @Property( name = PROPERTY_SYM_TAB_CONTEXTS )
   public ListIterator<? extends UMLSymTabContext> iteratorOfSymTabContexts (int index)
   {
      return ((this.symTabContexts == null)
              ? FEmptyListIterator.<UMLSymTabContext>get ()
              : this.symTabContexts.listIterator (Math.max(0,Math.min(index,this.symTabContexts.size ()))));
   }

   public static final String PROPERTY_TEXT = "text";

   @Property( name = PROPERTY_TEXT, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String text;

   @Property( name = PROPERTY_TEXT )
   public void setText (String value)
   {
      this.text = value;
   }

   public UMLTextLangInfo withText (String value)
   {
      setText (value);
      return this;
   }

   @Property( name = PROPERTY_TEXT )
   public String getText ()
   {
      return this.text;
   }

   /**
    * <pre>
    *           0..1     tokens     0..1
    * UMLTextLangInfo ------------------------> StringTokenizer
    *           uMLTextLangInfo               tokens
    * </pre>
    */
   public static final String PROPERTY_TOKENS = "tokens";

   @Property( name = PROPERTY_TOKENS, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private StringTokenizer tokens;

   @Property( name = PROPERTY_TOKENS )
   public boolean setTokens (StringTokenizer value)
   {
      boolean changed = false;

      if (this.tokens != value)
      {
      
         StringTokenizer oldValue = this.tokens;
         this.tokens = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TOKENS )
   public UMLTextLangInfo withTokens (StringTokenizer value)
   {
      setTokens (value);
      return this;
   }

   public StringTokenizer getTokens ()
   {
      return this.tokens;
   }

   public static final String PROPERTY_WORD = "word";

   @Property( name = PROPERTY_WORD, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String word = "";

   @Property( name = PROPERTY_WORD )
   public void setWord (String value)
   {
      this.word = value;
   }

   public UMLTextLangInfo withWord (String value)
   {
      setWord (value);
      return this;
   }

   @Property( name = PROPERTY_WORD )
   public String getWord ()
   {
      return this.word;
   }

   public void removeYou()
   {
      this.setAttrExpr (null);
      this.removeAllFromNeeds ();
      this.setObjectSet (null);
      this.setSubjectStoryPattern (null);
      this.removeAllFromSymTabContexts ();
      this.setTokens (null);
   }
}


