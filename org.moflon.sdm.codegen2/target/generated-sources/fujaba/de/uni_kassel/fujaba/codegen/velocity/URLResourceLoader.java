/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.velocity;
import java.io.File;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;

import org.apache.commons.collections.ExtendedProperties;
import org.apache.velocity.exception.ResourceNotFoundException;
import org.apache.velocity.runtime.resource.Resource;
import org.apache.velocity.runtime.resource.loader.ResourceLoader;

import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.fujaba.codegen.engine.TemplateLoader;
import de.upb.tools.fca.FEmptyListIterator;
import de.upb.tools.fca.FLinkedList; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDM;
import de.upb.tools.sdm.JavaSDMException; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public class URLResourceLoader extends ResourceLoader
{


   /**
    * <pre>
    *           0..1     contexts     0..n
    * URLResourceLoader ------------------------> URL
    *           uRLResourceLoader               context
    * </pre>
    */
   public static final String PROPERTY_CONTEXT = "context";

   @Property( name = PROPERTY_CONTEXT, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FLinkedList<URL> context;

   @Property( name = PROPERTY_CONTEXT )
   public List<? extends URL> getContext()
   {
      return ((this.context == null)
              ? Collections.EMPTY_LIST
              : Collections.unmodifiableList(this.context));
   }

   @Property( name = PROPERTY_CONTEXT )
   public boolean addToContext (URL value)
   {
      boolean changed = false;

      if (value != null && !this.hasInContext (value))
      {
         if (this.context == null)
         {
            this.context = new FLinkedList<URL> ();

         }
      
         changed = this.context.add (value);
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CONTEXT )
   public URLResourceLoader withContext (URL value)
   {
      addToContext (value);
      return this;
   }

   public URLResourceLoader withoutContext (URL value)
   {
      removeFromContext (value);
      return this;
   }


   public boolean removeFromContext (URL value)
   {
      boolean changed = false;

      if ((this.context != null) && (value != null))
      {
      
         changed = this.context.remove (value);
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CONTEXT )
   public void removeAllFromContext (){
      if (this.context != null && this.context.size () > 0)
      {
      
         this.context.clear();
      
      }
   }

   @Property( name = PROPERTY_CONTEXT )
   public boolean hasInContext (URL value)
   {
      return ((this.context != null) &&
              (value != null) &&
              this.context.contains (value));
   }

   @Property( name = PROPERTY_CONTEXT )
   public ListIterator<? extends URL> iteratorOfContext ()
   {
      return ((this.context == null)
              ? FEmptyListIterator.<URL>get ()
              : this.context.listIterator());
   }

   @Property( name = PROPERTY_CONTEXT )
   public int sizeOfContext ()
   {
      return ((this.context == null)
              ? 0
              : this.context.size ());
   }
   @Property( name = PROPERTY_CONTEXT )
   public URL getFirstOfContext ()
   {
      if (context == null)
      {
         return null;
      }
      else
      {
         if (context.size() == 0) 	 
         { 	 
            return null; 	 
         }
         return (URL) context.getFirst ();
      }
   }

   @Property( name = PROPERTY_CONTEXT )
   public URL getLastOfContext ()
   {
      if (context == null)
      {
         return null;
      }
      else
      {
         if (context.size() == 0) 	 
         { 	 
            return null; 	 
         }
         return (URL) context.getLast ();
      }
   }
   @Property( name = PROPERTY_CONTEXT )
   public URL getFromContext ( int index )
   {
      if (index >= 0 && index < sizeOfContext ())
      {
         return (URL) this.context.get (index);
      }
      else
      {
         throw new IllegalArgumentException ("getContextAt(" + index + ")" );
      }
   }

   @Property( name = PROPERTY_CONTEXT )
   public int indexOfContext ( URL value )
   {
      return ((this.context == null)
              ? -1
              : this.context.indexOf (value));
   }

   @Property( name = PROPERTY_CONTEXT )
   public int indexOfContext ( URL value, int index )
   {
      return ((this.context == null)
   	       ? -1
   	       : this.context.indexOf (value, index));
   }

   @Property( name = PROPERTY_CONTEXT )
   public int lastIndexOfContext ( URL value )
   {
      return ((this.context == null)
               ? -1
               : this.context.lastIndexOf (value));
   }

   @Property( name = PROPERTY_CONTEXT )
   public int lastIndexOfContext ( URL value, int index )
   {
      return ((this.context == null)
               ? -1
               : this.context.lastIndexOf (value, index));
   }

   @Property( name = PROPERTY_CONTEXT )
   public boolean isBeforeOfContext ( URL leftObject, URL rightObject)
   {
      if (context == null)
      {
         return false;
      }
      else
      {
         return context.isBefore (leftObject, rightObject);
      }
   }

   @Property( name = PROPERTY_CONTEXT )
   public boolean isAfterOfContext ( URL leftObject, URL rightObject)
   {
      if (context == null)
      {
         return false;
      }
      else
      {
         return context.isAfter (leftObject, rightObject);
      }
   }

   @Property( name = PROPERTY_CONTEXT )
   public URL getNextOfContext ( URL object )
   {
      if (context == null)
      {
         return null;
      }
      else
      {
         return (URL) context.getNextOf (object);
      }
   }

   @Property( name = PROPERTY_CONTEXT )
   public URL getNextOfContext ( URL object, int index)
   {
      if (context == null)
      {
         return null;
      }
      else
      {
         return (URL) context.getNextOf (object, index);
      }
   }

   @Property( name = PROPERTY_CONTEXT )
   public URL getPreviousOfContext ( URL object)
   {
      if (context == null)
      {
         return null;
      }
      else
      {
         return (URL) context.getPreviousOf (object);
      }
   }

   @Property( name = PROPERTY_CONTEXT )
   public URL getPreviousOfContext ( URL object, int index )
   {
      if (context == null)
      {
         return null;
      }
      else
      {
         return (URL) context.getPreviousOf (object, index);
      }
   }

   @Property( name = PROPERTY_CONTEXT )
   public boolean addAfterOfContext ( URL refObject, URL value)
   {
      boolean changed = false;
      if (context != null)
      {
         int index = context.indexOf (refObject);
         changed = addToContext (index+1, value);
      }
      return changed;
   }

   @Property( name = PROPERTY_CONTEXT )
   public boolean addBeforeOfContext ( URL refObject, URL value)
   {
      boolean changed = false;
      if (context != null)
      {
         int index = context.indexOf (refObject);
         changed = addToContext (index, value);
      }
      return changed;
   }

   @Property( name = PROPERTY_CONTEXT )
   public boolean addToContext (int index, URL value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.context == null)
         {
            this.context = new FLinkedList<URL> (); // or FTreeSet () or FLinkedList ()
         }
         int oldIndex = this.indexOfContext (value);
         if (oldIndex != index)
         {
            try
            {
            
               if (oldIndex > -1)
               {
                  context.remove (oldIndex);
               }
               context.add (index, value);
               changed = true;
            
            }
            catch (IndexOutOfBoundsException ex)
            {
               return false;
            }
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_CONTEXT )
   public boolean setInContext (int index, URL value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.context == null)
         {
            this.context = new FLinkedList<URL> (); // or FTreeSet () or FLinkedList ()
         }
         int oldIndex = this.indexOfContext (value);
         if (oldIndex != index)
         {
            try
            {
            
               URL oldValue = (URL)this.context.set (index, value);
               if (oldIndex > -1)
               {
                  this.context.remove (oldIndex);
               }
               if (oldValue != value)
               {
                  changed = true;
               }
            
            }
            catch (IndexOutOfBoundsException ex)
            {
               return false;
            }
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_CONTEXT )
   public boolean removeFromContext (int index)
   {
      boolean changed = false;

      if (this.context != null && (index >= 0 && index < this.context.size ()))
      {
      
         URL tmpValue = (URL) this.context.remove (index);
         if (tmpValue != null)
         {
            changed = true;
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CONTEXT )
   public boolean removeFromContext (int index, URL value)
   {
      boolean changed = false;

      if ((this.context != null) && (value != null) && 
          (index >= 0 && index < this.context.size ()))
      {
         URL oldValue = (URL) this.context.get (index);
         if (oldValue == value)
         {
         
            changed = this.removeFromContext (index);
         
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_CONTEXT )
   public ListIterator<? extends URL> iteratorOfContext ( URL  lowerBound )
   {
      ListIterator<URL> result = FEmptyListIterator.<URL>get ();

      if (context != null && lowerBound != null)
      {
         int index = context.indexOf (lowerBound) + 1;
         result = context.listIterator (index);
      }
      else if (context != null && lowerBound == null)
      {
         result = context.listIterator (0);
      }

      return result;
   }

   @Property( name = PROPERTY_CONTEXT )
   public ListIterator<? extends URL> iteratorOfContext (int index)
   {
      return ((this.context == null)
              ? FEmptyListIterator.<URL>get ()
              : this.context.listIterator (Math.max(0,Math.min(index,this.context.size ()))));
   }

   public long getLastModified (Resource resource )
   {
      boolean fujaba__Success = false;
      String name = null;
      URL url = null;
      File file = null;
      Iterator fujaba__IterThisToContext = null;
      URL context = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         name = resource.getName();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // iterate to-many link contexts from this to context
         fujaba__Success = false;
         fujaba__IterThisToContext = this.iteratorOfContext ();

         while ( fujaba__IterThisToContext.hasNext () )
         {
            try
            {
               context = (URL) fujaba__IterThisToContext.next ();

               // check object context is really bound
               JavaSDM.ensure ( context != null );
               try
               {
               // story pattern successor
               try 
               {
                  fujaba__Success = false; 

                  url = new URL (context, name);

                  // check object url is really bound
                  JavaSDM.ensure ( url != null );
                  fujaba__Success = true;
               }
               catch ( JavaSDMException fujaba__InternalException )
               {
                  fujaba__Success = false;
               }

               // story pattern storypatternwiththis
               try 
               {
                  fujaba__Success = false; 

                  file = new File(url.toURI());

                  // check object file is really bound
                  JavaSDM.ensure ( file != null );
                  fujaba__Success = true;
               }
               catch ( JavaSDMException fujaba__InternalException )
               {
                  fujaba__Success = false;
               }

               }
               catch (Exception e)  {
                  // not a valid url or file not found - try without access style
               }
               if ( (file != null) && file.canRead() )
               {
                  return file.lastModified();

               }

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return -1;
   }

   public String getResolvedName (String source ) throws ResourceNotFoundException
   {
      boolean fujaba__Success = false;
      Iterator fujaba__IterThisToContext = null;
      URL context = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // iterate to-many link contexts from this to context
         fujaba__Success = false;
         fujaba__IterThisToContext = this.iteratorOfContext ();

         while ( fujaba__IterThisToContext.hasNext () )
         {
            try
            {
               context = (URL) fujaba__IterThisToContext.next ();

               // check object context is really bound
               JavaSDM.ensure ( context != null );
               try {
                  String location = getSourceLocation( source, false );
                  URL url = new URL (context, location);
                  url.openStream ().close();
                  return location;
               } catch ( java.io.IOException e1 ) {
                     // ok, try next context url
               }

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern Successor of 
      try 
      {
         fujaba__Success = false; 

         // iterate to-many link contexts from this to context
         fujaba__Success = false;
         fujaba__IterThisToContext = this.iteratorOfContext ();

         while ( fujaba__IterThisToContext.hasNext () )
         {
            try
            {
               context = (URL) fujaba__IterThisToContext.next ();

               // check object context is really bound
               JavaSDM.ensure ( context != null );
               try {
                  String location = getSourceLocation( source, true );
                  URL url = new URL (context, location);
                  url.openStream ().close();
                  return location;
               } catch ( java.io.IOException e2 ) {
                     // ok, try next context url
               }

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      throw new ResourceNotFoundException("Cannot find resource \"" + source + "\".");
   }

   public InputStream getResourceStream (String name ) throws ResourceNotFoundException
   {
      boolean fujaba__Success = false;
      Iterator fujaba__IterThisToContext = null;
      URL context = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // iterate to-many link contexts from this to context
         fujaba__Success = false;
         fujaba__IterThisToContext = this.iteratorOfContext ();

         while ( fujaba__IterThisToContext.hasNext () )
         {
            try
            {
               context = (URL) fujaba__IterThisToContext.next ();

               // check object context is really bound
               JavaSDM.ensure ( context != null );
               try {
                  URL url = new URL (context, name);
                  return url.openStream();
               } catch ( java.io.IOException e1 ) {
                     // ok, try next context url
               }

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      throw new ResourceNotFoundException("Cannot find resource \"" + name + "\".");
   }

   private String getSourceLocation (String source , boolean stripAccessStyle )
   {
      boolean fujaba__Success = false;
      int index = 0;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         index = source.indexOf(":");
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( index > 0 ) )
      {
         return source;

      }
      String accessStyle = source.substring(0, index);
      int indexOfSlash = accessStyle.lastIndexOf( '/' );
      String target;
      if ( indexOfSlash >= 0 )
      {
         target = accessStyle.substring( 0, indexOfSlash );
         accessStyle = accessStyle.substring( indexOfSlash+1 );
      } 
      else
      {
         target = "";
      }
      source = source.substring(index + 1);

      String location;
      if ( !stripAccessStyle )
      {
         location = target + "/" + accessStyle + "/" + source;
      }
      else {
         /* ignore -> try without AccessStyle*/
         location = target + "/default/" + source;
      }
      // replace space etc. in target, accessStyle or template name
      try
            {
               return URLEncoder.encode(location,"UTF-8").replaceAll("\\+","%20").replaceAll("%2F","/");
            } catch (UnsupportedEncodingException e)
            {
               throw new RuntimeException(e);
            }
   }

   public void init (ExtendedProperties configuration )
   {
      boolean fujaba__Success = false;
      Object _TmpObject = null;
      TemplateLoader loader = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         _TmpObject = configuration.get (TemplateLoader.PROPERTY_KEY);

         // ensure correct type and really bound of object loader
         JavaSDM.ensure ( _TmpObject instanceof TemplateLoader );
         loader = (TemplateLoader) _TmpObject;

         // create link loader from this to loader
         this.setTemplateEngine (loader);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   public boolean isSourceModified (Resource resource )
   {

      return getLastModified(resource) > resource.getLastModified();
   }

   /**
    * <pre>
    *           0..1     loader     0..1
    * URLResourceLoader ------------------------- TemplateLoader
    *           loader               templateEngine
    * </pre>
    */
   public static final String PROPERTY_TEMPLATE_ENGINE = "templateEngine";

   @Property( name = PROPERTY_TEMPLATE_ENGINE, partner = TemplateLoader.PROPERTY_LOADER, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private TemplateLoader templateEngine;

   @Property( name = PROPERTY_TEMPLATE_ENGINE )
   public boolean setTemplateEngine (TemplateLoader value)
   {
      boolean changed = false;

      if (this.templateEngine != value)
      {
      
         TemplateLoader oldValue = this.templateEngine;
         URLResourceLoader source = this;
         if (this.templateEngine != null)
         {
            this.templateEngine = null;
            oldValue.setLoader (null);
         }
         this.templateEngine = value;

         if (value != null)
         {
            value.setLoader (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TEMPLATE_ENGINE )
   public URLResourceLoader withTemplateEngine (TemplateLoader value)
   {
      setTemplateEngine (value);
      return this;
   }

   public TemplateLoader getTemplateEngine ()
   {
      return this.templateEngine;
   }

   public void removeYou()
   {
      this.removeAllFromContext ();
      this.setTemplateEngine (null);
   }
}


