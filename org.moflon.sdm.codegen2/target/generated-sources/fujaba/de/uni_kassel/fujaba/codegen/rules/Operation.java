/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.rules;
import java.util.Collections;
import java.util.Iterator;
import java.util.Set;

import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.upb.tools.fca.FEmptyIterator;
import de.upb.tools.fca.FHashSet; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public abstract class Operation extends Token
{


   /**
    * <pre>
    *           0..n     needs     0..n
    * Operation ------------------------- UMLObjectRef
    *           dependentOperations               needs
    * </pre>
    */
   public static final String PROPERTY_NEEDS = "needs";

   @Property( name = PROPERTY_NEEDS, partner = UMLObjectRef.PROPERTY_DEPENDENT_OPERATIONS, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashSet<UMLObjectRef> needs;

   @Property( name = PROPERTY_NEEDS )
   public Set<? extends UMLObjectRef> getNeeds()
   {
      return ((this.needs == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.needs));
   }

   @Property( name = PROPERTY_NEEDS )
   public boolean addToNeeds (UMLObjectRef value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.needs == null)
         {
            this.needs = new FHashSet<UMLObjectRef> ();

         }
      
         changed = this.needs.add (value);
         if (changed)
         {
            value.addToDependentOperations (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_NEEDS )
   public Operation withNeeds (UMLObjectRef value)
   {
      addToNeeds (value);
      return this;
   }

   public Operation withoutNeeds (UMLObjectRef value)
   {
      removeFromNeeds (value);
      return this;
   }


   public boolean removeFromNeeds (UMLObjectRef value)
   {
      boolean changed = false;

      if ((this.needs != null) && (value != null))
      {
      
         changed = this.needs.remove (value);
         if (changed)
         {
            value.removeFromDependentOperations (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_NEEDS )
   public void removeAllFromNeeds (){
   
      UMLObjectRef tmpValue;
      Iterator<? extends UMLObjectRef> iter = this.iteratorOfNeeds ();
      while (iter.hasNext ())
      {
         tmpValue = (UMLObjectRef) iter.next ();
         this.removeFromNeeds (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_NEEDS )
   public boolean hasInNeeds (UMLObjectRef value)
   {
      return ((this.needs != null) &&
              (value != null) &&
              this.needs.contains (value));
   }

   @Property( name = PROPERTY_NEEDS )
   public Iterator<? extends UMLObjectRef> iteratorOfNeeds ()
   {
      return ((this.needs == null)
              ? FEmptyIterator.<UMLObjectRef>get ()
              : this.needs.iterator ());
   }

   @Property( name = PROPERTY_NEEDS )
   public int sizeOfNeeds ()
   {
      return ((this.needs == null)
              ? 0
              : this.needs.size ());
   }

   /**
    * <pre>
    *           0..n     operations     0..1
    * Operation ------------------------- ExecuteStoryPatternOperation
    *           operations               storyPatternOperation
    * </pre>
    */
   public static final String PROPERTY_STORY_PATTERN_OPERATION = "storyPatternOperation";

   @Property( name = PROPERTY_STORY_PATTERN_OPERATION, partner = ExecuteStoryPatternOperation.PROPERTY_OPERATIONS, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private ExecuteStoryPatternOperation storyPatternOperation;

   @Property( name = PROPERTY_STORY_PATTERN_OPERATION )
   public boolean setStoryPatternOperation (ExecuteStoryPatternOperation value)
   {
      boolean changed = false;

      if (this.storyPatternOperation != value)
      {
      
         ExecuteStoryPatternOperation oldValue = this.storyPatternOperation;
         Operation source = this;
         if (this.storyPatternOperation != null)
         {
            this.storyPatternOperation = null;
            oldValue.removeFromOperations (this);
         }
         this.storyPatternOperation = value;

         if (value != null)
         {
            value.addToOperations (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_STORY_PATTERN_OPERATION )
   public Operation withStoryPatternOperation (ExecuteStoryPatternOperation value)
   {
      setStoryPatternOperation (value);
      return this;
   }

   public ExecuteStoryPatternOperation getStoryPatternOperation ()
   {
      return this.storyPatternOperation;
   }

   public void removeYou()
   {
      this.removeAllFromNeeds ();
      this.setStoryPatternOperation (null);
      super.removeYou ();
   }
}


