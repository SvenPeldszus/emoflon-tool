/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.rules.engine;
import java.util.Iterator;

import de.uni_kassel.fujaba.codegen.rules.CheckLinkOperation;
import de.uni_kassel.fujaba.codegen.rules.CreateLinkOperation;
import de.uni_kassel.fujaba.codegen.rules.DestroyLinkOperation;
import de.uni_kassel.fujaba.codegen.rules.LinkOperation;
import de.uni_kassel.fujaba.codegen.rules.SearchOperation;
import de.uni_kassel.fujaba.codegen.rules.SimpleNegativeCheckOperation;
import de.uni_kassel.fujaba.codegen.rules.Token;
import de.uni_kassel.fujaba.codegen.rules.UMLLinkRef;
import de.uni_kassel.fujaba.codegen.rules.UMLObjectRef;
import de.uni_paderborn.fujaba.metamodel.common.FStereotype;
import de.uni_paderborn.fujaba.metamodel.structure.FClass;
import de.uni_paderborn.fujaba.metamodel.structure.FRole;
import de.uni_paderborn.fujaba.uml.behavior.UMLLink;
import de.uni_paderborn.fujaba.uml.behavior.UMLObject;
import de.uni_paderborn.fujaba.uml.behavior.UMLPath;
import de.upb.tools.sdm.JavaSDM; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDMException;


public abstract class LinkOperationCostStrategy extends CostStrategy
{


   protected abstract double getCheckCost (double payload );

   public double getCost (Token operation )
   {
      boolean fujaba__Success = false;
      Object _TmpObject = null;
      LinkOperation linkOp = null;
      UMLLink link = null;
      UMLLinkRef linkRef = null;
      UMLObject subject = null;
      UMLObjectRef subjectRef = null;
      double payload = 0.0;
      CheckLinkOperation check = null;
      SearchOperation search = null;
      SimpleNegativeCheckOperation negative = null;
      UMLObject source = null;
      Iterator fujaba__IterLinkOpToSourceRef = null;
      UMLObjectRef sourceRef = null;
      CreateLinkOperation create = null;
      DestroyLinkOperation destroy = null;

      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         _TmpObject = operation;

         // ensure correct type and really bound of object linkOp
         JavaSDM.ensure ( _TmpObject instanceof LinkOperation );
         linkOp = (LinkOperation) _TmpObject;

         // search to-one link link from linkOp to linkRef
         linkRef = linkOp.getLink ();

         // check object linkRef is really bound
         JavaSDM.ensure ( linkRef != null );

         // search to-one link ref from linkRef to link
         link = linkRef.getRef ();

         // check object link is really bound
         JavaSDM.ensure ( link != null );



         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         // story pattern 
         try 
         {
            fujaba__Success = false; 

            // collabStat call
            getEngine ().internalError ("Not a LinkOperation: "+operation.getClass (), null);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         return 0;

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object linkOp is really bound
         JavaSDM.ensure ( linkOp != null );
         // search to-one link subject from linkOp to subjectRef
         subjectRef = linkOp.getSubject ();

         // check object subjectRef is really bound
         JavaSDM.ensure ( subjectRef != null );

         // search to-one link ref from subjectRef to subject
         subject = subjectRef.getRef ();

         // check object subject is really bound
         JavaSDM.ensure ( subject != null );



         // collabStat call
         payload = getPayload (link, subject);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         // story pattern 
         try 
         {
            fujaba__Success = false; 

            // collabStat call
            getEngine ().internalError ("No subject for LinkOperation: "+linkOp, null);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         return 0;

      }
      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         _TmpObject = operation;

         // ensure correct type and really bound of object check
         JavaSDM.ensure ( _TmpObject instanceof CheckLinkOperation );
         check = (CheckLinkOperation) _TmpObject;

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return getCheckCost (payload);

      }
      // story pattern Successor of successor
      try 
      {
         fujaba__Success = false; 

         _TmpObject = operation;

         // ensure correct type and really bound of object search
         JavaSDM.ensure ( _TmpObject instanceof SearchOperation );
         search = (SearchOperation) _TmpObject;

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return getSearchCost (payload);

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         _TmpObject = operation;

         // ensure correct type and really bound of object negative
         JavaSDM.ensure ( _TmpObject instanceof SimpleNegativeCheckOperation );
         negative = (SimpleNegativeCheckOperation) _TmpObject;

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return getCheckCost (payload);

      }
      // story pattern Successor of 
      try 
      {
         fujaba__Success = false; 

         // check object link is really bound
         JavaSDM.ensure ( link != null );
         // check object subject is really bound
         JavaSDM.ensure ( subject != null );
         // search to-one link target from link to source
         source = link.getTarget ();

         // check object source is really bound
         JavaSDM.ensure ( source != null );

         // check isomorphic binding between objects subject and source
         JavaSDM.ensure ( !subject.equals (source) );


         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         // story pattern Successor of Successor of 
         try 
         {
            fujaba__Success = false; 

            // check object link is really bound
            JavaSDM.ensure ( link != null );
            // check object subject is really bound
            JavaSDM.ensure ( subject != null );
            // search to-one link source from link to source
            source = link.getSource ();

            // check object source is really bound
            JavaSDM.ensure ( source != null );

            // check isomorphic binding between objects subject and source
            JavaSDM.ensure ( !subject.equals (source) );


            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         if ( !( fujaba__Success ) )
         {
            // story pattern 
            try 
            {
               fujaba__Success = false; 

               // collabStat call
               getEngine ().internalError ("No partner object for operation's subject found in link", link);
               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }

            return 0;

         }

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object linkOp is really bound
         JavaSDM.ensure ( linkOp != null );
         // iterate to-many link needs from linkOp to sourceRef
         fujaba__Success = false;
         fujaba__IterLinkOpToSourceRef = linkOp.iteratorOfNeeds ();

         while ( !(fujaba__Success) && fujaba__IterLinkOpToSourceRef.hasNext () )
         {
            try
            {
               sourceRef = (UMLObjectRef) fujaba__IterLinkOpToSourceRef.next ();

               // check object sourceRef is really bound
               JavaSDM.ensure ( sourceRef != null );
               // search to-one link ref from sourceRef to source
               source = sourceRef.getRef ();

               // check object source is really bound
               JavaSDM.ensure ( source != null );



               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return 0;

      }
      // story pattern Successor of Successor of successor
      try 
      {
         fujaba__Success = false; 

         _TmpObject = operation;

         // ensure correct type and really bound of object create
         JavaSDM.ensure ( _TmpObject instanceof CreateLinkOperation );
         create = (CreateLinkOperation) _TmpObject;

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return getCreateCost (linkRef, sourceRef, payload);

      }
      // story pattern Successor of Successor of Successor of successor
      try 
      {
         fujaba__Success = false; 

         _TmpObject = operation;

         // ensure correct type and really bound of object destroy
         JavaSDM.ensure ( _TmpObject instanceof DestroyLinkOperation );
         destroy = (DestroyLinkOperation) _TmpObject;

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return getDestroyCost (linkRef, sourceRef, payload);

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         getEngine ().internalError ("Unknown link operation: "+operation.getClass (), null);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return 0;
   }

   protected double getCreateBackRefCost (UMLLinkRef linkRef , UMLObjectRef from )
   {
      boolean fujaba__Success = false;
      CreateLinkOperation backOp = null;
      ExecutionPlanEngine engine = null;
      double cost = 0.0;

      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // check object from is really bound
         JavaSDM.ensure ( from != null );
         // check object linkRef is really bound
         JavaSDM.ensure ( linkRef != null );
         // create object backOp
         backOp = new CreateLinkOperation ( );

         // create link subject from from to backOp
         from.addToSubjectOf (backOp);

         // create link link from linkRef to backOp
         linkRef.addToLinkTo (backOp);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         // story pattern successor
         try 
         {
            fujaba__Success = false; 

            // search to-one link costStrategies from this to engine
            engine = this.getEngine ();

            // check object engine is really bound
            JavaSDM.ensure ( engine != null );


            // collabStat call
            cost = engine.getCost (backOp);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         // story pattern successor
         try 
         {
            fujaba__Success = false; 

            // check object backOp is really bound
            JavaSDM.ensure ( backOp != null );
            // delete object backOp
            backOp.removeYou ();

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         return cost;

      }
      // from may be unbound, which is not an error
      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // check object from is really bound
         JavaSDM.ensure ( from != null );
         // collabStat call
         getEngine ().internalError ("LinkOperation without link", null);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return 0.0;
   }

   protected abstract double getCreateCost (UMLLinkRef linkRef , UMLObjectRef from , double payload );

   protected double getDestroyBackRefCost (UMLLinkRef linkRef , UMLObjectRef from )
   {
      boolean fujaba__Success = false;
      DestroyLinkOperation backOp = null;
      ExecutionPlanEngine engine = null;
      double cost = 0.0;

      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // check object from is really bound
         JavaSDM.ensure ( from != null );
         // check object linkRef is really bound
         JavaSDM.ensure ( linkRef != null );
         // create object backOp
         backOp = new DestroyLinkOperation ( );

         // create link subject from from to backOp
         from.addToSubjectOf (backOp);

         // create link link from linkRef to backOp
         linkRef.addToLinkTo (backOp);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         // from may be unbound, which is not an error
         // story pattern successor
         try 
         {
            fujaba__Success = false; 

            // check object from is really bound
            JavaSDM.ensure ( from != null );
            // collabStat call
            getEngine ().internalError ("LinkOperation without link", null);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         return 0.0;

      }
      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // search to-one link costStrategies from this to engine
         engine = this.getEngine ();

         // check object engine is really bound
         JavaSDM.ensure ( engine != null );


         // collabStat call
         cost = engine.getCost (backOp);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // check object backOp is really bound
         JavaSDM.ensure ( backOp != null );
         // delete object backOp
         backOp.removeYou ();

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return cost;
   }

   protected abstract double getDestroyCost (UMLLinkRef linkRef , UMLObjectRef from , double payload );

   protected double getPayload (UMLLink link , UMLObject target )
   {
      boolean fujaba__Success = false;
      ExecutionPlanEngine engine = null;
      double payload = 0.0;
      Iterator fujaba__IterClsToStereotype = null;
      FStereotype stereotype = null;
      FClass cls = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // search to-one link costStrategies from this to engine
         engine = this.getEngine ();

         // check object engine is really bound
         JavaSDM.ensure ( engine != null );


         // collabStat call
         payload = engine.getPayload (link, target);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object target is really bound
         JavaSDM.ensure ( target != null );
         // search to-one link instanceOf from target to cls
         cls = target.getInstanceOf ();

         // check object cls is really bound
         JavaSDM.ensure ( cls != null );

         // iterate to-many link stereotypes from cls to stereotype
         fujaba__Success = false;
         fujaba__IterClsToStereotype = cls.iteratorOfStereotypes ();

         while ( !(fujaba__Success) && fujaba__IterClsToStereotype.hasNext () )
         {
            try
            {
               stereotype = (FStereotype) fujaba__IterClsToStereotype.next ();

               // check object stereotype is really bound
               JavaSDM.ensure ( stereotype != null );
               // attribute condition name == "Stereotype"
               JavaSDM.ensure ( JavaSDM.stringCompare ((String) stereotype.getName (), "Stereotype") == 0 );


               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return payload;

      }
      return payload + 3;
   }

   protected abstract double getSearchCost (double payload );

   protected abstract boolean isResponsibleImpl (Token operation , UMLLink link , UMLObject target , FRole sourceRole , FRole targetRole );

   public boolean isResponsible (Token operation )
   {
      boolean fujaba__Success = false;
      Object _TmpObject = null;
      LinkOperation linkOp = null;
      UMLLink link = null;
      UMLLinkRef linkRef = null;
      UMLObject target = null;
      UMLObjectRef targetRef = null;
      UMLPath path = null;
      FRole targetRole = null;
      FRole sourceRole = null;

      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         _TmpObject = operation;

         // ensure correct type and really bound of object linkOp
         JavaSDM.ensure ( _TmpObject instanceof LinkOperation );
         linkOp = (LinkOperation) _TmpObject;

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return false;

      }
      // story pattern Successor of successor
      try 
      {
         fujaba__Success = false; 

         // check object linkOp is really bound
         JavaSDM.ensure ( linkOp != null );
         // search to-one link link from linkOp to linkRef
         linkRef = linkOp.getLink ();

         // check object linkRef is really bound
         JavaSDM.ensure ( linkRef != null );

         // search to-one link ref from linkRef to link
         link = linkRef.getRef ();

         // check object link is really bound
         JavaSDM.ensure ( link != null );



         // search to-one link subject from linkOp to targetRef
         targetRef = linkOp.getSubject ();

         // check object targetRef is really bound
         JavaSDM.ensure ( targetRef != null );

         // search to-one link ref from targetRef to target
         target = targetRef.getRef ();

         // check object target is really bound
         JavaSDM.ensure ( target != null );



         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         // story pattern 
         try 
         {
            fujaba__Success = false; 

            // collabStat call
            getEngine().internalError ("Missing target object or link for link operation", null);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         return false;

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         _TmpObject = link;

         // ensure correct type and really bound of object path
         JavaSDM.ensure ( _TmpObject instanceof UMLPath );
         path = (UMLPath) _TmpObject;

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return false;

      }
      // story pattern Successor of successor
      try 
      {
         fujaba__Success = false; 

         // check object link is really bound
         JavaSDM.ensure ( link != null );
         // check object target is really bound
         JavaSDM.ensure ( target != null );
         // check link target from link to target
         JavaSDM.ensure (target.equals (link.getTarget ()));

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         // story pattern successor
         try 
         {
            fujaba__Success = false; 

            // check object link is really bound
            JavaSDM.ensure ( link != null );
            // search to-one link sourceRole from link to sourceRole
            sourceRole = link.getSourceRole ();

            // check object sourceRole is really bound
            JavaSDM.ensure ( sourceRole != null );

            // search to-one link targetRole from link to targetRole
            targetRole = link.getTargetRole ();

            // check object targetRole is really bound
            JavaSDM.ensure ( targetRole != null );

            // check isomorphic binding between objects targetRole and sourceRole
            JavaSDM.ensure ( !targetRole.equals (sourceRole) );



            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         if ( fujaba__Success )
         {
            return isResponsibleImpl (operation, link, target, sourceRole, targetRole);

         }
         // story pattern successor
         try 
         {
            fujaba__Success = false; 

            // collabStat call
            getEngine ().error ("Link is missing source or target role", link);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         return false;

      }
      // story pattern Successor of successor
      try 
      {
         fujaba__Success = false; 

         // check object link is really bound
         JavaSDM.ensure ( link != null );
         // search to-one link sourceRole from link to targetRole
         targetRole = link.getSourceRole ();

         // check object targetRole is really bound
         JavaSDM.ensure ( targetRole != null );

         // search to-one link targetRole from link to sourceRole
         sourceRole = link.getTargetRole ();

         // check object sourceRole is really bound
         JavaSDM.ensure ( sourceRole != null );

         // check isomorphic binding between objects targetRole and sourceRole
         JavaSDM.ensure ( !targetRole.equals (sourceRole) );



         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return isResponsibleImpl (operation, link, target, sourceRole, targetRole);

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         getEngine ().error ("Link is missing source or target role", link);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return false;
   }

}


