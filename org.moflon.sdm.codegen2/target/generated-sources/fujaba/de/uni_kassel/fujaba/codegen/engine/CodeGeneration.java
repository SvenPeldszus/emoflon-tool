/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.engine;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;

import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_paderborn.fujaba.metamodel.common.FElement;
import de.upb.tools.fca.FEmptyListIterator;
import de.upb.tools.fca.FLinkedList; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDM; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDMException;


public class CodeGeneration
{


   private  CodeGeneration ()
   {
   }

   /**
    * <pre>
    *           0..1     engines     0..n
    * CodeGeneration ------------------------- Engine
    *           codeGeneration               engines
    * </pre>
    */
   public static final String PROPERTY_ENGINES = "engines";

   @Property( name = PROPERTY_ENGINES, partner = Engine.PROPERTY_CODE_GENERATION, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FLinkedList<Engine> engines;

   @Property( name = PROPERTY_ENGINES )
   public List<? extends Engine> getEngines()
   {
      return ((this.engines == null)
              ? Collections.EMPTY_LIST
              : Collections.unmodifiableList(this.engines));
   }

   @Property( name = PROPERTY_ENGINES )
   public boolean addToEngines (Engine value)
   {
      boolean changed = false;

      if (value != null && !this.hasInEngines (value))
      {
         if (this.engines == null)
         {
            this.engines = new FLinkedList<Engine> ();

         }
      
         changed = this.engines.add (value);
         if (changed)
         {
            value.setCodeGeneration (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ENGINES )
   public CodeGeneration withEngines (Engine value)
   {
      addToEngines (value);
      return this;
   }

   public CodeGeneration withoutEngines (Engine value)
   {
      removeFromEngines (value);
      return this;
   }


   public boolean removeFromEngines (Engine value)
   {
      boolean changed = false;

      if ((this.engines != null) && (value != null))
      {
      
         changed = this.engines.remove (value);
         if (changed)
         {
            value.setCodeGeneration (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ENGINES )
   public void removeAllFromEngines (){
   
      Engine tmpValue;
      Iterator<? extends Engine> iter = this.iteratorOfEngines ();
      while (iter.hasNext ())
      {
         tmpValue = (Engine) iter.next ();
         this.removeFromEngines (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_ENGINES )
   public boolean hasInEngines (Engine value)
   {
      return ((this.engines != null) &&
              (value != null) &&
              this.engines.contains (value));
   }

   @Property( name = PROPERTY_ENGINES )
   public ListIterator<? extends Engine> iteratorOfEngines ()
   {
      return ((this.engines == null)
              ? FEmptyListIterator.<Engine>get ()
              : this.engines.listIterator());
   }

   @Property( name = PROPERTY_ENGINES )
   public int sizeOfEngines ()
   {
      return ((this.engines == null)
              ? 0
              : this.engines.size ());
   }
   @Property( name = PROPERTY_ENGINES )
   public Engine getFirstOfEngines ()
   {
      if (engines == null)
      {
         return null;
      }
      else
      {
         if (engines.size() == 0) 	 
         { 	 
            return null; 	 
         }
         return (Engine) engines.getFirst ();
      }
   }

   @Property( name = PROPERTY_ENGINES )
   public Engine getLastOfEngines ()
   {
      if (engines == null)
      {
         return null;
      }
      else
      {
         if (engines.size() == 0) 	 
         { 	 
            return null; 	 
         }
         return (Engine) engines.getLast ();
      }
   }
   @Property( name = PROPERTY_ENGINES )
   public Engine getFromEngines ( int index )
   {
      if (index >= 0 && index < sizeOfEngines ())
      {
         return (Engine) this.engines.get (index);
      }
      else
      {
         throw new IllegalArgumentException ("getEnginesAt(" + index + ")" );
      }
   }

   @Property( name = PROPERTY_ENGINES )
   public int indexOfEngines ( Engine value )
   {
      return ((this.engines == null)
              ? -1
              : this.engines.indexOf (value));
   }

   @Property( name = PROPERTY_ENGINES )
   public int indexOfEngines ( Engine value, int index )
   {
      return ((this.engines == null)
   	       ? -1
   	       : this.engines.indexOf (value, index));
   }

   @Property( name = PROPERTY_ENGINES )
   public int lastIndexOfEngines ( Engine value )
   {
      return ((this.engines == null)
               ? -1
               : this.engines.lastIndexOf (value));
   }

   @Property( name = PROPERTY_ENGINES )
   public int lastIndexOfEngines ( Engine value, int index )
   {
      return ((this.engines == null)
               ? -1
               : this.engines.lastIndexOf (value, index));
   }

   @Property( name = PROPERTY_ENGINES )
   public boolean isBeforeOfEngines ( Engine leftObject, Engine rightObject)
   {
      if (engines == null)
      {
         return false;
      }
      else
      {
         return engines.isBefore (leftObject, rightObject);
      }
   }

   @Property( name = PROPERTY_ENGINES )
   public boolean isAfterOfEngines ( Engine leftObject, Engine rightObject)
   {
      if (engines == null)
      {
         return false;
      }
      else
      {
         return engines.isAfter (leftObject, rightObject);
      }
   }

   @Property( name = PROPERTY_ENGINES )
   public Engine getNextOfEngines ( Engine object )
   {
      if (engines == null)
      {
         return null;
      }
      else
      {
         return (Engine) engines.getNextOf (object);
      }
   }

   @Property( name = PROPERTY_ENGINES )
   public Engine getNextOfEngines ( Engine object, int index)
   {
      if (engines == null)
      {
         return null;
      }
      else
      {
         return (Engine) engines.getNextOf (object, index);
      }
   }

   @Property( name = PROPERTY_ENGINES )
   public Engine getPreviousOfEngines ( Engine object)
   {
      if (engines == null)
      {
         return null;
      }
      else
      {
         return (Engine) engines.getPreviousOf (object);
      }
   }

   @Property( name = PROPERTY_ENGINES )
   public Engine getPreviousOfEngines ( Engine object, int index )
   {
      if (engines == null)
      {
         return null;
      }
      else
      {
         return (Engine) engines.getPreviousOf (object, index);
      }
   }

   @Property( name = PROPERTY_ENGINES )
   public boolean addAfterOfEngines ( Engine refObject, Engine value)
   {
      boolean changed = false;
      if (engines != null)
      {
         int index = engines.indexOf (refObject);
         changed = addToEngines (index+1, value);
      }
      return changed;
   }

   @Property( name = PROPERTY_ENGINES )
   public boolean addBeforeOfEngines ( Engine refObject, Engine value)
   {
      boolean changed = false;
      if (engines != null)
      {
         int index = engines.indexOf (refObject);
         changed = addToEngines (index, value);
      }
      return changed;
   }

   @Property( name = PROPERTY_ENGINES )
   public boolean addToEngines (int index, Engine value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.engines == null)
         {
            this.engines = new FLinkedList<Engine> (); // or FTreeSet () or FLinkedList ()
         }
         int oldIndex = this.indexOfEngines (value);
         if (oldIndex != index)
         {
            try
            {
            
               if (oldIndex > -1)
               {
                  engines.remove (oldIndex);
               }
               engines.add (index, value);
               if (oldIndex < 0)
               {
                  value.setCodeGeneration (this);
               }
               changed = true;
            
            }
            catch (IndexOutOfBoundsException ex)
            {
               return false;
            }
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_ENGINES )
   public boolean setInEngines (int index, Engine value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.engines == null)
         {
            this.engines = new FLinkedList<Engine> (); // or FTreeSet () or FLinkedList ()
         }
         int oldIndex = this.indexOfEngines (value);
         if (oldIndex != index)
         {
            try
            {
            
               Engine oldValue = (Engine)this.engines.set (index, value);
               if (oldIndex > -1)
               {
                  this.engines.remove (oldIndex);
               }
               if (oldValue != value)
               {
                  if (oldValue != null)
                  {
                     oldValue.setCodeGeneration (null);
                  }
                  if (oldIndex < 0)
                  {
                     value.setCodeGeneration (this);
                  }
                  changed = true;
               }
            
            }
            catch (IndexOutOfBoundsException ex)
            {
               return false;
            }
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_ENGINES )
   public boolean removeFromEngines (int index)
   {
      boolean changed = false;

      if (this.engines != null && (index >= 0 && index < this.engines.size ()))
      {
      
         Engine tmpValue = (Engine) this.engines.remove (index);
         if (tmpValue != null)
         {
            tmpValue.setCodeGeneration (null);
            changed = true;
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ENGINES )
   public boolean removeFromEngines (int index, Engine value)
   {
      boolean changed = false;

      if ((this.engines != null) && (value != null) && 
          (index >= 0 && index < this.engines.size ()))
      {
         Engine oldValue = (Engine) this.engines.get (index);
         if (oldValue == value)
         {
         
            changed = this.removeFromEngines (index);
         
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_ENGINES )
   public ListIterator<? extends Engine> iteratorOfEngines ( Engine  lowerBound )
   {
      ListIterator<Engine> result = FEmptyListIterator.<Engine>get ();

      if (engines != null && lowerBound != null)
      {
         int index = engines.indexOf (lowerBound) + 1;
         result = engines.listIterator (index);
      }
      else if (engines != null && lowerBound == null)
      {
         result = engines.listIterator (0);
      }

      return result;
   }

   @Property( name = PROPERTY_ENGINES )
   public ListIterator<? extends Engine> iteratorOfEngines (int index)
   {
      return ((this.engines == null)
              ? FEmptyListIterator.<Engine>get ()
              : this.engines.listIterator (Math.max(0,Math.min(index,this.engines.size ()))));
   }

   public Engine getEngineFor (FElement element , String targetLanguage )
   {
      boolean fujaba__Success = false;
      Iterator fujaba__IterThisToEngine = null;
      Engine engine = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // iterate to-many link engines from this to engine
         fujaba__Success = false;
         fujaba__IterThisToEngine = this.iteratorOfEngines ();

         while ( !(fujaba__Success) && fujaba__IterThisToEngine.hasNext () )
         {
            try
            {
               engine = (Engine) fujaba__IterThisToEngine.next ();

               // check object engine is really bound
               JavaSDM.ensure ( engine != null );
               // constraint engine.isResponsible (element, targetLanguage)
               JavaSDM.ensure ( engine.isResponsible (element, targetLanguage) );

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return engine;

      }
      return null;
   }

   public static CodeGeneration get ()
   {
      boolean fujaba__Success = false;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object instance is really bound
         JavaSDM.ensure ( instance != null );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return instance;

      }
      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         instance = new CodeGeneration();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return instance;
   }

   public static final String PROPERTY_INSTANCE = "instance";

   @Property( name = PROPERTY_INSTANCE, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private static CodeGeneration instance;


   public void removeYou()
   {
      this.removeAllFromEngines ();
   }
}


