/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.engine;


import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Set;

import org.apache.velocity.Template;

import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.fujaba.codegen.CodeWriter;
import de.uni_kassel.fujaba.codegen.ContextClearer;
import de.uni_kassel.fujaba.codegen.TemplateCodeWriter;
import de.uni_kassel.fujaba.codegen.engine.listener.CodeWritingListener;
import de.uni_kassel.fujaba.codegen.engine.listener.CodeWritingVetoException;
import de.uni_kassel.fujaba.codegen.engine.message.MessageHandler;
import de.uni_kassel.fujaba.codegen.engine.message.MessageHandlerDelegate;
import de.uni_kassel.fujaba.codegen.rules.ASGElementTokenInterface;
import de.uni_kassel.fujaba.codegen.rules.NoCodeToken;
import de.uni_kassel.fujaba.codegen.rules.Token;
import de.uni_kassel.fujaba.codegen.velocity.URLResourceLoader;
import de.uni_paderborn.fujaba.metamodel.common.FElement;
import de.upb.tools.fca.FEmptyIterator;
import de.upb.tools.fca.FEmptyListIterator;
import de.upb.tools.fca.FHashMap;
import de.upb.tools.fca.FHashSet; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.fca.FLinkedList;
import de.upb.tools.sdm.JavaSDM;
import de.upb.tools.sdm.JavaSDMException; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public abstract class CodeWritingEngine extends MessageHandlerDelegate
{


   public  CodeWritingEngine (String targetName )
   {
      boolean fujaba__Success = false;
      TemplateLoader templateLoader = null;
      ContextClearer contextClearer = null;
      Class noCodeClass = null;
      TemplateCodeWriter noCode = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // create object templateLoader
         templateLoader = new TemplateLoader ( );

         // create object contextClearer
         contextClearer = new ContextClearer ( );

         // assign attribute this
         this.setTargetName (targetName);
         // create link template loader from templateLoader to this
         templateLoader.setCodeWritingEngine (this);

         // create link generators from contextClearer to this
         contextClearer.setEngine (this);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // children
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         this.addTemplateURLs( "templates/" );
         // collabStat call
         this.addGlobalTemplate();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }


      // exception
      catch( Exception e )
      {
         error (e.toString(), null);

      }

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         noCodeClass = NoCodeToken.class;

         // check object noCodeClass is really bound
         JavaSDM.ensure ( noCodeClass != null );
         // create object noCode
         noCode = new TemplateCodeWriter ( );

         // assign attribute noCode
         noCode.setContext (null);
         // create link generators from noCode to this
         noCode.setEngine (this);

         // create link responsibleFor from noCode to noCodeClass
         noCode.setResponsible (noCodeClass);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         this.initWriters();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   protected void addGlobalTemplate ()
   {
      boolean fujaba__Success = false;
      URLResourceLoader loader = null;
      TemplateLoader templateLoader = null;
      Iterator fujaba__IterThisToFujaba__TmpObjectDirs = null;
      FHashSet dirs = null;
      URL fujaba__TmpObjectDirs = null;
      Iterator fujaba__IterDirs = null;
      Template template = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // search to-one link template loader from this to templateLoader
         templateLoader = this.getTemplateLoader ();

         // check object templateLoader is really bound
         JavaSDM.ensure ( templateLoader != null );

         // search to-one link loader from templateLoader to loader
         loader = templateLoader.getLoader ();

         // check object loader is really bound
         JavaSDM.ensure ( loader != null );



         // iterate to-many link templateDirs from this to fujaba__TmpObjectDirs
         dirs = new FHashSet ();
         fujaba__IterThisToFujaba__TmpObjectDirs = this.iteratorOfDirs ();

         while ( fujaba__IterThisToFujaba__TmpObjectDirs.hasNext () )
         {
            try
            {
               fujaba__TmpObjectDirs = (URL) fujaba__IterThisToFujaba__TmpObjectDirs.next ();

               // check object fujaba__TmpObjectDirs is really bound
               JavaSDM.ensure ( fujaba__TmpObjectDirs != null );

               dirs.add (fujaba__TmpObjectDirs);
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         // iterate set
         fujaba__IterDirs = dirs.iterator ();
         while ( fujaba__IterDirs.hasNext () )
         {
            fujaba__TmpObjectDirs = (URL) fujaba__IterDirs.next ();
            // create link contexts from loader to fujaba__TmpObjectDirs
            loader.addToContext (fujaba__TmpObjectDirs);


         } // while
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         template = templateLoader.loadTemplate (getTargetName() + "/global.vm");

         // check object template is really bound
         JavaSDM.ensure ( template != null );
         // create link globalTemplate from this to template
         this.setGlobalTemplate (template);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   public void addTemplateURLs (String name )
   {
      boolean fujaba__Success = false;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         this.addTemplateURLs (name, this.getClass().getClassLoader());
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   public void addTemplateURLs (String name , ClassLoader loader )
   {
      boolean fujaba__Success = false;
      URL dir = null;

      try {
      Enumeration<URL> urlsEnum = loader.getResources(name);
      while ( urlsEnum.hasMoreElements() )
      {
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         dir = urlsEnum.nextElement();

         // check object dir is really bound
         JavaSDM.ensure ( dir != null );
         // create link templateDirs from this to dir
         this.addToDirs (dir);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      }
      } catch ( java.io.IOException e )
      {
         // ok, no folder with this name
      }
      return ;
   }

   /**
    * <pre>
    *           0..1     templateDirs     0..n
    * CodeWritingEngine ------------------------> URL
    *           codeWritingEngine               dirs
    * </pre>
    */
   public static final String PROPERTY_DIRS = "dirs";

   @Property( name = PROPERTY_DIRS, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashSet<URL> dirs;

   @Property( name = PROPERTY_DIRS )
   public Set<? extends URL> getDirs()
   {
      return ((this.dirs == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.dirs));
   }

   @Property( name = PROPERTY_DIRS )
   public boolean addToDirs (URL value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.dirs == null)
         {
            this.dirs = new FHashSet<URL> ();

         }
      
         changed = this.dirs.add (value);
      
      }
      return changed;
   }

   @Property( name = PROPERTY_DIRS )
   public CodeWritingEngine withDirs (URL value)
   {
      addToDirs (value);
      return this;
   }

   public CodeWritingEngine withoutDirs (URL value)
   {
      removeFromDirs (value);
      return this;
   }


   public boolean removeFromDirs (URL value)
   {
      boolean changed = false;

      if ((this.dirs != null) && (value != null))
      {
      
         changed = this.dirs.remove (value);
      
      }
      return changed;
   }

   @Property( name = PROPERTY_DIRS )
   public void removeAllFromDirs (){
      if (this.dirs != null && this.dirs.size () > 0)
      {
      
         this.dirs.clear();
      
      }
   }

   @Property( name = PROPERTY_DIRS )
   public boolean hasInDirs (URL value)
   {
      return ((this.dirs != null) &&
              (value != null) &&
              this.dirs.contains (value));
   }

   @Property( name = PROPERTY_DIRS )
   public Iterator<? extends URL> iteratorOfDirs ()
   {
      return ((this.dirs == null)
              ? FEmptyIterator.<URL>get ()
              : this.dirs.iterator ());
   }

   @Property( name = PROPERTY_DIRS )
   public int sizeOfDirs ()
   {
      return ((this.dirs == null)
              ? 0
              : this.dirs.size ());
   }

   /**
    * <pre>
    *           0..n     codeWriter     0..1
    * CodeWritingEngine ------------------------- TokenMutatorTemplateEngine
    *           codeWriter               engine
    * </pre>
    */
   public static final String PROPERTY_ENGINE = "engine";

   @Property( name = PROPERTY_ENGINE, partner = TokenMutatorTemplateEngine.PROPERTY_CODE_WRITER, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private TokenMutatorTemplateEngine engine;

   @Property( name = PROPERTY_ENGINE )
   public boolean setEngine (TokenMutatorTemplateEngine value)
   {
      boolean changed = false;

      if (this.engine != value)
      {
      
         TokenMutatorTemplateEngine oldValue = this.engine;
         CodeWritingEngine source = this;
         if (this.engine != null)
         {
            this.engine = null;
            oldValue.removeFromCodeWriter (this);
         }
         this.engine = value;

         if (value != null)
         {
            value.addToCodeWriter (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ENGINE )
   public CodeWritingEngine withEngine (TokenMutatorTemplateEngine value)
   {
      setEngine (value);
      return this;
   }

   public TokenMutatorTemplateEngine getEngine ()
   {
      return this.engine;
   }

   public String generateCodeForChildren (Token operation , CodeWriter writer )
   {

      return generateCodeForChildren (operation, "children", writer);
   }

   public String generateCodeForChildren (Token operation , String context , CodeWriter writer )
   {
      boolean fujaba__Success = false;
      StringBuilder sb = null;
      Iterator fujaba__IterOperationToChild = null;
      Token child = null;
      String code = null;
      Iterator fujaba__IterThisToListener = null;
      CodeWritingListener listener = null;

      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // create object sb
         sb = new StringBuilder ( );

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object operation is really bound
         JavaSDM.ensure ( operation != null );
         // check object sb is really bound
         JavaSDM.ensure ( sb != null );
         // iterate to-many link children from operation to child
         fujaba__Success = false;
         fujaba__IterOperationToChild = operation.iteratorOfChildren ();

         while ( fujaba__IterOperationToChild.hasNext () )
         {
            try
            {
               child = (Token) fujaba__IterOperationToChild.next ();

               // check object child is really bound
               JavaSDM.ensure ( child != null );
               // check isomorphic binding between objects operation and child
               JavaSDM.ensure ( !operation.equals (child) );

               // constraint JavaSDM.stringEquals (child.getContext(), context)
               JavaSDM.ensure ( JavaSDM.stringEquals (child.getContext(), context) );
               // collabStat call
               sb.append (generateCode (child));

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         code = sb.toString();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      try {
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // iterate to-many link listener from this to listener
         fujaba__Success = false;
         fujaba__IterThisToListener = this.iteratorOfListener ();

         while ( fujaba__IterThisToListener.hasNext () )
         {
            try
            {
               listener = (CodeWritingListener) fujaba__IterThisToListener.next ();

               // check object listener is really bound
               JavaSDM.ensure ( listener != null );
               // collabStat call
               listener.generateCodeForChildren (operation, writer, context, code);

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      }
      catch (CodeWritingVetoException e)
      {
         return e.getCode();
      }
      return sb.toString();
   }

   private String generateCodeImpl (Token token , CodeWriter writer )
   {
      boolean fujaba__Success = false;
      String code = null;
      Iterator fujaba__IterThisToListener = null;
      CodeWritingListener listener = null;

      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // check object writer is really bound
         JavaSDM.ensure ( writer != null );
         // collabStat call
         code = writer.generateCode (token);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( code != null ) )
      {
         return null;

      }
      try {
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // iterate to-many link listener from this to listener
         fujaba__Success = false;
         fujaba__IterThisToListener = this.iteratorOfListener ();

         while ( fujaba__IterThisToListener.hasNext () )
         {
            try
            {
               listener = (CodeWritingListener) fujaba__IterThisToListener.next ();

               // check object listener is really bound
               JavaSDM.ensure ( listener != null );
               // collabStat call
               listener.generateCode (token, writer, code);

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      }
      catch (CodeWritingVetoException e)
      {
         return e.getCode();
      }
      return code;
   }

   public String generateCode (Token token )
   {
      boolean fujaba__Success = false;
      String code = null;
      Iterator fujaba__IterThisToResponsible = null;
      CodeWriter responsible = null;

      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // iterate to-many link generators from this to responsible
         fujaba__Success = false;
         fujaba__IterThisToResponsible = this.iteratorOfGenerators ();

         while ( fujaba__IterThisToResponsible.hasNext () )
         {
            try
            {
               responsible = (CodeWriter) fujaba__IterThisToResponsible.next ();

               // check object responsible is really bound
               JavaSDM.ensure ( responsible != null );
               // collabStat call
               code = responsible.generateCode (token);
               if ( code != null  && code.compareTo("") != 0)
               {
                  return code;

               }

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return noCode (token);
   }

   public String generateCode (Token token , CodeWriter prev )
   {
      boolean fujaba__Success = false;
      String code = null;
      Iterator fujaba__IterThisToResponsible = null;
      CodeWriter responsible = null;

      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // check object prev is really bound
         JavaSDM.ensure ( prev != null );
         // search multilink UMLMultiLink[{...}]
         // iterate to-many link generators from this to responsible
         fujaba__Success = false;
         fujaba__IterThisToResponsible = this.iteratorOfGenerators (prev);

         while ( fujaba__IterThisToResponsible.hasNext () )
         {
            try
            {
               responsible = (CodeWriter) fujaba__IterThisToResponsible.next ();

               // check object responsible is really bound
               JavaSDM.ensure ( responsible != null );
               // check isomorphic binding between objects responsible and prev
               JavaSDM.ensure ( !responsible.equals (prev) );

               // check link generators from this to prev
               JavaSDM.ensure (this.hasInGenerators (prev));

               // collabStat call
               code = responsible.generateCode (token);
               if ( code != null )
               {
                  return code;

               }

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return noCode (token);
   }

   /**
    * <pre>
    *           0..1     generators     0..n
    * CodeWritingEngine ------------------------- CodeWriter
    *           engine               generators
    * </pre>
    */
   public static final String PROPERTY_GENERATORS = "generators";

   @Property( name = PROPERTY_GENERATORS, partner = CodeWriter.PROPERTY_ENGINE, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FLinkedList<CodeWriter> generators;

   @Property( name = PROPERTY_GENERATORS )
   public List<? extends CodeWriter> getGenerators()
   {
      return ((this.generators == null)
              ? Collections.EMPTY_LIST
              : Collections.unmodifiableList(this.generators));
   }

   @Property( name = PROPERTY_GENERATORS )
   public boolean addToGenerators (CodeWriter value)
   {
      boolean changed = false;

      if (value != null && !this.hasInGenerators (value))
      {
         if (this.generators == null)
         {
            this.generators = new FLinkedList<CodeWriter> ();

         }
      
         changed = this.generators.add (value);
         if (changed)
         {
            value.setEngine (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_GENERATORS )
   public CodeWritingEngine withGenerators (CodeWriter value)
   {
      addToGenerators (value);
      return this;
   }

   public CodeWritingEngine withoutGenerators (CodeWriter value)
   {
      removeFromGenerators (value);
      return this;
   }


   public boolean removeFromGenerators (CodeWriter value)
   {
      boolean changed = false;

      if ((this.generators != null) && (value != null))
      {
      
         changed = this.generators.remove (value);
         if (changed)
         {
            value.setEngine (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_GENERATORS )
   public void removeAllFromGenerators (){
   
      CodeWriter tmpValue;
      Iterator<? extends CodeWriter> iter = this.iteratorOfGenerators ();
      while (iter.hasNext ())
      {
         tmpValue = (CodeWriter) iter.next ();
         this.removeFromGenerators (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_GENERATORS )
   public boolean hasInGenerators (CodeWriter value)
   {
      return ((this.generators != null) &&
              (value != null) &&
              this.generators.contains (value));
   }

   @Property( name = PROPERTY_GENERATORS )
   public ListIterator<? extends CodeWriter> iteratorOfGenerators ()
   {
      return ((this.generators == null)
              ? FEmptyListIterator.<CodeWriter>get ()
              : this.generators.listIterator());
   }

   @Property( name = PROPERTY_GENERATORS )
   public int sizeOfGenerators ()
   {
      return ((this.generators == null)
              ? 0
              : this.generators.size ());
   }
   @Property( name = PROPERTY_GENERATORS )
   public CodeWriter getFirstOfGenerators ()
   {
      if (generators == null)
      {
         return null;
      }
      else
      {
         if (generators.size() == 0) 	 
         { 	 
            return null; 	 
         }
         return (CodeWriter) generators.getFirst ();
      }
   }

   @Property( name = PROPERTY_GENERATORS )
   public CodeWriter getLastOfGenerators ()
   {
      if (generators == null)
      {
         return null;
      }
      else
      {
         if (generators.size() == 0) 	 
         { 	 
            return null; 	 
         }
         return (CodeWriter) generators.getLast ();
      }
   }
   @Property( name = PROPERTY_GENERATORS )
   public CodeWriter getFromGenerators ( int index )
   {
      if (index >= 0 && index < sizeOfGenerators ())
      {
         return (CodeWriter) this.generators.get (index);
      }
      else
      {
         throw new IllegalArgumentException ("getGeneratorsAt(" + index + ")" );
      }
   }

   @Property( name = PROPERTY_GENERATORS )
   public int indexOfGenerators ( CodeWriter value )
   {
      return ((this.generators == null)
              ? -1
              : this.generators.indexOf (value));
   }

   @Property( name = PROPERTY_GENERATORS )
   public int indexOfGenerators ( CodeWriter value, int index )
   {
      return ((this.generators == null)
   	       ? -1
   	       : this.generators.indexOf (value, index));
   }

   @Property( name = PROPERTY_GENERATORS )
   public int lastIndexOfGenerators ( CodeWriter value )
   {
      return ((this.generators == null)
               ? -1
               : this.generators.lastIndexOf (value));
   }

   @Property( name = PROPERTY_GENERATORS )
   public int lastIndexOfGenerators ( CodeWriter value, int index )
   {
      return ((this.generators == null)
               ? -1
               : this.generators.lastIndexOf (value, index));
   }

   @Property( name = PROPERTY_GENERATORS )
   public boolean isBeforeOfGenerators ( CodeWriter leftObject, CodeWriter rightObject)
   {
      if (generators == null)
      {
         return false;
      }
      else
      {
         return generators.isBefore (leftObject, rightObject);
      }
   }

   @Property( name = PROPERTY_GENERATORS )
   public boolean isAfterOfGenerators ( CodeWriter leftObject, CodeWriter rightObject)
   {
      if (generators == null)
      {
         return false;
      }
      else
      {
         return generators.isAfter (leftObject, rightObject);
      }
   }

   @Property( name = PROPERTY_GENERATORS )
   public CodeWriter getNextOfGenerators ( CodeWriter object )
   {
      if (generators == null)
      {
         return null;
      }
      else
      {
         return (CodeWriter) generators.getNextOf (object);
      }
   }

   @Property( name = PROPERTY_GENERATORS )
   public CodeWriter getNextOfGenerators ( CodeWriter object, int index)
   {
      if (generators == null)
      {
         return null;
      }
      else
      {
         return (CodeWriter) generators.getNextOf (object, index);
      }
   }

   @Property( name = PROPERTY_GENERATORS )
   public CodeWriter getPreviousOfGenerators ( CodeWriter object)
   {
      if (generators == null)
      {
         return null;
      }
      else
      {
         return (CodeWriter) generators.getPreviousOf (object);
      }
   }

   @Property( name = PROPERTY_GENERATORS )
   public CodeWriter getPreviousOfGenerators ( CodeWriter object, int index )
   {
      if (generators == null)
      {
         return null;
      }
      else
      {
         return (CodeWriter) generators.getPreviousOf (object, index);
      }
   }

   @Property( name = PROPERTY_GENERATORS )
   public boolean addAfterOfGenerators ( CodeWriter refObject, CodeWriter value)
   {
      boolean changed = false;
      if (generators != null)
      {
         int index = generators.indexOf (refObject);
         changed = addToGenerators (index+1, value);
      }
      return changed;
   }

   @Property( name = PROPERTY_GENERATORS )
   public boolean addBeforeOfGenerators ( CodeWriter refObject, CodeWriter value)
   {
      boolean changed = false;
      if (generators != null)
      {
         int index = generators.indexOf (refObject);
         changed = addToGenerators (index, value);
      }
      return changed;
   }

   @Property( name = PROPERTY_GENERATORS )
   public boolean addToGenerators (int index, CodeWriter value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.generators == null)
         {
            this.generators = new FLinkedList<CodeWriter> (); // or FTreeSet () or FLinkedList ()
         }
         int oldIndex = this.indexOfGenerators (value);
         if (oldIndex != index)
         {
            try
            {
            
               if (oldIndex > -1)
               {
                  generators.remove (oldIndex);
               }
               generators.add (index, value);
               if (oldIndex < 0)
               {
                  value.setEngine (this);
               }
               changed = true;
            
            }
            catch (IndexOutOfBoundsException ex)
            {
               return false;
            }
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_GENERATORS )
   public boolean setInGenerators (int index, CodeWriter value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.generators == null)
         {
            this.generators = new FLinkedList<CodeWriter> (); // or FTreeSet () or FLinkedList ()
         }
         int oldIndex = this.indexOfGenerators (value);
         if (oldIndex != index)
         {
            try
            {
            
               CodeWriter oldValue = (CodeWriter)this.generators.set (index, value);
               if (oldIndex > -1)
               {
                  this.generators.remove (oldIndex);
               }
               if (oldValue != value)
               {
                  if (oldValue != null)
                  {
                     oldValue.setEngine (null);
                  }
                  if (oldIndex < 0)
                  {
                     value.setEngine (this);
                  }
                  changed = true;
               }
            
            }
            catch (IndexOutOfBoundsException ex)
            {
               return false;
            }
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_GENERATORS )
   public boolean removeFromGenerators (int index)
   {
      boolean changed = false;

      if (this.generators != null && (index >= 0 && index < this.generators.size ()))
      {
      
         CodeWriter tmpValue = (CodeWriter) this.generators.remove (index);
         if (tmpValue != null)
         {
            tmpValue.setEngine (null);
            changed = true;
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_GENERATORS )
   public boolean removeFromGenerators (int index, CodeWriter value)
   {
      boolean changed = false;

      if ((this.generators != null) && (value != null) && 
          (index >= 0 && index < this.generators.size ()))
      {
         CodeWriter oldValue = (CodeWriter) this.generators.get (index);
         if (oldValue == value)
         {
         
            changed = this.removeFromGenerators (index);
         
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_GENERATORS )
   public ListIterator<? extends CodeWriter> iteratorOfGenerators ( CodeWriter  lowerBound )
   {
      ListIterator<CodeWriter> result = FEmptyListIterator.<CodeWriter>get ();

      if (generators != null && lowerBound != null)
      {
         int index = generators.indexOf (lowerBound) + 1;
         result = generators.listIterator (index);
      }
      else if (generators != null && lowerBound == null)
      {
         result = generators.listIterator (0);
      }

      return result;
   }

   @Property( name = PROPERTY_GENERATORS )
   public ListIterator<? extends CodeWriter> iteratorOfGenerators (int index)
   {
      return ((this.generators == null)
              ? FEmptyListIterator.<CodeWriter>get ()
              : this.generators.listIterator (Math.max(0,Math.min(index,this.generators.size ()))));
   }

   public MessageHandler getHandler ()
   {

      return getEngine();
   }

   /**
    * <pre>
    *           0..1     globalTemplate     0..1
    * CodeWritingEngine ------------------------> Template
    *           codeWritingEngine               globalTemplate
    * </pre>
    */
   public static final String PROPERTY_GLOBAL_TEMPLATE = "globalTemplate";

   @Property( name = PROPERTY_GLOBAL_TEMPLATE, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Template globalTemplate;

   @Property( name = PROPERTY_GLOBAL_TEMPLATE )
   public boolean setGlobalTemplate (Template value)
   {
      boolean changed = false;

      if (this.globalTemplate != value)
      {
      
         Template oldValue = this.globalTemplate;
         this.globalTemplate = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_GLOBAL_TEMPLATE )
   public CodeWritingEngine withGlobalTemplate (Template value)
   {
      setGlobalTemplate (value);
      return this;
   }

   public Template getGlobalTemplate ()
   {
      return this.globalTemplate;
   }

   /**
    * <pre>
    *           0..1     additionalInfo     0..1
    * CodeWritingEngine ------------------------- Information
    *           engine               information
    * </pre>
    */
   public static final String PROPERTY_INFORMATION = "information";

   @Property( name = PROPERTY_INFORMATION, partner = Information.PROPERTY_ENGINE, kind = ReferenceHandler.ReferenceKind.QUALIFIED_TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashMap<String, Information> information;

   @Property( name = PROPERTY_INFORMATION )
   public Map<String, ? extends Information> getInformation()
   {
      return ((this.information == null)
              ? Collections.EMPTY_MAP
              : Collections.unmodifiableMap(this.information));
   }

   @Property( name = PROPERTY_INFORMATION )
   public boolean addToInformation (Information value)
   {
      return this.addToInformation (getKeyForInformation (value), value);
   }

   @Property( name = PROPERTY_INFORMATION )
   public CodeWritingEngine withInformation (Information value)
   {
      addToInformation (value);
      return this;
   }

   public CodeWritingEngine withoutInformation (Information value)
   {
      removeFromInformation (value);
      return this;
   }


   public boolean removeFromInformation (Information value)
   {
      return removeFromInformation (getKeyForInformation (value), value);
   }

   @Property( name = PROPERTY_INFORMATION )
   public void removeAllFromInformation (){
   
      Map.Entry entry;
      Iterator iter = entriesOfInformation ();
      while (iter.hasNext ())
      {
         entry = (Map.Entry) iter.next ();
         removeFromInformation ((String) entry.getKey (), (Information) entry.getValue ());
      }
   }

   @Property( name = PROPERTY_INFORMATION )
   public boolean hasInInformation (Information value)
   {
      return (this.hasInInformation (this.getKeyForInformation (value), value));
   }

   @Property( name = PROPERTY_INFORMATION )
   public Iterator<? extends Information> iteratorOfInformation ()
   {
      return ((this.information == null)
              ? FEmptyIterator.<Information>get ()
              : this.information.values ().iterator ());
   }

   @Property( name = PROPERTY_INFORMATION )
   public int sizeOfInformation ()
   {
      return ((this.information == null)
              ? 0
              : this.information.size ());
   }

   @Property( name = PROPERTY_INFORMATION )
   public boolean hasInInformation (String key, Information value)
   {
      return ((this.information != null) &&
              (value != null || this.information.containsKey (key)) && 
              (this.information.get (key) == value));
   }

   @Property( name = PROPERTY_INFORMATION )
   public boolean hasKeyInInformation (String key)
   {
      return ((this.information != null) &&
              this.information.containsKey (key));
   }

   @Property( name = PROPERTY_INFORMATION )
   public Iterator<String> keysOfInformation ()
   {
      return ((this.information == null)
              ? FEmptyIterator.<String>get ()
              : this.information.keySet ().iterator ());
   }

   @Property( name = PROPERTY_INFORMATION )
   public Iterator entriesOfInformation ()
   {
      return ((this.information == null)
              ? FEmptyIterator.get ()
              : this.information.entrySet ().iterator ());
   }

   @Property( name = PROPERTY_INFORMATION )
   protected boolean addToInformation (String key, Information value)
   {
      boolean changed = false;

      if (this.information == null)
      {
         this.information = new FHashMap<String, Information> ();
      }
   
      Information oldValue = (Information) this.information.put (key, value);
      if (oldValue != value)
      {
         if (oldValue != null)
         {
            oldValue.setEngine (null);
         }
         if (value != null)
         {
            value.setEngine (this);
         }
         changed = true;
      }
   
      return changed;
   }

   @Property( name = PROPERTY_INFORMATION )
   protected boolean addToInformation (Map.Entry entry)
   {
      return addToInformation ((String) entry.getKey (), (Information) entry.getValue ());
   }

   @Property( name = PROPERTY_INFORMATION )
   protected boolean removeFromInformation (String key, Information value)
   {
      boolean changed = false;

      if (this.information != null)
      {
         Information oldValue = (Information) this.information.get (key);
         if (oldValue == value && 
             (oldValue != null || this.information.containsKey (key)))
         {
         
            this.information.remove (key);
            if (value != null)
            {
               value.setEngine (null);
            }
            changed = true;
         
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_INFORMATION )
   public boolean removeKeyFromInformation (String key)
   {
      boolean changed = false;

      if (this.information != null)
      {
         changed = this.information.containsKey (key);
         if (changed)
         {
         
            Information tmpValue = (Information) this.information.remove (key);
            if (tmpValue != null)
            {
               tmpValue.setEngine (null);
            }
         
         }
      }
      return changed;
   }
   @Property( name = PROPERTY_INFORMATION )
   public Information getFromInformation (String key)
   {
      return ((this.information == null)
              ? null
              : (Information) this.information.get (key));
   }
   @Property( name = PROPERTY_INFORMATION )
   public String getKeyForInformation (Information value)
   {
      return (value == null ? null : value.getType ());
   }

   @Property( name = PROPERTY_INFORMATION )
   public void keyChangedInInformation (String oldKey, Information value)
   {
      if ((this.information != null) &&  
          (oldKey != getKeyForInformation (value)))
      {
         Information oldValue = (Information) this.information.get (oldKey);
         if (oldValue == value)
         {
            this.information.remove (oldKey);
            oldValue = (Information)this.information.put (this.getKeyForInformation (value), value);
            if (oldValue != null)
            {
               oldValue.setEngine (null);
            }
         }
      }
   }

   protected abstract void initWriters ();

   /**
    * <pre>
    *           0..1     listener     0..n
    * CodeWritingEngine ------------------------- CodeWritingListener
    *           engine               listener
    * </pre>
    */
   public static final String PROPERTY_LISTENER = "listener";

   @Property( name = PROPERTY_LISTENER, partner = CodeWritingListener.PROPERTY_ENGINE, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashSet<CodeWritingListener> listener;

   @Property( name = PROPERTY_LISTENER )
   public Set<? extends CodeWritingListener> getListener()
   {
      return ((this.listener == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.listener));
   }

   @Property( name = PROPERTY_LISTENER )
   public boolean addToListener (CodeWritingListener value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.listener == null)
         {
            this.listener = new FHashSet<CodeWritingListener> ();

         }
      
         changed = this.listener.add (value);
         if (changed)
         {
            value.setEngine (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_LISTENER )
   public CodeWritingEngine withListener (CodeWritingListener value)
   {
      addToListener (value);
      return this;
   }

   public CodeWritingEngine withoutListener (CodeWritingListener value)
   {
      removeFromListener (value);
      return this;
   }


   public boolean removeFromListener (CodeWritingListener value)
   {
      boolean changed = false;

      if ((this.listener != null) && (value != null))
      {
      
         changed = this.listener.remove (value);
         if (changed)
         {
            value.setEngine (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_LISTENER )
   public void removeAllFromListener (){
   
      CodeWritingListener tmpValue;
      Iterator<? extends CodeWritingListener> iter = this.iteratorOfListener ();
      while (iter.hasNext ())
      {
         tmpValue = (CodeWritingListener) iter.next ();
         this.removeFromListener (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_LISTENER )
   public boolean hasInListener (CodeWritingListener value)
   {
      return ((this.listener != null) &&
              (value != null) &&
              this.listener.contains (value));
   }

   @Property( name = PROPERTY_LISTENER )
   public Iterator<? extends CodeWritingListener> iteratorOfListener ()
   {
      return ((this.listener == null)
              ? FEmptyIterator.<CodeWritingListener>get ()
              : this.listener.iterator ());
   }

   @Property( name = PROPERTY_LISTENER )
   public int sizeOfListener ()
   {
      return ((this.listener == null)
              ? 0
              : this.listener.size ());
   }

   public String noCode (Token token )
   {
      boolean fujaba__Success = false;
      Object _TmpObject = null;
      ASGElementTokenInterface asgToken = null;
      FElement elem = null;
      String error = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         _TmpObject = token;

         // ensure correct type and really bound of object asgToken
         JavaSDM.ensure ( _TmpObject instanceof ASGElementTokenInterface );
         asgToken = (ASGElementTokenInterface) _TmpObject;

         // search to-one link element from asgToken to elem
         elem = asgToken.getElement ();

         // check object elem is really bound
         JavaSDM.ensure ( elem != null );


         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         // story pattern 
         try 
         {
            fujaba__Success = false; 

            // collabStat call
            //error = "// can not generate code for " + token.getClass().getName() + " for element " + elem.getClass().getName() + "\n";
            error = "";
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }


      }
      else
      {
         // story pattern 
         try 
         {
            fujaba__Success = false; 

            // collabStat call
            //error = "// can not generate code for " + token.getClass().getName() + "\n";
            error = "";
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }


      }
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         this.error (error, elem);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return error;
   }

   public static final String PROPERTY_TARGET_NAME = "targetName";

   @Property( name = PROPERTY_TARGET_NAME, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String targetName;

   @Property( name = PROPERTY_TARGET_NAME )
   public void setTargetName (String value)
   {
      this.targetName = value;
   }

   public CodeWritingEngine withTargetName (String value)
   {
      setTargetName (value);
      return this;
   }

   @Property( name = PROPERTY_TARGET_NAME )
   public String getTargetName ()
   {
      return this.targetName;
   }

   /**
    * <pre>
    *           0..1     template loader     0..1
    * CodeWritingEngine ------------------------- TemplateLoader
    *           codeWritingEngine               templateLoader
    * </pre>
    */
   public static final String PROPERTY_TEMPLATE_LOADER = "templateLoader";

   @Property( name = PROPERTY_TEMPLATE_LOADER, partner = TemplateLoader.PROPERTY_CODE_WRITING_ENGINE, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private TemplateLoader templateLoader;

   @Property( name = PROPERTY_TEMPLATE_LOADER )
   public boolean setTemplateLoader (TemplateLoader value)
   {
      boolean changed = false;

      if (this.templateLoader != value)
      {
      
         TemplateLoader oldValue = this.templateLoader;
         CodeWritingEngine source = this;
         if (this.templateLoader != null)
         {
            this.templateLoader = null;
            oldValue.setCodeWritingEngine (null);
         }
         this.templateLoader = value;

         if (value != null)
         {
            value.setCodeWritingEngine (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TEMPLATE_LOADER )
   public CodeWritingEngine withTemplateLoader (TemplateLoader value)
   {
      setTemplateLoader (value);
      return this;
   }

   public TemplateLoader getTemplateLoader ()
   {
      return this.templateLoader;
   }

   public void removeYou()
   {
      this.removeAllFromDirs ();
      this.setEngine (null);
      this.removeAllFromGenerators ();
      this.setGlobalTemplate (null);
      this.removeAllFromInformation ();
      this.removeAllFromListener ();
      this.setTemplateLoader (null);
      super.removeYou ();
   }
}


