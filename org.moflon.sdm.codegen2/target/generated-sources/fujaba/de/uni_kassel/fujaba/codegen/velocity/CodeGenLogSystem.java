/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.velocity;
import org.apache.velocity.context.Context;
import org.apache.velocity.runtime.RuntimeServices;
import org.apache.velocity.runtime.log.LogSystem;

import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.fujaba.codegen.engine.CodeWritingEngine;
import de.uni_kassel.fujaba.codegen.engine.TemplateLoader;
import de.uni_paderborn.fujaba.metamodel.common.FElement;
import de.upb.tools.sdm.JavaSDM; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDMException;


public class CodeGenLogSystem implements LogSystem
{


   public void init (RuntimeServices rs )
   {
      boolean fujaba__Success = false;
      Object _TmpObject = null;
      TemplateLoader loader = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         _TmpObject = rs.getConfiguration().get ("file.resource.loader." + TemplateLoader.PROPERTY_KEY);

         // ensure correct type and really bound of object loader
         JavaSDM.ensure ( _TmpObject instanceof TemplateLoader );
         loader = (TemplateLoader) _TmpObject;

         // create link logSystem from this to loader
         this.setTemplateLoader (loader);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   public void logVelocityMessage (int level , String message )
   {
      boolean fujaba__Success = false;
      CodeWritingEngine engine = null;
      TemplateLoader loader = null;
      Context context = null;
      Object _TmpObject = null;
      FElement elem = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // search to-one link logSystem from this to loader
         loader = this.getTemplateLoader ();

         // check object loader is really bound
         JavaSDM.ensure ( loader != null );

         // search to-one link template loader from loader to engine
         engine = loader.getCodeWritingEngine ();

         // check object engine is really bound
         JavaSDM.ensure ( engine != null );



         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object loader is really bound
         JavaSDM.ensure ( loader != null );
         // search to-one link context from loader to context
         context = loader.getContext ();

         // check object context is really bound
         JavaSDM.ensure ( context != null );


         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         // story pattern 
         try 
         {
            fujaba__Success = false; 

            _TmpObject = context.get("elem");

            // ensure correct type and really bound of object elem
            JavaSDM.ensure ( _TmpObject instanceof FElement );
            elem = (FElement) _TmpObject;

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }


      }
      if ( level == LogSystem.ERROR_ID )
      {
         // story pattern successor
         try 
         {
            fujaba__Success = false; 

            // check object engine is really bound
            JavaSDM.ensure ( engine != null );
            // collabStat call
            engine.error ("Velocity: " + message, elem);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         return ;

      }
      if ( !( level == LogSystem.WARN_ID ) )
      {
         return ;

      }
      if ( message.startsWith( "Warning! The iterative  is an") )
      {
         return ;

      }
      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // check object engine is really bound
         JavaSDM.ensure ( engine != null );
         // collabStat call
         engine.warning ("Velocity: " + message, elem);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   /**
    * <pre>
    *           0..1     logSystem     0..1
    * CodeGenLogSystem ------------------------- TemplateLoader
    *           logSystem               templateLoader
    * </pre>
    */
   public static final String PROPERTY_TEMPLATE_LOADER = "templateLoader";

   @Property( name = PROPERTY_TEMPLATE_LOADER, partner = TemplateLoader.PROPERTY_LOG_SYSTEM, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private TemplateLoader templateLoader;

   @Property( name = PROPERTY_TEMPLATE_LOADER )
   public boolean setTemplateLoader (TemplateLoader value)
   {
      boolean changed = false;

      if (this.templateLoader != value)
      {
      
         TemplateLoader oldValue = this.templateLoader;
         CodeGenLogSystem source = this;
         if (this.templateLoader != null)
         {
            this.templateLoader = null;
            oldValue.setLogSystem (null);
         }
         this.templateLoader = value;

         if (value != null)
         {
            value.setLogSystem (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TEMPLATE_LOADER )
   public CodeGenLogSystem withTemplateLoader (TemplateLoader value)
   {
      setTemplateLoader (value);
      return this;
   }

   public TemplateLoader getTemplateLoader ()
   {
      return this.templateLoader;
   }

   public void removeYou()
   {
      this.setTemplateLoader (null);
   }
}


