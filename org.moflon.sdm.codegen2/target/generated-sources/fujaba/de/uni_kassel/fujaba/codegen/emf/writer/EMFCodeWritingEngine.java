/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.emf.writer;

import de.uni_kassel.fujaba.codegen.classdiag.ASGElementCodeWriter;
import de.uni_kassel.fujaba.codegen.classdiag.FStyledElementCodeWriter;
import de.uni_kassel.fujaba.codegen.classdiag.ImportInformation;
import de.uni_kassel.fujaba.codegen.classdiag.InformationResetter;
import de.uni_kassel.fujaba.codegen.engine.CodeToFileFromContextWriter;
import de.uni_kassel.fujaba.codegen.engine.CodeWritingEngine;
import de.uni_paderborn.fujaba.metamodel.common.FFile;
import de.uni_paderborn.fujaba.metamodel.common.FProject;
import de.uni_paderborn.fujaba.metamodel.structure.FAttr;
import de.uni_paderborn.fujaba.metamodel.structure.FClass;
import de.uni_paderborn.fujaba.metamodel.structure.FMethod;
import de.uni_paderborn.fujaba.metamodel.structure.FPackage;
import de.uni_paderborn.fujaba.metamodel.structure.FRole;
import de.uni_paderborn.fujaba.uml.behavior.UMLActivityDiagram;
import de.upb.tools.sdm.JavaSDM; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDMException;


public class EMFCodeWritingEngine extends CodeWritingEngine
{


   public  EMFCodeWritingEngine ()
   {

      super ("emf");
   }

   protected void initWriters ()
   {
      boolean fujaba__Success = false;
      Class packageClass = null;
      Class projectClass = null;
      CodeToFileFromContextWriter projectFileWriter = null;
      ImportInformation imports = null;
      InformationResetter importsResetter = null;
      RootPackageInformation rootPackages = null;
      RootPackageInformationResetter packageResetter = null;
      Class actDiagClass = null;
      Class attrClass = null;
      Class clazz = null;
      Class fileClass = null;
      Class methodClass = null;
      Class roleClass = null;
      ProjectStyledElementWriter projectWriter = null;
      ASGElementCodeWriter methodWriter = null;
      ASGElementCodeWriter fileWriter = null;
      FStyledElementCodeWriter classWriter = null;
      ASGElementCodeWriter assocWriter = null;
      ASGElementCodeWriter removeYouWriter = null;
      ASGElementCodeWriter attrWriter = null;
      ASGElementCodeWriter storyDiagWriter = null;
      PackageStyledElementWriter packageWriter = null;
      ASGElementCodeWriter noProj = null;
      ASGElementCodeWriter noClass = null;
      ASGElementCodeWriter noPackage = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         packageClass = FPackage.class;

         // check object packageClass is really bound
         JavaSDM.ensure ( packageClass != null );
         projectClass = FProject.class;

         // check object projectClass is really bound
         JavaSDM.ensure ( projectClass != null );
         // check isomorphic binding between objects projectClass and packageClass
         JavaSDM.ensure ( !projectClass.equals (packageClass) );

         // create object projectFileWriter
         projectFileWriter = new CodeToFileFromContextWriter ( );

         // create object imports
         imports = new ImportInformation ( );

         // create object importsResetter
         importsResetter = new InformationResetter ( );

         // create object rootPackages
         rootPackages = new RootPackageInformation ( );

         // create object packageResetter
         packageResetter = new RootPackageInformationResetter ( );

         // assign attribute projectFileWriter
         projectFileWriter.setExtender (".ecore");
         // assign attribute imports
         imports.setType ("imports");
         // assign attribute importsResetter
         importsResetter.setInformationType ("imports");
         // assign attribute rootPackages
         rootPackages.setType ("rootPackages");
         // assign attribute packageResetter
         packageResetter.setInformationType ("rootPackages");
         // create link generators from projectFileWriter to this
         projectFileWriter.setEngine (this);

         // create link additionalInfo from imports to this
         imports.setEngine (this);

         // create link generators from importsResetter to this
         importsResetter.setEngine (this);

         // create link additionalInfo from rootPackages to this
         rootPackages.setEngine (this);

         // create link generators from packageResetter to this
         packageResetter.setEngine (this);

         // create link responsibleFor from projectFileWriter to packageClass
         projectFileWriter.setResponsible (packageClass);

         // create link responsibleFor from importsResetter to projectClass
         importsResetter.setResponsible (projectClass);

         // create link responsibleFor from packageResetter to projectClass
         packageResetter.setResponsible (projectClass);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         actDiagClass = UMLActivityDiagram.class;

         // check object actDiagClass is really bound
         JavaSDM.ensure ( actDiagClass != null );
         attrClass = FAttr.class;

         // check object attrClass is really bound
         JavaSDM.ensure ( attrClass != null );
         clazz = FClass.class;

         // check object clazz is really bound
         JavaSDM.ensure ( clazz != null );
         fileClass = FFile.class;

         // check object fileClass is really bound
         JavaSDM.ensure ( fileClass != null );
         methodClass = FMethod.class;

         // check object methodClass is really bound
         JavaSDM.ensure ( methodClass != null );
         packageClass = FPackage.class;

         // check object packageClass is really bound
         JavaSDM.ensure ( packageClass != null );
         roleClass = FRole.class;

         // check object roleClass is really bound
         JavaSDM.ensure ( roleClass != null );
         // check object projectClass is really bound
         JavaSDM.ensure ( projectClass != null );
         // check isomorphic binding between objects attrClass and actDiagClass
         JavaSDM.ensure ( !attrClass.equals (actDiagClass) );

         // check isomorphic binding between objects clazz and actDiagClass
         JavaSDM.ensure ( !clazz.equals (actDiagClass) );

         // check isomorphic binding between objects fileClass and actDiagClass
         JavaSDM.ensure ( !fileClass.equals (actDiagClass) );

         // check isomorphic binding between objects methodClass and actDiagClass
         JavaSDM.ensure ( !methodClass.equals (actDiagClass) );

         // check isomorphic binding between objects packageClass and actDiagClass
         JavaSDM.ensure ( !packageClass.equals (actDiagClass) );

         // check isomorphic binding between objects projectClass and actDiagClass
         JavaSDM.ensure ( !projectClass.equals (actDiagClass) );

         // check isomorphic binding between objects roleClass and actDiagClass
         JavaSDM.ensure ( !roleClass.equals (actDiagClass) );

         // check isomorphic binding between objects clazz and attrClass
         JavaSDM.ensure ( !clazz.equals (attrClass) );

         // check isomorphic binding between objects fileClass and attrClass
         JavaSDM.ensure ( !fileClass.equals (attrClass) );

         // check isomorphic binding between objects methodClass and attrClass
         JavaSDM.ensure ( !methodClass.equals (attrClass) );

         // check isomorphic binding between objects packageClass and attrClass
         JavaSDM.ensure ( !packageClass.equals (attrClass) );

         // check isomorphic binding between objects projectClass and attrClass
         JavaSDM.ensure ( !projectClass.equals (attrClass) );

         // check isomorphic binding between objects roleClass and attrClass
         JavaSDM.ensure ( !roleClass.equals (attrClass) );

         // check isomorphic binding between objects fileClass and clazz
         JavaSDM.ensure ( !fileClass.equals (clazz) );

         // check isomorphic binding between objects methodClass and clazz
         JavaSDM.ensure ( !methodClass.equals (clazz) );

         // check isomorphic binding between objects packageClass and clazz
         JavaSDM.ensure ( !packageClass.equals (clazz) );

         // check isomorphic binding between objects projectClass and clazz
         JavaSDM.ensure ( !projectClass.equals (clazz) );

         // check isomorphic binding between objects roleClass and clazz
         JavaSDM.ensure ( !roleClass.equals (clazz) );

         // check isomorphic binding between objects methodClass and fileClass
         JavaSDM.ensure ( !methodClass.equals (fileClass) );

         // check isomorphic binding between objects packageClass and fileClass
         JavaSDM.ensure ( !packageClass.equals (fileClass) );

         // check isomorphic binding between objects projectClass and fileClass
         JavaSDM.ensure ( !projectClass.equals (fileClass) );

         // check isomorphic binding between objects roleClass and fileClass
         JavaSDM.ensure ( !roleClass.equals (fileClass) );

         // check isomorphic binding between objects packageClass and methodClass
         JavaSDM.ensure ( !packageClass.equals (methodClass) );

         // check isomorphic binding between objects projectClass and methodClass
         JavaSDM.ensure ( !projectClass.equals (methodClass) );

         // check isomorphic binding between objects roleClass and methodClass
         JavaSDM.ensure ( !roleClass.equals (methodClass) );

         // check isomorphic binding between objects projectClass and packageClass
         JavaSDM.ensure ( !projectClass.equals (packageClass) );

         // check isomorphic binding between objects roleClass and packageClass
         JavaSDM.ensure ( !roleClass.equals (packageClass) );

         // check isomorphic binding between objects roleClass and projectClass
         JavaSDM.ensure ( !roleClass.equals (projectClass) );

         // create object projectWriter
         projectWriter = new ProjectStyledElementWriter ( );

         // create object methodWriter
         methodWriter = new ASGElementCodeWriter ( );

         // create object fileWriter
         fileWriter = new ASGElementCodeWriter ( );

         // create object classWriter
         classWriter = new FStyledElementCodeWriter ( );

         // create object assocWriter
         assocWriter = new ASGElementCodeWriter ( );

         // create object removeYouWriter
         removeYouWriter = new ASGElementCodeWriter ( );

         // create object attrWriter
         attrWriter = new ASGElementCodeWriter ( );

         // create object storyDiagWriter
         storyDiagWriter = new ASGElementCodeWriter ( );

         // create object packageWriter
         packageWriter = new PackageStyledElementWriter ( );

         // assign attribute methodWriter
         methodWriter.setTemplateName ("classDiag/method/declaration.vm");
         // assign attribute assocWriter
         assocWriter.setTemplateName ("classDiag/assoc/declaration.vm");
         // assign attribute attrWriter
         attrWriter.setTemplateName ("classDiag/attribute/primitive.vm");
         // assign attribute projectWriter
         projectWriter.setStereotypeText ("emf");
         // assign attribute classWriter
         classWriter.setTemplateName ("classDiag/class/declaration.vm");
         // assign attribute classWriter
         classWriter.setStereotypeText ("emf");
         // assign attribute storyDiagWriter
         storyDiagWriter.setGenerateCodeForChildren (false);
         // assign attribute removeYouWriter
         removeYouWriter.setContext ("removeYou");
         // assign attribute packageWriter
         packageWriter.setTemplateName ("classDiag/class/package.vm");
         // assign attribute packageWriter
         packageWriter.setStereotypeText ("emf");
         // create link generators from projectWriter to this
         projectWriter.setEngine (this);

         // create link generators from methodWriter to this
         methodWriter.setEngine (this);

         // create link generators from fileWriter to this
         fileWriter.setEngine (this);

         // create link generators from classWriter to this
         classWriter.setEngine (this);

         // create link generators from assocWriter to this
         assocWriter.setEngine (this);

         // create link generators from removeYouWriter to this
         removeYouWriter.setEngine (this);

         // create link generators from attrWriter to this
         attrWriter.setEngine (this);

         // create link generators from storyDiagWriter to this
         storyDiagWriter.setEngine (this);

         // create link generators from packageWriter to this
         packageWriter.setEngine (this);

         // create link responsibleFor from projectWriter to projectClass
         projectWriter.setResponsible (projectClass);

         // create link responsibleFor from methodWriter to methodClass
         methodWriter.setResponsible (methodClass);

         // create link responsibleFor from fileWriter to fileClass
         fileWriter.setResponsible (fileClass);

         // create link responsibleFor from classWriter to clazz
         classWriter.setResponsible (clazz);

         // create link responsibleFor from assocWriter to roleClass
         assocWriter.setResponsible (roleClass);

         // create link responsibleFor from removeYouWriter to roleClass
         removeYouWriter.setResponsible (roleClass);

         // create link responsibleFor from attrWriter to attrClass
         attrWriter.setResponsible (attrClass);

         // create link responsibleFor from storyDiagWriter to actDiagClass
         storyDiagWriter.setResponsible (actDiagClass);

         // create link responsibleFor from packageWriter to packageClass
         packageWriter.setResponsible (packageClass);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object clazz is really bound
         JavaSDM.ensure ( clazz != null );
         // check object packageClass is really bound
         JavaSDM.ensure ( packageClass != null );
         // check object projectClass is really bound
         JavaSDM.ensure ( projectClass != null );
         // check isomorphic binding between objects packageClass and clazz
         JavaSDM.ensure ( !packageClass.equals (clazz) );

         // check isomorphic binding between objects projectClass and clazz
         JavaSDM.ensure ( !projectClass.equals (clazz) );

         // check isomorphic binding between objects projectClass and packageClass
         JavaSDM.ensure ( !projectClass.equals (packageClass) );

         // create object noProj
         noProj = new ASGElementCodeWriter ( );

         // create object noClass
         noClass = new ASGElementCodeWriter ( );

         // create object noPackage
         noPackage = new ASGElementCodeWriter ( );

         // assign attribute noClass
         noClass.setGenerateCodeForChildren (false);
         // assign attribute noProj
         noProj.setGenerateCodeForChildren (false);
         // assign attribute noPackage
         noPackage.setGenerateCodeForChildren (false);
         // create link responsibleFor from noPackage to packageClass
         noPackage.setResponsible (packageClass);

         // create link generators from noProj to this
         noProj.setEngine (this);

         // create link generators from noClass to this
         noClass.setEngine (this);

         // create link generators from noPackage to this
         noPackage.setEngine (this);

         // create link responsibleFor from noProj to projectClass
         noProj.setResponsible (projectClass);

         // create link responsibleFor from noClass to clazz
         noClass.setResponsible (clazz);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

}


