/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.engine;
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.fujaba.codegen.engine.message.MessageHandler;
import de.uni_kassel.fujaba.codegen.engine.message.MessageHandlerDelegate;
import de.uni_kassel.fujaba.codegen.rules.Token;
import de.uni_paderborn.fujaba.metamodel.common.FElement;
import de.upb.tools.sdm.JavaSDM; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDMException;


public abstract class TokenCreationEngine extends MessageHandlerDelegate
{


   public abstract Token createToken (FElement element );

   public void createToken (FElement element , Token parent )
   {
      boolean fujaba__Success = false;
      TokenMutatorTemplateEngine codegen = null;
      TokenCreationEngine engine = null;
      Token token = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // search to-one link tokenCreators from this to codegen
         codegen = this.getEngine ();

         // check object codegen is really bound
         JavaSDM.ensure ( codegen != null );


         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         engine = codegen.getEngineFor (element);

         // check object engine is really bound
         JavaSDM.ensure ( engine != null );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         token = engine.createToken (element);

         // check object token is really bound
         JavaSDM.ensure ( token != null );
         // check object parent is really bound
         JavaSDM.ensure ( parent != null );
         // check isomorphic binding between objects token and parent
         JavaSDM.ensure ( !token.equals (parent) );

         // create link children from token to parent
         token.setParent (parent);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   /**
    * <pre>
    *           0..n     tokenCreators     0..1
    * TokenCreationEngine ------------------------- TokenMutatorTemplateEngine
    *           tokenCreators               engine
    * </pre>
    */
   public static final String PROPERTY_ENGINE = "engine";

   @Property( name = PROPERTY_ENGINE, partner = TokenMutatorTemplateEngine.PROPERTY_TOKEN_CREATORS, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private TokenMutatorTemplateEngine engine;

   @Property( name = PROPERTY_ENGINE )
   public boolean setEngine (TokenMutatorTemplateEngine value)
   {
      boolean changed = false;

      if (this.engine != value)
      {
      
         TokenMutatorTemplateEngine oldValue = this.engine;
         TokenCreationEngine source = this;
         if (this.engine != null)
         {
            this.engine = null;
            oldValue.removeFromTokenCreators (this);
         }
         this.engine = value;

         if (value != null)
         {
            value.addToTokenCreators (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ENGINE )
   public TokenCreationEngine withEngine (TokenMutatorTemplateEngine value)
   {
      setEngine (value);
      return this;
   }

   public TokenMutatorTemplateEngine getEngine ()
   {
      return this.engine;
   }

   public MessageHandler getHandler ()
   {

      return getEngine();
   }

   public abstract boolean isResponsible (FElement element );

   public void removeYou()
   {
      this.setEngine (null);
      super.removeYou ();
   }
}


