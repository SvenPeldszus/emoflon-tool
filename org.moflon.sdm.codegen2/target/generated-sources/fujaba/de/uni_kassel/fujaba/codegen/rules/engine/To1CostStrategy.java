/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.rules.engine;
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.fujaba.codegen.rules.Token;
import de.uni_kassel.fujaba.codegen.rules.UMLLinkRef;
import de.uni_kassel.fujaba.codegen.rules.UMLObjectRef;
import de.uni_paderborn.fujaba.metamodel.structure.FCardinality;
import de.uni_paderborn.fujaba.metamodel.structure.FRole;
import de.uni_paderborn.fujaba.uml.behavior.UMLLink;
import de.uni_paderborn.fujaba.uml.behavior.UMLObject;
import de.upb.tools.sdm.JavaSDM;
import de.upb.tools.sdm.JavaSDMException; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public class To1CostStrategy extends LinkOperationCostStrategy
{


   public static final String PROPERTY_GE_T_COST = "GET_COST";

   @Property( name = PROPERTY_GE_T_COST, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   public static final double GET_COST = 0.5;


   public static final String PROPERTY_PU_T_COST = "PUT_COST";

   @Property( name = PROPERTY_PU_T_COST, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   public static final double PUT_COST = 0.5;


   public double getCheckCost (double payload )
   {

      return getSearchCost (payload);
   }

   public double getCreateCost (UMLLinkRef linkRef , UMLObjectRef from , double payload )
   {
      boolean fujaba__Success = false;
      double cost = 0.0;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         cost = cost + getCreateBackRefCost (linkRef, from);
         // collabStat call
         cost = ASSIGN_COST;
         // collabStat call
         cost = cost + payload * getDestroyBackRefCost (linkRef, from);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return cost;
   }

   public double getDestroyCost (UMLLinkRef linkRef , UMLObjectRef from , double payload )
   {
      boolean fujaba__Success = false;
      double cost = 0.0;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         cost = ASSIGN_COST;
         // collabStat call
         cost = cost + getDestroyBackRefCost (linkRef, from);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return cost;
   }

   public double getSearchCost (double payload )
   {

      return GET_COST*(0.5+payload) + COMPARE_COST;
   }

   public boolean isResponsibleImpl (Token operation , UMLLink link , UMLObject target , FRole sourceRole , FRole targetRole )
   {
      boolean fujaba__Success = false;
      FCardinality card = null;

      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // check object sourceRole is really bound
         JavaSDM.ensure ( sourceRole != null );
         // check object targetRole is really bound
         JavaSDM.ensure ( targetRole != null );
         // check isomorphic binding between objects targetRole and sourceRole
         JavaSDM.ensure ( !targetRole.equals (sourceRole) );

         // negative check for link qualifier from sourceRole
         JavaSDM.ensure (sourceRole.getQualifier () == null);
         // search to-one link card from targetRole to card
         card = targetRole.getCard ();

         // check object card is really bound
         JavaSDM.ensure ( card != null );

         // attribute condition upperBound == 1
         JavaSDM.ensure ( card.getUpperBound () == 1 );


         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return false;

      }
      return true;
   }

}


