/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.rules;
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_paderborn.fujaba.metamodel.common.FElement;
import de.uni_paderborn.fujaba.uml.behavior.UMLObject;
import de.upb.tools.sdm.JavaSDM; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDMException;


public abstract class ObjectOperation extends Operation implements ASGElementTokenInterface
{


   public FElement getElement ()
   {
      boolean fujaba__Success = false;
      UMLObject obj = null;
      UMLObjectRef ref = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // search to-one link subject from this to ref
         ref = this.getSubject ();

         // check object ref is really bound
         JavaSDM.ensure ( ref != null );

         // search to-one link ref from ref to obj
         obj = ref.getRef ();

         // check object obj is really bound
         JavaSDM.ensure ( obj != null );



         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return obj;
   }

   /**
    * <pre>
    *           0..n     subject     0..1
    * ObjectOperation ------------------------- UMLObjectRef
    *           subjectOf               subject
    * </pre>
    */
   public static final String PROPERTY_SUBJECT = "subject";

   @Property( name = PROPERTY_SUBJECT, partner = UMLObjectRef.PROPERTY_SUBJECT_OF, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private UMLObjectRef subject;

   @Property( name = PROPERTY_SUBJECT )
   public boolean setSubject (UMLObjectRef value)
   {
      boolean changed = false;

      if (this.subject != value)
      {
      
         UMLObjectRef oldValue = this.subject;
         ObjectOperation source = this;
         if (this.subject != null)
         {
            this.subject = null;
            oldValue.removeFromSubjectOf (this);
         }
         this.subject = value;

         if (value != null)
         {
            value.addToSubjectOf (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_SUBJECT )
   public ObjectOperation withSubject (UMLObjectRef value)
   {
      setSubject (value);
      return this;
   }

   public UMLObjectRef getSubject ()
   {
      return this.subject;
   }

   public void removeYou()
   {
      this.setSubject (null);
      super.removeYou ();
   }
}


