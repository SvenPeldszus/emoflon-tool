/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.rules.engine;
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.fujaba.codegen.rules.Operation;
import de.upb.tools.sdm.JavaSDM; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDMException;


public class OperationCostComparator extends OperationComparator
{


   public int compare (Object o1 , Object o2 )
   {
      boolean fujaba__Success = false;
      ExecutionPlanEngine planEngine = null;
      Object _TmpObject = null;
      Operation op1 = null;
      double cost1 = 0.0;
      Operation op2 = null;
      double cost2 = 0.0;
      int result = 0;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // search to-one link planEngine from this to planEngine
         planEngine = this.getPlanEngine ();

         // check object planEngine is really bound
         JavaSDM.ensure ( planEngine != null );


         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         _TmpObject = o1;

         // ensure correct type and really bound of object op1
         JavaSDM.ensure ( _TmpObject instanceof Operation );
         op1 = (Operation) _TmpObject;

         // check object planEngine is really bound
         JavaSDM.ensure ( planEngine != null );
         // collabStat call
         cost1 = planEngine.getSubtreeCost (op1);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         _TmpObject = o2;

         // ensure correct type and really bound of object op2
         JavaSDM.ensure ( _TmpObject instanceof Operation );
         op2 = (Operation) _TmpObject;

         // check object planEngine is really bound
         JavaSDM.ensure ( planEngine != null );
         // collabStat call
         cost2 = planEngine.getSubtreeCost (op2);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( cost1 == cost2 ) )
      {
         if ( cost1 < cost2 )
         {
            return -1;

         }
         return 1;

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         result = super.compare( o1, o2 );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return result;
   }

   /**
    * <pre>
    *           0..1     planEngine     0..1
    * OperationCostComparator ------------------------> ExecutionPlanEngine
    *           operationCostComparator               planEngine
    * </pre>
    */
   public static final String PROPERTY_PLAN_ENGINE = "planEngine";

   @Property( name = PROPERTY_PLAN_ENGINE, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private ExecutionPlanEngine planEngine;

   @Property( name = PROPERTY_PLAN_ENGINE )
   public boolean setPlanEngine (ExecutionPlanEngine value)
   {
      boolean changed = false;

      if (this.planEngine != value)
      {
      
         ExecutionPlanEngine oldValue = this.planEngine;
         this.planEngine = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PLAN_ENGINE )
   public OperationCostComparator withPlanEngine (ExecutionPlanEngine value)
   {
      setPlanEngine (value);
      return this;
   }

   public ExecutionPlanEngine getPlanEngine ()
   {
      return this.planEngine;
   }

   public void removeYou()
   {
      this.setPlanEngine (null);
      super.removeYou ();
   }
}


