/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.dlr.writer;
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.fujaba.codegen.CodeWriter;
import de.uni_kassel.fujaba.codegen.classdiag.ASGElementToken;
import de.uni_kassel.fujaba.codegen.dlr.DLRProjectToken;
import de.uni_kassel.fujaba.codegen.dlr.DLRTool;
import de.uni_kassel.fujaba.codegen.dlr.writer.xml.DLRXMLExporter;
import de.uni_kassel.fujaba.codegen.engine.CodeWritingEngine;
import de.uni_kassel.fujaba.codegen.rules.Token;
import de.uni_paderborn.fujaba.uml.common.UMLProject;
import de.upb.tools.sdm.JavaSDM; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDMException;


public class ProjectDLRCodeWriter extends CodeWriter
{


   /**
    * <pre>
    *           0..1     exporter     0..1
    * ProjectDLRCodeWriter ------------------------> DLRXMLExporter
    *           projectDLRCodeWriter               exporter
    * </pre>
    */
   public static final String PROPERTY_EXPORTER = "exporter";

   @Property( name = PROPERTY_EXPORTER, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private DLRXMLExporter exporter;

   @Property( name = PROPERTY_EXPORTER )
   public boolean setExporter (DLRXMLExporter value)
   {
      boolean changed = false;

      if (this.exporter != value)
      {
      
         DLRXMLExporter oldValue = this.exporter;
         this.exporter = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_EXPORTER )
   public ProjectDLRCodeWriter withExporter (DLRXMLExporter value)
   {
      setExporter (value);
      return this;
   }

   public DLRXMLExporter getExporter ()
   {
      return this.exporter;
   }

   public String generateCode (Token operation )
   {
      boolean fujaba__Success = false;
      Object _TmpObject = null;
      ASGElementToken asgToken = null;
      UMLProject project = null;
      DLRTool tool = null;
      DLRProjectToken tree = null;
      CodeWritingEngine codegen = null;
      String code = null;
      DLRXMLExporter cwe = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         _TmpObject = operation;

         // ensure correct type and really bound of object asgToken
         JavaSDM.ensure ( _TmpObject instanceof ASGElementToken );
         asgToken = (ASGElementToken) _TmpObject;

         // search to-one link element from asgToken to project
         _TmpObject = asgToken.getElement ();

         // ensure correct type and really bound of object project
         JavaSDM.ensure ( _TmpObject instanceof UMLProject );
         project = (UMLProject) _TmpObject;



         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return null;

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         tool = DLRTool.get();

         // check object tool is really bound
         JavaSDM.ensure ( tool != null );
         // search to-one link current from tool to tree
         _TmpObject = tool.getToken ();

         // ensure correct type and really bound of object tree
         JavaSDM.ensure ( _TmpObject instanceof DLRProjectToken );
         tree = (DLRProjectToken) _TmpObject;


         // check link projects from tool to tree
         JavaSDM.ensure (tree.equals (tool.getFromProjects (project)));


         // destroy link projects from tool to tree
         tool.removeFromProjects (project, tree);
         // destroy link current from tool to tree
         tool.setToken (null);
         // delete object tree
         tree.removeYou ();

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern Successor of 
      try 
      {
         fujaba__Success = false; 

         // check object tool is really bound
         JavaSDM.ensure ( tool != null );
         // assign attribute tool
         tool.setIncludeDLR (true);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // search to-one link generators from this to codegen
         codegen = this.getEngine ();

         // check object codegen is really bound
         JavaSDM.ensure ( codegen != null );


         // collabStat call
         code = codegen.generateCode (operation, this);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object tool is really bound
         JavaSDM.ensure ( tool != null );
         // search to-one link exporter from this to cwe
         cwe = this.getExporter ();



         // search to-one link projects from tool to tree
         tree = tool.getFromProjects (project);

         // check object tree is really bound
         JavaSDM.ensure ( tree != null );


         // attribute condition exportDLR == true
         JavaSDM.ensure ( tool.isExportDLR () == true );

         // create object cwe
         if (cwe == null)
         {
         cwe = new DLRXMLExporter("dlr");

         }

         // check optional
         if (cwe != null)
         {
            // create link exporter from this to cwe
            this.setExporter (cwe);

            // collabStat call
            cwe.generateCode (tree);
         }   fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object tool is really bound
         JavaSDM.ensure ( tool != null );
         // assign attribute tool
         tool.setIncludeDLR (false);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return code;
   }

   public void removeYou()
   {
      this.setExporter (null);
      super.removeYou ();
   }
}


