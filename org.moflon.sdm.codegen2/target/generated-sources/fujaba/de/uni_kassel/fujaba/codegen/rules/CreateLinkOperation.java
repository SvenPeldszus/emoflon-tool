/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.rules;
import java.util.Iterator;

import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_paderborn.fujaba.uml.behavior.UMLMultiLink;
import de.upb.tools.sdm.JavaSDM; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDMException;


public class CreateLinkOperation extends LinkLifecycleOperation
{


   public LinkOperation getReverseOperation ()
   {
      boolean fujaba__Success = false;
      Iterator fujaba__IterNeedsToReverse = null;
      Object _TmpObject = null;
      CreateLinkOperation reverse = null;
      Iterator fujaba__IterThisToNeeds = null;
      UMLObjectRef needs = null;
      UMLObjectRef subject = null;
      UMLLinkRef link = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // search to-one link link from this to link
         link = this.getLink ();

         // check object link is really bound
         JavaSDM.ensure ( link != null );

         // search to-one link subject from this to subject
         subject = this.getSubject ();

         // check object subject is really bound
         JavaSDM.ensure ( subject != null );

         // iterate to-many link needs from this to needs
         fujaba__Success = false;
         fujaba__IterThisToNeeds = this.iteratorOfNeeds ();

         while ( !(fujaba__Success) && fujaba__IterThisToNeeds.hasNext () )
         {
            try
            {
               needs = (UMLObjectRef) fujaba__IterThisToNeeds.next ();

               // check object needs is really bound
               JavaSDM.ensure ( needs != null );
               // check isomorphic binding between objects subject and needs
               JavaSDM.ensure ( !subject.equals (needs) );

               // iterate to-many link subject from needs to reverse
               fujaba__Success = false;
               fujaba__IterNeedsToReverse = needs.iteratorOfSubjectOf ();

               while ( !(fujaba__Success) && fujaba__IterNeedsToReverse.hasNext () )
               {
                  try
                  {
                     _TmpObject =  fujaba__IterNeedsToReverse.next ();

                     // ensure correct type and really bound of object reverse
                     JavaSDM.ensure ( _TmpObject instanceof CreateLinkOperation );
                     reverse = (CreateLinkOperation) _TmpObject;

                     // check isomorphic binding between objects this and reverse
                     JavaSDM.ensure ( !this.equals (reverse) );

                     // check link link from reverse to link
                     JavaSDM.ensure (link.equals (reverse.getLink ()));

                     // check link needs from reverse to subject
                     JavaSDM.ensure (reverse.hasInNeeds (subject));


                     fujaba__Success = true;
                  }
                  catch ( JavaSDMException fujaba__InternalException )
                  {
                     fujaba__Success = false;
                  }
               }
               JavaSDM.ensure (fujaba__Success);

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);


         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return null;

      }
      return reverse;
   }

   /**
    * <pre>
    *           0..1     multiLink     0..1
    * CreateLinkOperation ------------------------> UMLMultiLink
    *           createLinkOperation               multiLink
    * </pre>
    */
   public static final String PROPERTY_MULTI_LINK = "multiLink";

   @Property( name = PROPERTY_MULTI_LINK, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private UMLMultiLink multiLink;

   @Property( name = PROPERTY_MULTI_LINK )
   public boolean setMultiLink (UMLMultiLink value)
   {
      boolean changed = false;

      if (this.multiLink != value)
      {
      
         UMLMultiLink oldValue = this.multiLink;
         this.multiLink = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_MULTI_LINK )
   public CreateLinkOperation withMultiLink (UMLMultiLink value)
   {
      setMultiLink (value);
      return this;
   }

   public UMLMultiLink getMultiLink ()
   {
      return this.multiLink;
   }

   public void removeYou()
   {
      this.setMultiLink (null);
      super.removeYou ();
   }
}


