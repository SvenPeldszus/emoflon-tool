/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.velocity;
import org.apache.velocity.runtime.RuntimeServices;
import org.apache.velocity.runtime.resource.loader.ResourceLoader;

import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.upb.tools.sdm.JavaSDM; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDMException;


public class AdaptableResourceLoaderFactory
{


   private  AdaptableResourceLoaderFactory ()
   {
   }

   /**
    * <pre>
    *           0..1     current     0..1
    * AdaptableResourceLoaderFactory ------------------------> ClassLoader
    *           adaptableResourceLoaderFactory               classLoader
    * </pre>
    */
   public static final String PROPERTY_CLASS_LOADER = "classLoader";

   @Property( name = PROPERTY_CLASS_LOADER, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private ClassLoader classLoader;

   @Property( name = PROPERTY_CLASS_LOADER )
   public boolean setClassLoader (ClassLoader value)
   {
      boolean changed = false;

      if (this.classLoader != value)
      {
      
         ClassLoader oldValue = this.classLoader;
         this.classLoader = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CLASS_LOADER )
   public AdaptableResourceLoaderFactory withClassLoader (ClassLoader value)
   {
      setClassLoader (value);
      return this;
   }

   public ClassLoader getClassLoader ()
   {
      return this.classLoader;
   }

   public static ResourceLoader getLoader (RuntimeServices rs , String name ) throws Exception
   {
      boolean fujaba__Success = false;
      AdaptableResourceLoaderFactory factory = null;
      ClassLoader loader = null;
      Object _TmpObject = null;
      ResourceLoader resourceLoader = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         factory = get();

         // check object factory is really bound
         JavaSDM.ensure ( factory != null );
         // search to-one link current from factory to loader
         loader = factory.getClassLoader ();

         // check object loader is really bound
         JavaSDM.ensure ( loader != null );


         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // children
      // note: no problem if loader is null, because then the CallerClassLoader will be used.
      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         _TmpObject = ( Class.forName(name, true, loader) ) . newInstance();

         // ensure correct type and really bound of object resourceLoader
         JavaSDM.ensure ( _TmpObject instanceof ResourceLoader );
         resourceLoader = (ResourceLoader) _TmpObject;

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }


      // exception
      catch( Exception ex )
      {
         // story pattern StoryPattern1
         try 
         {
            fujaba__Success = false; 

            // check object rs is really bound
            JavaSDM.ensure ( rs != null );
            // collabStat call
            rs.error("Problem instantiating the template loader.\n Look at your properties file and make sure the\n name of the template loader is correct. Here is the\n error: " + ex);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         throw new Exception("Problem initializing template loader: " + name + "\nError is: ", ex );

      }

      // story pattern StoryPattern2
      try 
      {
         fujaba__Success = false; 

         // check object rs is really bound
         JavaSDM.ensure ( rs != null );
         // collabStat call
         rs.info( "Resource Loader Instantiated: " + resourceLoader.getClass().getName());
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return resourceLoader;
   }

   public static AdaptableResourceLoaderFactory get ()
   {
      boolean fujaba__Success = false;
      AdaptableResourceLoaderFactory factory = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // constraint instance != null
         JavaSDM.ensure ( instance != null );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         // story pattern successor
         try 
         {
            fujaba__Success = false; 

            // create object factory
            factory = new AdaptableResourceLoaderFactory ( );

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         instance = factory;

      }
      return instance;
   }

   public static final String PROPERTY_INSTANCE = "instance";

   @Property( name = PROPERTY_INSTANCE, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private static AdaptableResourceLoaderFactory instance;

   @Property( name = PROPERTY_INSTANCE )
   public static void setInstance (AdaptableResourceLoaderFactory value)
   {
      AdaptableResourceLoaderFactory.instance = value;
   }


   @Property( name = PROPERTY_INSTANCE )
   public static AdaptableResourceLoaderFactory getInstance ()
   {
      return AdaptableResourceLoaderFactory.instance;
   }

   public void removeYou()
   {
      this.setClassLoader (null);
   }
}


