/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.textlang;
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.fujaba.codegen.rules.UMLObjectRef;
import de.uni_paderborn.fujaba.metamodel.structure.FType;


public class UMLSymTabContext
{


   public static final String PROPERTY_AFTER_DOT = "afterDot";

   @Property( name = PROPERTY_AFTER_DOT, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private boolean afterDot = false;

   @Property( name = PROPERTY_AFTER_DOT )
   public void setAfterDot (boolean value)
   {
      this.afterDot = value;
   }

   public UMLSymTabContext withAfterDot (boolean value)
   {
      setAfterDot (value);
      return this;
   }

   @Property( name = PROPERTY_AFTER_DOT )
   public boolean isAfterDot ()
   {
      return this.afterDot;
   }

   /**
    * <pre>
    *           0..1     context     0..1
    * UMLSymTabContext ------------------------> FType
    *           type               context
    * </pre>
    */
   public static final String PROPERTY_CONTEXT = "context";

   @Property( name = PROPERTY_CONTEXT, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private FType context;

   @Property( name = PROPERTY_CONTEXT )
   public boolean setContext (FType value)
   {
      boolean changed = false;

      if (this.context != value)
      {
      
         FType oldValue = this.context;
         this.context = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CONTEXT )
   public UMLSymTabContext withContext (FType value)
   {
      setContext (value);
      return this;
   }

   public FType getContext ()
   {
      return this.context;
   }

   /**
    * <pre>
    *           0..n     subjectObject     0..1
    * UMLSymTabContext ------------------------- UMLObjectRef
    *           symTabContexts               subjectObject
    * </pre>
    */
   public static final String PROPERTY_SUBJECT_OBJECT = "subjectObject";

   @Property( name = PROPERTY_SUBJECT_OBJECT, partner = UMLObjectRef.PROPERTY_SYM_TAB_CONTEXTS, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private UMLObjectRef subjectObject;

   @Property( name = PROPERTY_SUBJECT_OBJECT )
   public boolean setSubjectObject (UMLObjectRef value)
   {
      boolean changed = false;

      if (this.subjectObject != value)
      {
      
         UMLObjectRef oldValue = this.subjectObject;
         UMLSymTabContext source = this;
         if (this.subjectObject != null)
         {
            this.subjectObject = null;
            oldValue.removeFromSymTabContexts (this);
         }
         this.subjectObject = value;

         if (value != null)
         {
            value.addToSymTabContexts (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_SUBJECT_OBJECT )
   public UMLSymTabContext withSubjectObject (UMLObjectRef value)
   {
      setSubjectObject (value);
      return this;
   }

   public UMLObjectRef getSubjectObject ()
   {
      return this.subjectObject;
   }

   /**
    * <pre>
    *           0..n     symTabContexts     0..1
    * UMLSymTabContext ------------------------- UMLTextLangInfo
    *           symTabContexts               textLangInfo
    * </pre>
    */
   public static final String PROPERTY_TEXT_LANG_INFO = "textLangInfo";

   @Property( name = PROPERTY_TEXT_LANG_INFO, partner = UMLTextLangInfo.PROPERTY_SYM_TAB_CONTEXTS, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private UMLTextLangInfo textLangInfo;

   @Property( name = PROPERTY_TEXT_LANG_INFO )
   public boolean setTextLangInfo (UMLTextLangInfo value)
   {
      boolean changed = false;

      if (this.textLangInfo != value)
      {
      
         UMLTextLangInfo oldValue = this.textLangInfo;
         UMLSymTabContext source = this;
         if (this.textLangInfo != null)
         {
            this.textLangInfo = null;
            oldValue.removeFromSymTabContexts (this);
         }
         this.textLangInfo = value;

         if (value != null)
         {
            value.addToSymTabContexts (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TEXT_LANG_INFO )
   public UMLSymTabContext withTextLangInfo (UMLTextLangInfo value)
   {
      setTextLangInfo (value);
      return this;
   }

   public UMLTextLangInfo getTextLangInfo ()
   {
      return this.textLangInfo;
   }

   public void removeYou()
   {
      this.setContext (null);
      this.setSubjectObject (null);
      this.setTextLangInfo (null);
   }
}


