/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.rules.engine;
import java.util.Iterator;

import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.fujaba.codegen.rules.SearchMultiLinkOperation;
import de.uni_kassel.fujaba.codegen.rules.Token;
import de.uni_kassel.fujaba.codegen.rules.UMLLinkRef;
import de.uni_kassel.fujaba.codegen.rules.UMLObjectRef;
import de.uni_paderborn.fujaba.metamodel.common.FConstraint;
import de.uni_paderborn.fujaba.metamodel.structure.FAssoc;
import de.uni_paderborn.fujaba.metamodel.structure.FRole;
import de.uni_paderborn.fujaba.uml.behavior.UMLLink;
import de.uni_paderborn.fujaba.uml.behavior.UMLMultiLink;
import de.uni_paderborn.fujaba.uml.behavior.UMLObject;
import de.upb.tools.sdm.JavaSDM;
import de.upb.tools.sdm.JavaSDMException; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public class OrderedToNCostStrategy extends KeyableToNCostStrategy
{


   public static final String PROPERTY_PU_T_COST = "PUT_COST";

   @Property( name = PROPERTY_PU_T_COST, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   public static final double PUT_COST = 2.5;


   public static final String PROPERTY_REMOV_E_COST = "REMOVE_COST";

   @Property( name = PROPERTY_REMOV_E_COST, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   public static final double REMOVE_COST = 2;


   protected boolean checkQualified (UMLLink link , UMLObject target )
   {

      return getRange (link, target) == -1;
   }

   protected double getCheckCost (double payload )
   {

      return getSearchCost (payload) + COMPARE_COST;
   }

   public double getCost (Token operation )
   {
      boolean fujaba__Success = false;
      double result = 0.0;
      Object _TmpObject = null;
      SearchMultiLinkOperation multi = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         result = super.getCost( operation );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         _TmpObject = operation;

         // ensure correct type and really bound of object multi
         JavaSDM.ensure ( _TmpObject instanceof SearchMultiLinkOperation );
         multi = (SearchMultiLinkOperation) _TmpObject;

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return result;

      }
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object multi is really bound
         JavaSDM.ensure ( multi != null );
         // attribute condition type == SearchMultiLinkOperation.NEXT
         JavaSDM.ensure ( multi.getType () == SearchMultiLinkOperation.NEXT );

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return result / 2.0;

      }
      return result / 2.0 + 1.0;
   }

   protected double getCreateCost (UMLLinkRef linkRef , UMLObjectRef from , double payload )
   {

      return PUT_COST;
   }

   protected double getDestroyCost (UMLLinkRef linkRef , UMLObjectRef from , double payload )
   {
      boolean fujaba__Success = false;
      double cost = 0.0;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         cost = getSearchCost (payload)+REMOVE_COST;
         // collabStat call
         cost = cost + getDestroyBackRefCost (linkRef, from);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return cost;
   }

   /*package*/ int getRange (UMLLink link , UMLObject target )
   {
      boolean fujaba__Success = false;
      double payload = 0.0;
      UMLMultiLink multiLink = null;

      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // check object link is really bound
         JavaSDM.ensure ( link != null );
         // attribute condition range != ""
         JavaSDM.ensure ( JavaSDM.stringCompare ((String) link.getRange (), "") != 0 );

         // attribute condition range != null
         JavaSDM.ensure ( JavaSDM.stringCompare ((String) link.getRange (), null) != 0 );

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {

         int number = -1;
         try { number = Integer.parseInt (link.getRange ());}
         catch (NumberFormatException nfe) {}
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // collabStat call
            payload = getDefaultPayload (link, target);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         if ( !( number <= 0.5*payload ) )
         {
            return (int) Math.ceil(payload)-number;

         }
         return number;

      }
      // story pattern Successor of Successor of successor
      try 
      {
         fujaba__Success = false; 

         // check object link is really bound
         JavaSDM.ensure ( link != null );
         // search to-one link targetLink from link to multiLink
         multiLink = link.getRevTargetLink ();

         // check object multiLink is really bound
         JavaSDM.ensure ( multiLink != null );

         // attribute condition type == UMLMultiLink.FIRST
         JavaSDM.ensure ( multiLink.getType () == UMLMultiLink.FIRST );


         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return 0;

      }
      // story pattern Successor of Successor of Successor of successor
      try 
      {
         fujaba__Success = false; 

         // check object link is really bound
         JavaSDM.ensure ( link != null );
         // search to-one link sourceLink from link to multiLink
         multiLink = link.getRevSourceLink ();

         // check object multiLink is really bound
         JavaSDM.ensure ( multiLink != null );

         // attribute condition type == UMLMultiLink.LAST
         JavaSDM.ensure ( multiLink.getType () == UMLMultiLink.LAST );


         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return 0;

      }
      return -1;
   }

   protected double getSearchCost (double payload )
   {

      return ITERATE_FACTOR*payload+ITERATE_OFFSET;
   }

   protected boolean isResponsibleImpl (Token operation , UMLLink link , UMLObject target , FRole sourceRole , FRole targetRole )
   {
      boolean fujaba__Success = false;
      boolean result = false;
      Iterator fujaba__IterTargetRoleToOrdered = null;
      FConstraint ordered = null;
      Iterator fujaba__IterAssocToOrdered = null;
      FAssoc assoc = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         result = super.isResponsibleImpl( operation, link, target, sourceRole, targetRole );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( result ) )
      {
         return false;

      }
      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // check object targetRole is really bound
         JavaSDM.ensure ( targetRole != null );
         // iterate to-many link constraints from targetRole to ordered
         fujaba__Success = false;
         fujaba__IterTargetRoleToOrdered = targetRole.iteratorOfConstraints ();

         while ( !(fujaba__Success) && fujaba__IterTargetRoleToOrdered.hasNext () )
         {
            try
            {
               ordered = (FConstraint) fujaba__IterTargetRoleToOrdered.next ();

               // check object ordered is really bound
               JavaSDM.ensure ( ordered != null );
               // attribute condition text == "ordered"
               JavaSDM.ensure ( JavaSDM.stringCompare ((String) ordered.getText (), "ordered") == 0 );


               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         // story pattern 
         try 
         {
            fujaba__Success = false; 

            // check object link is really bound
            JavaSDM.ensure ( link != null );
            // search to-one link instanceOf from link to assoc
            assoc = link.getInstanceOf ();

            // check object assoc is really bound
            JavaSDM.ensure ( assoc != null );

            // iterate to-many link constraints from assoc to ordered
            fujaba__Success = false;
            fujaba__IterAssocToOrdered = assoc.iteratorOfConstraints ();

            while ( !(fujaba__Success) && fujaba__IterAssocToOrdered.hasNext () )
            {
               try
               {
                  ordered = (FConstraint) fujaba__IterAssocToOrdered.next ();

                  // check object ordered is really bound
                  JavaSDM.ensure ( ordered != null );
                  // attribute condition text == "ordered"
                  JavaSDM.ensure ( JavaSDM.stringCompare ((String) ordered.getText (), "ordered") == 0 );


                  fujaba__Success = true;
               }
               catch ( JavaSDMException fujaba__InternalException )
               {
                  fujaba__Success = false;
               }
            }
            JavaSDM.ensure (fujaba__Success);

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         if ( !( fujaba__Success ) )
         {
            return false;

         }

      }
      return true;
   }

}


