
import java.security.InvalidParameterException;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;

import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphs.SymbolicGraph;
import org.moflon.maave.tool.symbolicgraphs.Datastructures.Mapping;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphs.GraphEdge;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphs.GraphNode;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphs.LabelEdge;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphs.LabelNode;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingFactory;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingUtils.CategoryUtil;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingUtils.MatchingUtilsFactory;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphMorphisms.SymbolicGraphMorphism;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphMorphisms.SymbolicGraphMorphismsFactory;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphMorphisms.impl.SymbolicGraphMorphismImpl;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphs.EGraphElement;
import org.gervarro.democles.common.DataFrame;
import org.gervarro.democles.runtime.InterpretedDataFrame;

partial class ConfigurableMorphismFinderImpl {

@members <--

   org.gervarro.democles.interpreter.Pattern patternRuntime;
   private SymbolicGraphMorphism setUpMorphism(SymbolicGraph from, SymbolicGraph to,  DataFrame matching)
   {
      SymbolicGraphMorphism newMor = SymbolicGraphMorphismsFactory.eINSTANCE.createSymbolicGraphMorphism();
      newMor.setDom(from);
      newMor.setCodom(to);
      for (GraphNode gn : from.getGraphNodes())
      {
         newMor.addMapping(gn, (GraphNode) matching.getValue(getPatternSpec().getIndexOf(gn)));
      }
      for (GraphEdge ge : from.getGraphEdges())
      {
         newMor.addMapping(ge, (GraphEdge) matching.getValue(getPatternSpec().getIndexOf(ge)));
      }
      for (LabelNode ln : from.getLabelNodes())
      {
         newMor.addMapping(ln, (LabelNode) matching.getValue(getPatternSpec().getIndexOf(ln)));
      }
      for (LabelEdge le : from.getLabelEdges())
      {
         newMor.addMapping(le, (LabelEdge) matching.getValue(getPatternSpec().getIndexOf(le)));
      }
      if (this.getMorphismClass().isMember(newMor).isValid())
      {
         return newMor;

      }
      return null;
   }
   
-->

@model getAllMorphisms (SymbolicGraphMorphism partialMatch) <--

   // [user code injected with eMoflon]
      if (partialMatch.getDom() != this.getPatternSpec().getSourceSymbolicGraph())
      {
         throw new InvalidParameterException("Matcher source pattern does not match domain of partial match.");
      }
      InterpretedDataFrame frame = patternRuntime.createDataFrame();
      SymbolicGraph from = partialMatch.getDom();
      SymbolicGraph to = partialMatch.getCodom();
      SymbolicGraphMorphismImpl m = (SymbolicGraphMorphismImpl) partialMatch;
      Mapping<EGraphElement> elemMapping = new Mapping<EGraphElement>(
            m.graphEdgeMap.size() + m.graphNodeMap.size() + m.labelEdgeMap.size() + m.labelNodeMap.size());
      elemMapping.addAll(m.graphEdgeMap);
      elemMapping.addAll(m.graphNodeMap);
      elemMapping.addAll(m.labelEdgeMap);
      elemMapping.addAll(m.labelNodeMap);

      frame.setValue(0, m.getCodom());
      for (EGraphElement elem : elemMapping.getPreimage())
      {
         frame.setValue(getPatternSpec().getIndexOf(elem), elemMapping.imageOf(elem));
      }
      MorphismsSet morList = MatchingFactory.eINSTANCE.createMorphismsSet();
      
      
      List<DataFrame>matchings=new LinkedList<DataFrame>();

      for (DataFrame matching : patternRuntime.matchAll(frame))
      {
         matchings.add(matching);
         //setUpMorphism(from, to, , matching);

      }
      List<SymbolicGraphMorphism>newMorList =matchings.parallelStream().map(x->setUpMorphism(from, to, x)).filter(x->x!=null).collect(Collectors.toList());
      morList.getMorphisms().addAll(newMorList);
      return morList;
-->

}