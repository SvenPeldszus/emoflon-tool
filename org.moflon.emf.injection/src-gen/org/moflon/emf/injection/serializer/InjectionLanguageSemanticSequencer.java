/*
 * generated by Xtext 2.14.0
 */
package org.moflon.emf.injection.serializer;

import java.util.Set;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.moflon.emf.injection.injectionLanguage.ClassDeclaration;
import org.moflon.emf.injection.injectionLanguage.ClassInjectionDeclaration;
import org.moflon.emf.injection.injectionLanguage.InjectionFile;
import org.moflon.emf.injection.injectionLanguage.InjectionLanguagePackage;
import org.moflon.emf.injection.injectionLanguage.JavaAnnotation;
import org.moflon.emf.injection.injectionLanguage.MethodDeclaration;
import org.moflon.emf.injection.injectionLanguage.ParameterDeclaration;
import org.moflon.emf.injection.injectionLanguage.RegularImport;
import org.moflon.emf.injection.injectionLanguage.StaticImport;
import org.moflon.emf.injection.services.InjectionLanguageGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class InjectionLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private InjectionLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == InjectionLanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case InjectionLanguagePackage.CLASS_DECLARATION:
				sequence_ClassDeclaration(context, (ClassDeclaration) semanticObject); 
				return; 
			case InjectionLanguagePackage.CLASS_INJECTION_DECLARATION:
				sequence_ClassInjectionDeclaration(context, (ClassInjectionDeclaration) semanticObject); 
				return; 
			case InjectionLanguagePackage.INJECTION_FILE:
				sequence_InjectionFile(context, (InjectionFile) semanticObject); 
				return; 
			case InjectionLanguagePackage.JAVA_ANNOTATION:
				sequence_JavaAnnotation(context, (JavaAnnotation) semanticObject); 
				return; 
			case InjectionLanguagePackage.METHOD_DECLARATION:
				sequence_MethodDeclaration(context, (MethodDeclaration) semanticObject); 
				return; 
			case InjectionLanguagePackage.PARAMETER_DECLARATION:
				sequence_ParameterDeclaration(context, (ParameterDeclaration) semanticObject); 
				return; 
			case InjectionLanguagePackage.REGULAR_IMPORT:
				sequence_RegularImport(context, (RegularImport) semanticObject); 
				return; 
			case InjectionLanguagePackage.STATIC_IMPORT:
				sequence_StaticImport(context, (StaticImport) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ClassDeclaration returns ClassDeclaration
	 *
	 * Constraint:
	 *     (annotations+=JavaAnnotation* className=ID classInjectionDeclaration=ClassInjectionDeclaration? methodDeclarations+=MethodDeclaration*)
	 */
	protected void sequence_ClassDeclaration(ISerializationContext context, ClassDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ClassInjectionDeclaration returns ClassInjectionDeclaration
	 *
	 * Constraint:
	 *     body=CODE_BLOCK
	 */
	protected void sequence_ClassInjectionDeclaration(ISerializationContext context, ClassInjectionDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, InjectionLanguagePackage.Literals.CLASS_INJECTION_DECLARATION__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, InjectionLanguagePackage.Literals.CLASS_INJECTION_DECLARATION__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClassInjectionDeclarationAccess().getBodyCODE_BLOCKTerminalRuleCall_1_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InjectionFile returns InjectionFile
	 *
	 * Constraint:
	 *     ((imports+=RegularImport | imports+=StaticImport)* classDeclaration=ClassDeclaration)
	 */
	protected void sequence_InjectionFile(ISerializationContext context, InjectionFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JavaAnnotation returns JavaAnnotation
	 *
	 * Constraint:
	 *     (name=ID parameter=STRING)
	 */
	protected void sequence_JavaAnnotation(ISerializationContext context, JavaAnnotation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, InjectionLanguagePackage.Literals.JAVA_ANNOTATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, InjectionLanguagePackage.Literals.JAVA_ANNOTATION__NAME));
			if (transientValues.isValueTransient(semanticObject, InjectionLanguagePackage.Literals.JAVA_ANNOTATION__PARAMETER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, InjectionLanguagePackage.Literals.JAVA_ANNOTATION__PARAMETER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJavaAnnotationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getJavaAnnotationAccess().getParameterSTRINGTerminalRuleCall_3_0(), semanticObject.getParameter());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MethodDeclaration returns MethodDeclaration
	 *
	 * Constraint:
	 *     (methodName=ID parameters+=ParameterDeclaration? parameters+=ParameterDeclaration* body=CODE_BLOCK)
	 */
	protected void sequence_MethodDeclaration(ISerializationContext context, MethodDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterDeclaration returns ParameterDeclaration
	 *
	 * Constraint:
	 *     (parameterType=QualifiedName parameterName=ID)
	 */
	protected void sequence_ParameterDeclaration(ISerializationContext context, ParameterDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, InjectionLanguagePackage.Literals.PARAMETER_DECLARATION__PARAMETER_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, InjectionLanguagePackage.Literals.PARAMETER_DECLARATION__PARAMETER_TYPE));
			if (transientValues.isValueTransient(semanticObject, InjectionLanguagePackage.Literals.PARAMETER_DECLARATION__PARAMETER_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, InjectionLanguagePackage.Literals.PARAMETER_DECLARATION__PARAMETER_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterDeclarationAccess().getParameterTypeQualifiedNameParserRuleCall_0_0(), semanticObject.getParameterType());
		feeder.accept(grammarAccess.getParameterDeclarationAccess().getParameterNameIDTerminalRuleCall_1_0(), semanticObject.getParameterName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RegularImport returns RegularImport
	 *
	 * Constraint:
	 *     namespace=QualifiedNameWithWildcard
	 */
	protected void sequence_RegularImport(ISerializationContext context, RegularImport semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, InjectionLanguagePackage.Literals.REGULAR_IMPORT__NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, InjectionLanguagePackage.Literals.REGULAR_IMPORT__NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRegularImportAccess().getNamespaceQualifiedNameWithWildcardParserRuleCall_1_0(), semanticObject.getNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StaticImport returns StaticImport
	 *
	 * Constraint:
	 *     namespace=QualifiedNameWithWildcard
	 */
	protected void sequence_StaticImport(ISerializationContext context, StaticImport semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, InjectionLanguagePackage.Literals.STATIC_IMPORT__NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, InjectionLanguagePackage.Literals.STATIC_IMPORT__NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStaticImportAccess().getNamespaceQualifiedNameWithWildcardParserRuleCall_2_0(), semanticObject.getNamespace());
		feeder.finish();
	}
	
	
}
