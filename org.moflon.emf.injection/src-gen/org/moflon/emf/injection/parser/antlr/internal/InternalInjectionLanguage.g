/*
 * generated by Xtext 2.14.0
 */
grammar InternalInjectionLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.moflon.emf.injection.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.moflon.emf.injection.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.moflon.emf.injection.services.InjectionLanguageGrammarAccess;

}

@parser::members {

 	private InjectionLanguageGrammarAccess grammarAccess;

    public InternalInjectionLanguageParser(TokenStream input, InjectionLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "InjectionFile";
   	}

   	@Override
   	protected InjectionLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleInjectionFile
entryRuleInjectionFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInjectionFileRule()); }
	iv_ruleInjectionFile=ruleInjectionFile
	{ $current=$iv_ruleInjectionFile.current; }
	EOF;

// Rule InjectionFile
ruleInjectionFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getInjectionFileAccess().getImportsRegularImportParserRuleCall_0_0_0());
					}
					lv_imports_0_1=ruleRegularImport
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInjectionFileRule());
						}
						add(
							$current,
							"imports",
							lv_imports_0_1,
							"org.moflon.emf.injection.InjectionLanguage.RegularImport");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getInjectionFileAccess().getImportsStaticImportParserRuleCall_0_0_1());
					}
					lv_imports_0_2=ruleStaticImport
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInjectionFileRule());
						}
						add(
							$current,
							"imports",
							lv_imports_0_2,
							"org.moflon.emf.injection.InjectionLanguage.StaticImport");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getInjectionFileAccess().getClassDeclarationClassDeclarationParserRuleCall_1_0());
				}
				lv_classDeclaration_1_0=ruleClassDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInjectionFileRule());
					}
					set(
						$current,
						"classDeclaration",
						lv_classDeclaration_1_0,
						"org.moflon.emf.injection.InjectionLanguage.ClassDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRegularImport
entryRuleRegularImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegularImportRule()); }
	iv_ruleRegularImport=ruleRegularImport
	{ $current=$iv_ruleRegularImport.current; }
	EOF;

// Rule RegularImport
ruleRegularImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getRegularImportAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRegularImportAccess().getNamespaceQualifiedNameWithWildcardParserRuleCall_1_0());
				}
				lv_namespace_1_0=ruleQualifiedNameWithWildcard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRegularImportRule());
					}
					set(
						$current,
						"namespace",
						lv_namespace_1_0,
						"org.moflon.emf.injection.InjectionLanguage.QualifiedNameWithWildcard");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getRegularImportAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleStaticImport
entryRuleStaticImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStaticImportRule()); }
	iv_ruleStaticImport=ruleStaticImport
	{ $current=$iv_ruleStaticImport.current; }
	EOF;

// Rule StaticImport
ruleStaticImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getStaticImportAccess().getImportKeyword_0());
		}
		otherlv_1='static'
		{
			newLeafNode(otherlv_1, grammarAccess.getStaticImportAccess().getStaticKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStaticImportAccess().getNamespaceQualifiedNameWithWildcardParserRuleCall_2_0());
				}
				lv_namespace_2_0=ruleQualifiedNameWithWildcard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStaticImportRule());
					}
					set(
						$current,
						"namespace",
						lv_namespace_2_0,
						"org.moflon.emf.injection.InjectionLanguage.QualifiedNameWithWildcard");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getStaticImportAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); }
	iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard
	{ $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }
	EOF;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0());
		}
		this_QualifiedName_0=ruleQualifiedName
		{
			$current.merge(this_QualifiedName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleClassDeclaration
entryRuleClassDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassDeclarationRule()); }
	iv_ruleClassDeclaration=ruleClassDeclaration
	{ $current=$iv_ruleClassDeclaration.current; }
	EOF;

// Rule ClassDeclaration
ruleClassDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getClassDeclarationAccess().getAnnotationsJavaAnnotationParserRuleCall_0_0());
				}
				lv_annotations_0_0=ruleJavaAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassDeclarationRule());
					}
					add(
						$current,
						"annotations",
						lv_annotations_0_0,
						"org.moflon.emf.injection.InjectionLanguage.JavaAnnotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_1='partial'
		{
			newLeafNode(otherlv_1, grammarAccess.getClassDeclarationAccess().getPartialKeyword_1());
		}
		otherlv_2='class'
		{
			newLeafNode(otherlv_2, grammarAccess.getClassDeclarationAccess().getClassKeyword_2());
		}
		(
			(
				lv_className_3_0=RULE_ID
				{
					newLeafNode(lv_className_3_0, grammarAccess.getClassDeclarationAccess().getClassNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"className",
						lv_className_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getClassDeclarationAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClassDeclarationAccess().getClassInjectionDeclarationClassInjectionDeclarationParserRuleCall_5_0());
				}
				lv_classInjectionDeclaration_5_0=ruleClassInjectionDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassDeclarationRule());
					}
					set(
						$current,
						"classInjectionDeclaration",
						lv_classInjectionDeclaration_5_0,
						"org.moflon.emf.injection.InjectionLanguage.ClassInjectionDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getClassDeclarationAccess().getMethodDeclarationsMethodDeclarationParserRuleCall_6_0());
				}
				lv_methodDeclarations_6_0=ruleMethodDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassDeclarationRule());
					}
					add(
						$current,
						"methodDeclarations",
						lv_methodDeclarations_6_0,
						"org.moflon.emf.injection.InjectionLanguage.MethodDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getClassDeclarationAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleJavaAnnotation
entryRuleJavaAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJavaAnnotationRule()); }
	iv_ruleJavaAnnotation=ruleJavaAnnotation
	{ $current=$iv_ruleJavaAnnotation.current; }
	EOF;

// Rule JavaAnnotation
ruleJavaAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@'
		{
			newLeafNode(otherlv_0, grammarAccess.getJavaAnnotationAccess().getCommercialAtKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getJavaAnnotationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJavaAnnotationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getJavaAnnotationAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_parameter_3_0=RULE_STRING
				{
					newLeafNode(lv_parameter_3_0, grammarAccess.getJavaAnnotationAccess().getParameterSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJavaAnnotationRule());
					}
					setWithLastConsumed(
						$current,
						"parameter",
						lv_parameter_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getJavaAnnotationAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleClassInjectionDeclaration
entryRuleClassInjectionDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassInjectionDeclarationRule()); }
	iv_ruleClassInjectionDeclaration=ruleClassInjectionDeclaration
	{ $current=$iv_ruleClassInjectionDeclaration.current; }
	EOF;

// Rule ClassInjectionDeclaration
ruleClassInjectionDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@members'
		{
			newLeafNode(otherlv_0, grammarAccess.getClassInjectionDeclarationAccess().getMembersKeyword_0());
		}
		(
			(
				lv_body_1_0=RULE_CODE_BLOCK
				{
					newLeafNode(lv_body_1_0, grammarAccess.getClassInjectionDeclarationAccess().getBodyCODE_BLOCKTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassInjectionDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"body",
						lv_body_1_0,
						"org.moflon.emf.injection.InjectionLanguage.CODE_BLOCK");
				}
			)
		)
	)
;

// Entry rule entryRuleMethodDeclaration
entryRuleMethodDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodDeclarationRule()); }
	iv_ruleMethodDeclaration=ruleMethodDeclaration
	{ $current=$iv_ruleMethodDeclaration.current; }
	EOF;

// Rule MethodDeclaration
ruleMethodDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@model'
		{
			newLeafNode(otherlv_0, grammarAccess.getMethodDeclarationAccess().getModelKeyword_0());
		}
		(
			(
				lv_methodName_1_0=RULE_ID
				{
					newLeafNode(lv_methodName_1_0, grammarAccess.getMethodDeclarationAccess().getMethodNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"methodName",
						lv_methodName_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getMethodDeclarationAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodDeclarationAccess().getParametersParameterDeclarationParserRuleCall_3_0());
				}
				lv_parameters_3_0=ruleParameterDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodDeclarationRule());
					}
					add(
						$current,
						"parameters",
						lv_parameters_3_0,
						"org.moflon.emf.injection.InjectionLanguage.ParameterDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getMethodDeclarationAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodDeclarationAccess().getParametersParameterDeclarationParserRuleCall_4_1_0());
					}
					lv_parameters_5_0=ruleParameterDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodDeclarationRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_5_0,
							"org.moflon.emf.injection.InjectionLanguage.ParameterDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getMethodDeclarationAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				lv_body_7_0=RULE_CODE_BLOCK
				{
					newLeafNode(lv_body_7_0, grammarAccess.getMethodDeclarationAccess().getBodyCODE_BLOCKTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"body",
						lv_body_7_0,
						"org.moflon.emf.injection.InjectionLanguage.CODE_BLOCK");
				}
			)
		)
	)
;

// Entry rule entryRuleParameterDeclaration
entryRuleParameterDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterDeclarationRule()); }
	iv_ruleParameterDeclaration=ruleParameterDeclaration
	{ $current=$iv_ruleParameterDeclaration.current; }
	EOF;

// Rule ParameterDeclaration
ruleParameterDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterDeclarationAccess().getParameterTypeQualifiedNameParserRuleCall_0_0());
				}
				lv_parameterType_0_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterDeclarationRule());
					}
					set(
						$current,
						"parameterType",
						lv_parameterType_0_0,
						"org.moflon.emf.injection.InjectionLanguage.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_parameterName_1_0=RULE_ID
				{
					newLeafNode(lv_parameterName_1_0, grammarAccess.getParameterDeclarationAccess().getParameterNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"parameterName",
						lv_parameterName_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

fragment RULE_BLOCK_BEGIN : '<--';

fragment RULE_BLOCK_END : '-->';

RULE_CODE_BLOCK : RULE_BLOCK_BEGIN .* RULE_BLOCK_END;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
