/**
 * generated by Xtext 2.14.0
 */
package org.moflon.emf.injection.injectionLanguage.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.impl.EFactoryImpl;
import org.eclipse.emf.ecore.plugin.EcorePlugin;
import org.moflon.emf.injection.injectionLanguage.ClassDeclaration;
import org.moflon.emf.injection.injectionLanguage.ClassInjectionDeclaration;
import org.moflon.emf.injection.injectionLanguage.InjectionFile;
import org.moflon.emf.injection.injectionLanguage.InjectionLanguageFactory;
import org.moflon.emf.injection.injectionLanguage.InjectionLanguagePackage;
import org.moflon.emf.injection.injectionLanguage.JavaAnnotation;
import org.moflon.emf.injection.injectionLanguage.MethodDeclaration;
import org.moflon.emf.injection.injectionLanguage.ParameterDeclaration;
import org.moflon.emf.injection.injectionLanguage.RegularImport;
import org.moflon.emf.injection.injectionLanguage.StaticImport;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class InjectionLanguageFactoryImpl extends EFactoryImpl implements InjectionLanguageFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static InjectionLanguageFactory init()
  {
    try
    {
      InjectionLanguageFactory theInjectionLanguageFactory = (InjectionLanguageFactory)EPackage.Registry.INSTANCE.getEFactory(InjectionLanguagePackage.eNS_URI);
      if (theInjectionLanguageFactory != null)
      {
        return theInjectionLanguageFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new InjectionLanguageFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InjectionLanguageFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case InjectionLanguagePackage.INJECTION_FILE: return createInjectionFile();
      case InjectionLanguagePackage.REGULAR_IMPORT: return createRegularImport();
      case InjectionLanguagePackage.STATIC_IMPORT: return createStaticImport();
      case InjectionLanguagePackage.CLASS_DECLARATION: return createClassDeclaration();
      case InjectionLanguagePackage.JAVA_ANNOTATION: return createJavaAnnotation();
      case InjectionLanguagePackage.CLASS_INJECTION_DECLARATION: return createClassInjectionDeclaration();
      case InjectionLanguagePackage.METHOD_DECLARATION: return createMethodDeclaration();
      case InjectionLanguagePackage.PARAMETER_DECLARATION: return createParameterDeclaration();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InjectionFile createInjectionFile()
  {
    InjectionFileImpl injectionFile = new InjectionFileImpl();
    return injectionFile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RegularImport createRegularImport()
  {
    RegularImportImpl regularImport = new RegularImportImpl();
    return regularImport;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StaticImport createStaticImport()
  {
    StaticImportImpl staticImport = new StaticImportImpl();
    return staticImport;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClassDeclaration createClassDeclaration()
  {
    ClassDeclarationImpl classDeclaration = new ClassDeclarationImpl();
    return classDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JavaAnnotation createJavaAnnotation()
  {
    JavaAnnotationImpl javaAnnotation = new JavaAnnotationImpl();
    return javaAnnotation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClassInjectionDeclaration createClassInjectionDeclaration()
  {
    ClassInjectionDeclarationImpl classInjectionDeclaration = new ClassInjectionDeclarationImpl();
    return classInjectionDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MethodDeclaration createMethodDeclaration()
  {
    MethodDeclarationImpl methodDeclaration = new MethodDeclarationImpl();
    return methodDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParameterDeclaration createParameterDeclaration()
  {
    ParameterDeclarationImpl parameterDeclaration = new ParameterDeclarationImpl();
    return parameterDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InjectionLanguagePackage getInjectionLanguagePackage()
  {
    return (InjectionLanguagePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static InjectionLanguagePackage getPackage()
  {
    return InjectionLanguagePackage.eINSTANCE;
  }

} //InjectionLanguageFactoryImpl
