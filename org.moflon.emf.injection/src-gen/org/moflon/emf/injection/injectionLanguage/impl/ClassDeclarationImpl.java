/**
 * generated by Xtext 2.14.0
 */
package org.moflon.emf.injection.injectionLanguage.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.moflon.emf.injection.injectionLanguage.ClassDeclaration;
import org.moflon.emf.injection.injectionLanguage.ClassInjectionDeclaration;
import org.moflon.emf.injection.injectionLanguage.InjectionLanguagePackage;
import org.moflon.emf.injection.injectionLanguage.JavaAnnotation;
import org.moflon.emf.injection.injectionLanguage.MethodDeclaration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Class Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.moflon.emf.injection.injectionLanguage.impl.ClassDeclarationImpl#getAnnotations <em>Annotations</em>}</li>
 *   <li>{@link org.moflon.emf.injection.injectionLanguage.impl.ClassDeclarationImpl#getClassName <em>Class Name</em>}</li>
 *   <li>{@link org.moflon.emf.injection.injectionLanguage.impl.ClassDeclarationImpl#getClassInjectionDeclaration <em>Class Injection Declaration</em>}</li>
 *   <li>{@link org.moflon.emf.injection.injectionLanguage.impl.ClassDeclarationImpl#getMethodDeclarations <em>Method Declarations</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ClassDeclarationImpl extends MinimalEObjectImpl.Container implements ClassDeclaration
{
  /**
   * The cached value of the '{@link #getAnnotations() <em>Annotations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnnotations()
   * @generated
   * @ordered
   */
  protected EList<JavaAnnotation> annotations;

  /**
   * The default value of the '{@link #getClassName() <em>Class Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClassName()
   * @generated
   * @ordered
   */
  protected static final String CLASS_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getClassName() <em>Class Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClassName()
   * @generated
   * @ordered
   */
  protected String className = CLASS_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getClassInjectionDeclaration() <em>Class Injection Declaration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClassInjectionDeclaration()
   * @generated
   * @ordered
   */
  protected ClassInjectionDeclaration classInjectionDeclaration;

  /**
   * The cached value of the '{@link #getMethodDeclarations() <em>Method Declarations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMethodDeclarations()
   * @generated
   * @ordered
   */
  protected EList<MethodDeclaration> methodDeclarations;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ClassDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return InjectionLanguagePackage.Literals.CLASS_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<JavaAnnotation> getAnnotations()
  {
    if (annotations == null)
    {
      annotations = new EObjectContainmentEList<JavaAnnotation>(JavaAnnotation.class, this, InjectionLanguagePackage.CLASS_DECLARATION__ANNOTATIONS);
    }
    return annotations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getClassName()
  {
    return className;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setClassName(String newClassName)
  {
    String oldClassName = className;
    className = newClassName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, InjectionLanguagePackage.CLASS_DECLARATION__CLASS_NAME, oldClassName, className));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClassInjectionDeclaration getClassInjectionDeclaration()
  {
    return classInjectionDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetClassInjectionDeclaration(ClassInjectionDeclaration newClassInjectionDeclaration, NotificationChain msgs)
  {
    ClassInjectionDeclaration oldClassInjectionDeclaration = classInjectionDeclaration;
    classInjectionDeclaration = newClassInjectionDeclaration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, InjectionLanguagePackage.CLASS_DECLARATION__CLASS_INJECTION_DECLARATION, oldClassInjectionDeclaration, newClassInjectionDeclaration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setClassInjectionDeclaration(ClassInjectionDeclaration newClassInjectionDeclaration)
  {
    if (newClassInjectionDeclaration != classInjectionDeclaration)
    {
      NotificationChain msgs = null;
      if (classInjectionDeclaration != null)
        msgs = ((InternalEObject)classInjectionDeclaration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - InjectionLanguagePackage.CLASS_DECLARATION__CLASS_INJECTION_DECLARATION, null, msgs);
      if (newClassInjectionDeclaration != null)
        msgs = ((InternalEObject)newClassInjectionDeclaration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - InjectionLanguagePackage.CLASS_DECLARATION__CLASS_INJECTION_DECLARATION, null, msgs);
      msgs = basicSetClassInjectionDeclaration(newClassInjectionDeclaration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, InjectionLanguagePackage.CLASS_DECLARATION__CLASS_INJECTION_DECLARATION, newClassInjectionDeclaration, newClassInjectionDeclaration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<MethodDeclaration> getMethodDeclarations()
  {
    if (methodDeclarations == null)
    {
      methodDeclarations = new EObjectContainmentEList<MethodDeclaration>(MethodDeclaration.class, this, InjectionLanguagePackage.CLASS_DECLARATION__METHOD_DECLARATIONS);
    }
    return methodDeclarations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case InjectionLanguagePackage.CLASS_DECLARATION__ANNOTATIONS:
        return ((InternalEList<?>)getAnnotations()).basicRemove(otherEnd, msgs);
      case InjectionLanguagePackage.CLASS_DECLARATION__CLASS_INJECTION_DECLARATION:
        return basicSetClassInjectionDeclaration(null, msgs);
      case InjectionLanguagePackage.CLASS_DECLARATION__METHOD_DECLARATIONS:
        return ((InternalEList<?>)getMethodDeclarations()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case InjectionLanguagePackage.CLASS_DECLARATION__ANNOTATIONS:
        return getAnnotations();
      case InjectionLanguagePackage.CLASS_DECLARATION__CLASS_NAME:
        return getClassName();
      case InjectionLanguagePackage.CLASS_DECLARATION__CLASS_INJECTION_DECLARATION:
        return getClassInjectionDeclaration();
      case InjectionLanguagePackage.CLASS_DECLARATION__METHOD_DECLARATIONS:
        return getMethodDeclarations();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case InjectionLanguagePackage.CLASS_DECLARATION__ANNOTATIONS:
        getAnnotations().clear();
        getAnnotations().addAll((Collection<? extends JavaAnnotation>)newValue);
        return;
      case InjectionLanguagePackage.CLASS_DECLARATION__CLASS_NAME:
        setClassName((String)newValue);
        return;
      case InjectionLanguagePackage.CLASS_DECLARATION__CLASS_INJECTION_DECLARATION:
        setClassInjectionDeclaration((ClassInjectionDeclaration)newValue);
        return;
      case InjectionLanguagePackage.CLASS_DECLARATION__METHOD_DECLARATIONS:
        getMethodDeclarations().clear();
        getMethodDeclarations().addAll((Collection<? extends MethodDeclaration>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case InjectionLanguagePackage.CLASS_DECLARATION__ANNOTATIONS:
        getAnnotations().clear();
        return;
      case InjectionLanguagePackage.CLASS_DECLARATION__CLASS_NAME:
        setClassName(CLASS_NAME_EDEFAULT);
        return;
      case InjectionLanguagePackage.CLASS_DECLARATION__CLASS_INJECTION_DECLARATION:
        setClassInjectionDeclaration((ClassInjectionDeclaration)null);
        return;
      case InjectionLanguagePackage.CLASS_DECLARATION__METHOD_DECLARATIONS:
        getMethodDeclarations().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case InjectionLanguagePackage.CLASS_DECLARATION__ANNOTATIONS:
        return annotations != null && !annotations.isEmpty();
      case InjectionLanguagePackage.CLASS_DECLARATION__CLASS_NAME:
        return CLASS_NAME_EDEFAULT == null ? className != null : !CLASS_NAME_EDEFAULT.equals(className);
      case InjectionLanguagePackage.CLASS_DECLARATION__CLASS_INJECTION_DECLARATION:
        return classInjectionDeclaration != null;
      case InjectionLanguagePackage.CLASS_DECLARATION__METHOD_DECLARATIONS:
        return methodDeclarations != null && !methodDeclarations.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (className: ");
    result.append(className);
    result.append(')');
    return result.toString();
  }

} //ClassDeclarationImpl
