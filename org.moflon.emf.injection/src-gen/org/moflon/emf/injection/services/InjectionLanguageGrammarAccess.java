/*
 * generated by Xtext 2.14.0
 */
package org.moflon.emf.injection.services;

import java.util.List;

import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

import com.google.inject.Inject;
import com.google.inject.Singleton;

@Singleton
public class InjectionLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class InjectionFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.moflon.emf.injection.InjectionLanguage.InjectionFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cImportsAlternatives_0_0 = (Alternatives)cImportsAssignment_0.eContents().get(0);
		private final RuleCall cImportsRegularImportParserRuleCall_0_0_0 = (RuleCall)cImportsAlternatives_0_0.eContents().get(0);
		private final RuleCall cImportsStaticImportParserRuleCall_0_0_1 = (RuleCall)cImportsAlternatives_0_0.eContents().get(1);
		private final Assignment cClassDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassDeclarationClassDeclarationParserRuleCall_1_0 = (RuleCall)cClassDeclarationAssignment_1.eContents().get(0);
		
		//InjectionFile:
		//	imports+=(RegularImport | StaticImport)*
		//	classDeclaration=ClassDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=(RegularImport | StaticImport)* classDeclaration=ClassDeclaration
		public Group getGroup() { return cGroup; }
		
		//imports+=(RegularImport | StaticImport)*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//(RegularImport | StaticImport)
		public Alternatives getImportsAlternatives_0_0() { return cImportsAlternatives_0_0; }
		
		//RegularImport
		public RuleCall getImportsRegularImportParserRuleCall_0_0_0() { return cImportsRegularImportParserRuleCall_0_0_0; }
		
		//StaticImport
		public RuleCall getImportsStaticImportParserRuleCall_0_0_1() { return cImportsStaticImportParserRuleCall_0_0_1; }
		
		//classDeclaration=ClassDeclaration
		public Assignment getClassDeclarationAssignment_1() { return cClassDeclarationAssignment_1; }
		
		//ClassDeclaration
		public RuleCall getClassDeclarationClassDeclarationParserRuleCall_1_0() { return cClassDeclarationClassDeclarationParserRuleCall_1_0; }
	}
	public class RegularImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.moflon.emf.injection.InjectionLanguage.RegularImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RegularImport:
		//	'import' namespace=QualifiedNameWithWildcard ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'import' namespace=QualifiedNameWithWildcard ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//namespace=QualifiedNameWithWildcard
		public Assignment getNamespaceAssignment_1() { return cNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class StaticImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.moflon.emf.injection.InjectionLanguage.StaticImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStaticKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNamespaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNamespaceQualifiedNameWithWildcardParserRuleCall_2_0 = (RuleCall)cNamespaceAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StaticImport:
		//	'import' 'static' namespace=QualifiedNameWithWildcard ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'import' 'static' namespace=QualifiedNameWithWildcard ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//'static'
		public Keyword getStaticKeyword_1() { return cStaticKeyword_1; }
		
		//namespace=QualifiedNameWithWildcard
		public Assignment getNamespaceAssignment_2() { return cNamespaceAssignment_2; }
		
		//QualifiedNameWithWildcard
		public RuleCall getNamespaceQualifiedNameWithWildcardParserRuleCall_2_0() { return cNamespaceQualifiedNameWithWildcardParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.moflon.emf.injection.InjectionLanguage.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.moflon.emf.injection.InjectionLanguage.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class ClassDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.moflon.emf.injection.InjectionLanguage.ClassDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsJavaAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cPartialKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cClassKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClassNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassNameIDTerminalRuleCall_3_0 = (RuleCall)cClassNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cClassInjectionDeclarationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cClassInjectionDeclarationClassInjectionDeclarationParserRuleCall_5_0 = (RuleCall)cClassInjectionDeclarationAssignment_5.eContents().get(0);
		private final Assignment cMethodDeclarationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMethodDeclarationsMethodDeclarationParserRuleCall_6_0 = (RuleCall)cMethodDeclarationsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ClassDeclaration:
		//	annotations+=JavaAnnotation*
		//	'partial' 'class' className=ID '{'
		//	classInjectionDeclaration=ClassInjectionDeclaration?
		//	methodDeclarations+=MethodDeclaration*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=JavaAnnotation* 'partial' 'class' className=ID '{' classInjectionDeclaration=ClassInjectionDeclaration?
		//methodDeclarations+=MethodDeclaration* '}'
		public Group getGroup() { return cGroup; }
		
		//annotations+=JavaAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//JavaAnnotation
		public RuleCall getAnnotationsJavaAnnotationParserRuleCall_0_0() { return cAnnotationsJavaAnnotationParserRuleCall_0_0; }
		
		//'partial'
		public Keyword getPartialKeyword_1() { return cPartialKeyword_1; }
		
		//'class'
		public Keyword getClassKeyword_2() { return cClassKeyword_2; }
		
		//className=ID
		public Assignment getClassNameAssignment_3() { return cClassNameAssignment_3; }
		
		//ID
		public RuleCall getClassNameIDTerminalRuleCall_3_0() { return cClassNameIDTerminalRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//classInjectionDeclaration=ClassInjectionDeclaration?
		public Assignment getClassInjectionDeclarationAssignment_5() { return cClassInjectionDeclarationAssignment_5; }
		
		//ClassInjectionDeclaration
		public RuleCall getClassInjectionDeclarationClassInjectionDeclarationParserRuleCall_5_0() { return cClassInjectionDeclarationClassInjectionDeclarationParserRuleCall_5_0; }
		
		//methodDeclarations+=MethodDeclaration*
		public Assignment getMethodDeclarationsAssignment_6() { return cMethodDeclarationsAssignment_6; }
		
		//MethodDeclaration
		public RuleCall getMethodDeclarationsMethodDeclarationParserRuleCall_6_0() { return cMethodDeclarationsMethodDeclarationParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class JavaAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.moflon.emf.injection.InjectionLanguage.JavaAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParameterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterSTRINGTerminalRuleCall_3_0 = (RuleCall)cParameterAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//JavaAnnotation:
		//	'@' name=ID '(' parameter=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'@' name=ID '(' parameter=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//parameter=STRING
		public Assignment getParameterAssignment_3() { return cParameterAssignment_3; }
		
		//STRING
		public RuleCall getParameterSTRINGTerminalRuleCall_3_0() { return cParameterSTRINGTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ClassInjectionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.moflon.emf.injection.InjectionLanguage.ClassInjectionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMembersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyCODE_BLOCKTerminalRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//ClassInjectionDeclaration:
		//	'@members' body=CODE_BLOCK;
		@Override public ParserRule getRule() { return rule; }
		
		//'@members' body=CODE_BLOCK
		public Group getGroup() { return cGroup; }
		
		//'@members'
		public Keyword getMembersKeyword_0() { return cMembersKeyword_0; }
		
		//body=CODE_BLOCK
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//CODE_BLOCK
		public RuleCall getBodyCODE_BLOCKTerminalRuleCall_1_0() { return cBodyCODE_BLOCKTerminalRuleCall_1_0; }
	}
	public class MethodDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.moflon.emf.injection.InjectionLanguage.MethodDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMethodNameIDTerminalRuleCall_1_0 = (RuleCall)cMethodNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersParameterDeclarationParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersParameterDeclarationParserRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyCODE_BLOCKTerminalRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//MethodDeclaration:
		//	'@model' methodName=ID '(' parameters+=ParameterDeclaration? (',' parameters+=ParameterDeclaration)* ')'
		//	body=CODE_BLOCK;
		@Override public ParserRule getRule() { return rule; }
		
		//'@model' methodName=ID '(' parameters+=ParameterDeclaration? (',' parameters+=ParameterDeclaration)* ')' body=CODE_BLOCK
		public Group getGroup() { return cGroup; }
		
		//'@model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//methodName=ID
		public Assignment getMethodNameAssignment_1() { return cMethodNameAssignment_1; }
		
		//ID
		public RuleCall getMethodNameIDTerminalRuleCall_1_0() { return cMethodNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//parameters+=ParameterDeclaration?
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }
		
		//ParameterDeclaration
		public RuleCall getParametersParameterDeclarationParserRuleCall_3_0() { return cParametersParameterDeclarationParserRuleCall_3_0; }
		
		//(',' parameters+=ParameterDeclaration)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//parameters+=ParameterDeclaration
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }
		
		//ParameterDeclaration
		public RuleCall getParametersParameterDeclarationParserRuleCall_4_1_0() { return cParametersParameterDeclarationParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//body=CODE_BLOCK
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//CODE_BLOCK
		public RuleCall getBodyCODE_BLOCKTerminalRuleCall_6_0() { return cBodyCODE_BLOCKTerminalRuleCall_6_0; }
	}
	public class ParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.moflon.emf.injection.InjectionLanguage.ParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterTypeQualifiedNameParserRuleCall_0_0 = (RuleCall)cParameterTypeAssignment_0.eContents().get(0);
		private final Assignment cParameterNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterNameIDTerminalRuleCall_1_0 = (RuleCall)cParameterNameAssignment_1.eContents().get(0);
		
		//ParameterDeclaration:
		//	parameterType=QualifiedName parameterName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//parameterType=QualifiedName parameterName=ID
		public Group getGroup() { return cGroup; }
		
		//parameterType=QualifiedName
		public Assignment getParameterTypeAssignment_0() { return cParameterTypeAssignment_0; }
		
		//QualifiedName
		public RuleCall getParameterTypeQualifiedNameParserRuleCall_0_0() { return cParameterTypeQualifiedNameParserRuleCall_0_0; }
		
		//parameterName=ID
		public Assignment getParameterNameAssignment_1() { return cParameterNameAssignment_1; }
		
		//ID
		public RuleCall getParameterNameIDTerminalRuleCall_1_0() { return cParameterNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final InjectionFileElements pInjectionFile;
	private final RegularImportElements pRegularImport;
	private final StaticImportElements pStaticImport;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final ClassDeclarationElements pClassDeclaration;
	private final JavaAnnotationElements pJavaAnnotation;
	private final ClassInjectionDeclarationElements pClassInjectionDeclaration;
	private final MethodDeclarationElements pMethodDeclaration;
	private final ParameterDeclarationElements pParameterDeclaration;
	private final TerminalRule tBLOCK_BEGIN;
	private final TerminalRule tBLOCK_END;
	private final TerminalRule tCODE_BLOCK;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public InjectionLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pInjectionFile = new InjectionFileElements();
		this.pRegularImport = new RegularImportElements();
		this.pStaticImport = new StaticImportElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pClassDeclaration = new ClassDeclarationElements();
		this.pJavaAnnotation = new JavaAnnotationElements();
		this.pClassInjectionDeclaration = new ClassInjectionDeclarationElements();
		this.pMethodDeclaration = new MethodDeclarationElements();
		this.pParameterDeclaration = new ParameterDeclarationElements();
		this.tBLOCK_BEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.moflon.emf.injection.InjectionLanguage.BLOCK_BEGIN");
		this.tBLOCK_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.moflon.emf.injection.InjectionLanguage.BLOCK_END");
		this.tCODE_BLOCK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.moflon.emf.injection.InjectionLanguage.CODE_BLOCK");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.moflon.emf.injection.InjectionLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//InjectionFile:
	//	imports+=(RegularImport | StaticImport)*
	//	classDeclaration=ClassDeclaration;
	public InjectionFileElements getInjectionFileAccess() {
		return pInjectionFile;
	}
	
	public ParserRule getInjectionFileRule() {
		return getInjectionFileAccess().getRule();
	}
	
	//RegularImport:
	//	'import' namespace=QualifiedNameWithWildcard ';';
	public RegularImportElements getRegularImportAccess() {
		return pRegularImport;
	}
	
	public ParserRule getRegularImportRule() {
		return getRegularImportAccess().getRule();
	}
	
	//StaticImport:
	//	'import' 'static' namespace=QualifiedNameWithWildcard ';';
	public StaticImportElements getStaticImportAccess() {
		return pStaticImport;
	}
	
	public ParserRule getStaticImportRule() {
		return getStaticImportAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ClassDeclaration:
	//	annotations+=JavaAnnotation*
	//	'partial' 'class' className=ID '{'
	//	classInjectionDeclaration=ClassInjectionDeclaration?
	//	methodDeclarations+=MethodDeclaration*
	//	'}';
	public ClassDeclarationElements getClassDeclarationAccess() {
		return pClassDeclaration;
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}
	
	//JavaAnnotation:
	//	'@' name=ID '(' parameter=STRING ')';
	public JavaAnnotationElements getJavaAnnotationAccess() {
		return pJavaAnnotation;
	}
	
	public ParserRule getJavaAnnotationRule() {
		return getJavaAnnotationAccess().getRule();
	}
	
	//ClassInjectionDeclaration:
	//	'@members' body=CODE_BLOCK;
	public ClassInjectionDeclarationElements getClassInjectionDeclarationAccess() {
		return pClassInjectionDeclaration;
	}
	
	public ParserRule getClassInjectionDeclarationRule() {
		return getClassInjectionDeclarationAccess().getRule();
	}
	
	//MethodDeclaration:
	//	'@model' methodName=ID '(' parameters+=ParameterDeclaration? (',' parameters+=ParameterDeclaration)* ')'
	//	body=CODE_BLOCK;
	public MethodDeclarationElements getMethodDeclarationAccess() {
		return pMethodDeclaration;
	}
	
	public ParserRule getMethodDeclarationRule() {
		return getMethodDeclarationAccess().getRule();
	}
	
	//ParameterDeclaration:
	//	parameterType=QualifiedName parameterName=ID;
	public ParameterDeclarationElements getParameterDeclarationAccess() {
		return pParameterDeclaration;
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}
	
	//terminal BLOCK_BEGIN:
	//	'<--';
	public TerminalRule getBLOCK_BEGINRule() {
		return tBLOCK_BEGIN;
	}
	
	//terminal BLOCK_END:
	//	'-->';
	public TerminalRule getBLOCK_ENDRule() {
		return tBLOCK_END;
	}
	
	//terminal CODE_BLOCK:
	//	BLOCK_BEGIN .* BLOCK_END;
	public TerminalRule getCODE_BLOCKRule() {
		return tCODE_BLOCK;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
