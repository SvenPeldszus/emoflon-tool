package org.moflon.maave.tool.smt.solverutil;

import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;

import com.microsoft.z3.BoolExpr;
import com.microsoft.z3.Context;
import com.microsoft.z3.Solver;
import com.microsoft.z3.Status;

public class test
{

   public static void main(String[] args)
   {
      List<String> lst=new LinkedList<String>();
      for (int i = 0; i < 20; i++)
      {
         String smtStr=new String("(set-option :timeout 80000)\n(declare-datatypes () ((EX_STATE INIT REG_OPEN REG_CLOSED PERFORM CLOSED RECORDS)))\n(declare-const enrollment_cp!22 Int)\n(declare-const moduleOffer_cp!21 Int)\n(declare-const enrollment_cp_prime!14 Int)\n(declare-const rec_grade_prime!26 Int)\n(declare-const this_state!3 EX_STATE)\n(declare-const student_id!12 Int)\n(declare-const moduleOffer_cp!6 Int)\n(declare-const entry_studentId!24 Int)\n(declare-const entry_studentId!10 Int)\n(declare-const entry_grade!25 Int)\n(declare-const entry_grade!11 Int)\n(declare-const rec_grade_prime!13 Int)\n(declare-const this_state!18 EX_STATE)\n(define-fun geNAT ((x!0 Int)(x!1 Int)) Bool(> x!0 x!1))\n(define-fun addNat ((x!0 Int)(x!1 Int)(x!2 Int)) Bool(= x!0 (+ x!1 x!2)))\n(define-fun isLeqNAT ((x!0 Int)(x!1 Int)(x!2 Bool)) Bool(= (<= x!0 x!1) x!2))\n(define-fun iteNAT ((x!0 Bool)(x!1 Int)(x!2 Int)(x!3 Int))Bool(and  (=> x!0 (= x!1 x!2))  (=> (not x!0) (= x!1 x!3))))\n(define-fun eqNAT ((x!0 Int)(x!1 Int)) Bool(= x!0 x!1))\n(define-fun leqNAT ((x!0 Int)(x!1 Int)) Bool(<= x!0 x!1))\n(define-fun eqEX_STATE((x!1 EX_STATE)(x!2 EX_STATE)) Bool (=  x!1 x!2) )\n\n(assert  \n (not \n        (= \n          (exists((rec_grade_prime!!0 Int) (enrollment_cp_prime!!1 Int) (passed!!2 Bool) (newCP!!3 Int) (rec_grade_prime!!4 Int) (enrollment_cp_prime!!5 Int) (passed!!6 Bool) (newCP!!7 Int) (enrollment_cp_prime!!8 Int) (passed!!9 Bool) (newCP!!10 Int) (passed!!11 Bool) (newCP!!12 Int) ) (and (eqEX_STATE this_state!18 RECORDS) (eqNAT student_id!12 entry_studentId!24) (leqNAT entry_grade!25 5) (geNAT entry_grade!25 0) (eqNAT rec_grade_prime!!4 entry_grade!25) (isLeqNAT entry_grade!25 4 passed!!6) (iteNAT passed!!6 enrollment_cp_prime!!5 newCP!!7 enrollment_cp!22) (addNat newCP!!7 enrollment_cp!22 moduleOffer_cp!21) (eqEX_STATE this_state!3 RECORDS) (eqNAT student_id!12 entry_studentId!10) (leqNAT entry_grade!11 5) (geNAT entry_grade!11 0) (eqNAT rec_grade_prime!!0 entry_grade!11) (isLeqNAT entry_grade!11 4 passed!!2) (iteNAT passed!!2 enrollment_cp_prime!!1 newCP!!3 enrollment_cp!22) (addNat newCP!!3 enrollment_cp!22 moduleOffer_cp!6) (eqEX_STATE this_state!18 RECORDS) (eqNAT student_id!12 entry_studentId!24) (leqNAT entry_grade!25 5) (geNAT entry_grade!25 0) (eqNAT rec_grade_prime!26 entry_grade!25) (isLeqNAT entry_grade!25 4 passed!!11) (iteNAT passed!!11 enrollment_cp_prime!!8 newCP!!12 enrollment_cp!22) (addNat newCP!!12 enrollment_cp!22 moduleOffer_cp!21) (eqEX_STATE this_state!3 RECORDS) (eqNAT student_id!12 entry_studentId!10) (leqNAT entry_grade!11 5) (geNAT entry_grade!11 0) (eqNAT rec_grade_prime!13 entry_grade!11) (isLeqNAT entry_grade!11 4 passed!!9) (iteNAT passed!!9 enrollment_cp_prime!14 newCP!!10 enrollment_cp_prime!!8) (addNat newCP!!10 enrollment_cp_prime!!8 moduleOffer_cp!6) )  )             (exists((rec_grade_prime!!0 Int) (enrollment_cp_prime!!1 Int) (passed!!2 Bool) (newCP!!3 Int) (rec_grade_prime!!4 Int) (enrollment_cp_prime!!5 Int) (passed!!6 Bool) (newCP!!7 Int) (enrollment_cp_prime!!8 Int) (passed!!9 Bool) (newCP!!10 Int) (passed!!11 Bool) (newCP!!12 Int) ) (and (eqEX_STATE this_state!3 RECORDS) (eqNAT student_id!12 entry_studentId!10) (leqNAT entry_grade!11 5) (geNAT entry_grade!11 0) (eqNAT rec_grade_prime!!4 entry_grade!11) (isLeqNAT entry_grade!11 4 passed!!6) (iteNAT passed!!6 enrollment_cp_prime!!5 newCP!!7 enrollment_cp!22) (addNat newCP!!7 enrollment_cp!22 moduleOffer_cp!6) (eqEX_STATE this_state!18 RECORDS) (eqNAT student_id!12 entry_studentId!24) (leqNAT entry_grade!25 5) (geNAT entry_grade!25 0) (eqNAT rec_grade_prime!!0 entry_grade!25) (isLeqNAT entry_grade!25 4 passed!!2) (iteNAT passed!!2 enrollment_cp_prime!!1 newCP!!3 enrollment_cp!22) (addNat newCP!!3 enrollment_cp!22 moduleOffer_cp!21) (eqEX_STATE this_state!18 RECORDS) (eqNAT student_id!12 entry_studentId!24) (leqNAT entry_grade!25 5) (geNAT entry_grade!25 0) (eqNAT rec_grade_prime!26 entry_grade!25) (isLeqNAT entry_grade!25 4 passed!!11) (iteNAT passed!!11 enrollment_cp_prime!!8 newCP!!12 enrollment_cp!22) (addNat newCP!!12 enrollment_cp!22 moduleOffer_cp!21) (eqEX_STATE this_state!3 RECORDS) (eqNAT student_id!12 entry_studentId!10) (leqNAT entry_grade!11 5) (geNAT entry_grade!11 0) (eqNAT rec_grade_prime!13 entry_grade!11) (isLeqNAT entry_grade!11 4 passed!!9) (iteNAT passed!!9 enrollment_cp_prime!14 newCP!!10 enrollment_cp_prime!!8) (addNat newCP!!10 enrollment_cp_prime!!8 moduleOffer_cp!6) )  )          )\n   )\n)\n(check-sat)");
         lst.add(smtStr);
         
      }
      
      List<Status>lst2=lst.parallelStream().map(x->check(x)).collect(Collectors.toList());

//      for (int i = 0; i < 20; i++)
//      {
//         Z3AttribSolver solver =new Z3AttribSolver();
//         String smtStr=new String("\n(set-option :verbose 0)\n(declare-datatypes () ((EX_STATE INIT REG_OPEN REG_CLOSED PERFORM CLOSED RECORDS)))\n(declare-const enrollment_cp!22 Int)\n(declare-const moduleOffer_cp!21 Int)\n(declare-const enrollment_cp_prime!14 Int)\n(declare-const rec_grade_prime!26 Int)\n(declare-const this_state!3 EX_STATE)\n(declare-const student_id!12 Int)\n(declare-const moduleOffer_cp!6 Int)\n(declare-const entry_studentId!24 Int)\n(declare-const entry_studentId!10 Int)\n(declare-const entry_grade!25 Int)\n(declare-const entry_grade!11 Int)\n(declare-const rec_grade_prime!13 Int)\n(declare-const this_state!18 EX_STATE)\n(define-fun geNAT ((x!0 Int)(x!1 Int)) Bool(> x!0 x!1))\n(define-fun addNat ((x!0 Int)(x!1 Int)(x!2 Int)) Bool(= x!0 (+ x!1 x!2)))\n(define-fun isLeqNAT ((x!0 Int)(x!1 Int)(x!2 Bool)) Bool(= (<= x!0 x!1) x!2))\n(define-fun iteNAT ((x!0 Bool)(x!1 Int)(x!2 Int)(x!3 Int))Bool(and  (=> x!0 (= x!1 x!2))  (=> (not x!0) (= x!1 x!3))))\n(define-fun eqNAT ((x!0 Int)(x!1 Int)) Bool(= x!0 x!1))\n(define-fun leqNAT ((x!0 Int)(x!1 Int)) Bool(<= x!0 x!1))\n(define-fun eqEX_STATE((x!1 EX_STATE)(x!2 EX_STATE)) Bool (=  x!1 x!2) )\n\n(assert  \n (not \n        (= \n          (exists((rec_grade_prime!!0 Int) (enrollment_cp_prime!!1 Int) (passed!!2 Bool) (newCP!!3 Int) (rec_grade_prime!!4 Int) (enrollment_cp_prime!!5 Int) (passed!!6 Bool) (newCP!!7 Int) (enrollment_cp_prime!!8 Int) (passed!!9 Bool) (newCP!!10 Int) (passed!!11 Bool) (newCP!!12 Int) ) (and (eqEX_STATE this_state!18 RECORDS) (eqNAT student_id!12 entry_studentId!24) (leqNAT entry_grade!25 5) (geNAT entry_grade!25 0) (eqNAT rec_grade_prime!!4 entry_grade!25) (isLeqNAT entry_grade!25 4 passed!!6) (iteNAT passed!!6 enrollment_cp_prime!!5 newCP!!7 enrollment_cp!22) (addNat newCP!!7 enrollment_cp!22 moduleOffer_cp!21) (eqEX_STATE this_state!3 RECORDS) (eqNAT student_id!12 entry_studentId!10) (leqNAT entry_grade!11 5) (geNAT entry_grade!11 0) (eqNAT rec_grade_prime!!0 entry_grade!11) (isLeqNAT entry_grade!11 4 passed!!2) (iteNAT passed!!2 enrollment_cp_prime!!1 newCP!!3 enrollment_cp!22) (addNat newCP!!3 enrollment_cp!22 moduleOffer_cp!6) (eqEX_STATE this_state!18 RECORDS) (eqNAT student_id!12 entry_studentId!24) (leqNAT entry_grade!25 5) (geNAT entry_grade!25 0) (eqNAT rec_grade_prime!26 entry_grade!25) (isLeqNAT entry_grade!25 4 passed!!11) (iteNAT passed!!11 enrollment_cp_prime!!8 newCP!!12 enrollment_cp!22) (addNat newCP!!12 enrollment_cp!22 moduleOffer_cp!21) (eqEX_STATE this_state!3 RECORDS) (eqNAT student_id!12 entry_studentId!10) (leqNAT entry_grade!11 5) (geNAT entry_grade!11 0) (eqNAT rec_grade_prime!13 entry_grade!11) (isLeqNAT entry_grade!11 4 passed!!9) (iteNAT passed!!9 enrollment_cp_prime!14 newCP!!10 enrollment_cp_prime!!8) (addNat newCP!!10 enrollment_cp_prime!!8 moduleOffer_cp!6) )  )             (exists((rec_grade_prime!!0 Int) (enrollment_cp_prime!!1 Int) (passed!!2 Bool) (newCP!!3 Int) (rec_grade_prime!!4 Int) (enrollment_cp_prime!!5 Int) (passed!!6 Bool) (newCP!!7 Int) (enrollment_cp_prime!!8 Int) (passed!!9 Bool) (newCP!!10 Int) (passed!!11 Bool) (newCP!!12 Int) ) (and (eqEX_STATE this_state!3 RECORDS) (eqNAT student_id!12 entry_studentId!10) (leqNAT entry_grade!11 5) (geNAT entry_grade!11 0) (eqNAT rec_grade_prime!!4 entry_grade!11) (isLeqNAT entry_grade!11 4 passed!!6) (iteNAT passed!!6 enrollment_cp_prime!!5 newCP!!7 enrollment_cp!22) (addNat newCP!!7 enrollment_cp!22 moduleOffer_cp!6) (eqEX_STATE this_state!18 RECORDS) (eqNAT student_id!12 entry_studentId!24) (leqNAT entry_grade!25 5) (geNAT entry_grade!25 0) (eqNAT rec_grade_prime!!0 entry_grade!25) (isLeqNAT entry_grade!25 4 passed!!2) (iteNAT passed!!2 enrollment_cp_prime!!1 newCP!!3 enrollment_cp!22) (addNat newCP!!3 enrollment_cp!22 moduleOffer_cp!21) (eqEX_STATE this_state!18 RECORDS) (eqNAT student_id!12 entry_studentId!24) (leqNAT entry_grade!25 5) (geNAT entry_grade!25 0) (eqNAT rec_grade_prime!26 entry_grade!25) (isLeqNAT entry_grade!25 4 passed!!11) (iteNAT passed!!11 enrollment_cp_prime!!8 newCP!!12 enrollment_cp!22) (addNat newCP!!12 enrollment_cp!22 moduleOffer_cp!21) (eqEX_STATE this_state!3 RECORDS) (eqNAT student_id!12 entry_studentId!10) (leqNAT entry_grade!11 5) (geNAT entry_grade!11 0) (eqNAT rec_grade_prime!13 entry_grade!11) (isLeqNAT entry_grade!11 4 passed!!9) (iteNAT passed!!9 enrollment_cp_prime!14 newCP!!10 enrollment_cp_prime!!8) (addNat newCP!!10 enrollment_cp_prime!!8 moduleOffer_cp!6) )  )          )\n   )\n)\n(check-sat)");
////         String smtStr="(help)";
//         System.out.println(smtStr);
//         Status s=solver.check(smtStr);
//         System.out.println(s.toString());
//         
//      }   
   }

   public static Status check(String smtStr)
   {
      Context ctx= new Context();
      BoolExpr eq =ctx.parseSMTLIB2String(smtStr, null, null, null, null);
      Solver s=ctx.mkSolver();
      s.add(eq);
      Status status=s.check();
      s.dispose();
      ctx.dispose();
//      System.out.print("X");
      return status;
   }
}
