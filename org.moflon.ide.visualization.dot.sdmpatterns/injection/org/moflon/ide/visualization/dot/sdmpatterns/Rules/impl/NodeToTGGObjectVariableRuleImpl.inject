
import org.moflon.csp.CSPFactoryHelper;
import org.moflon.util.eMoflonSDMUtil;
import org.moflon.ide.visualization.dot.language.*;
import org.moflon.ide.visualization.dot.sdmpatterns.*;
import SDMLanguage.patterns.AttributeAssignment;
import SDMLanguage.patterns.Constraint;
import SDMLanguage.patterns.StoryPattern;
import org.moflon.tgg.language.TGGObjectVariable;
import org.moflon.tgg.language.csp.CSP;
import org.moflon.tgg.language.csp.CspFactory;
import org.moflon.tgg.language.csp.Variable;
import org.moflon.tgg.runtime.*;
import csp.constraints.BoldToState;
import csp.constraints.Concat;
import csp.constraints.SetColor;
import org.moflon.csp.*;
import csp.constraints.*;
import org.moflon.tgg.language.csp.*;
import org.moflon.csp.*;
import csp.constraints.*;
import org.moflon.tgg.language.csp.*;
import org.moflon.tgg.runtime.TripleMatchNodeMapping;
import java.util.Optional;
import org.moflon.csp.*;
import csp.constraints.*;
import org.moflon.tgg.language.csp.*;
import org.moflon.tgg.runtime.TripleMatchNodeMapping;
import java.util.Optional;

partial class NodeToTGGObjectVariableRuleImpl {



@model postProcessBACKWARD (TGGObjectVariable trg__ov, Record ov) <--

      for (Constraint constraint : trg__ov.getConstraint())
      {
         RecordEntry entry = LanguageFactory.eINSTANCE.createRecordEntry();
         entry.setValue(eMoflonSDMUtil.extractConstraint(constraint).replace("\"", "\\\""));
         ov.getEntries().add(entry);
      }

      for (AttributeAssignment attributeAssignment : trg__ov.getAttributeAssignment())
      {
         RecordEntry entry = LanguageFactory.eINSTANCE.createRecordEntry();
         entry.setValue(eMoflonSDMUtil.extractAttributeAssignment(attributeAssignment).replace("\"", "\\\""));
         ov.getEntries().add(entry);
      }

      if (trg__ov.getBindingExpression() != null)
      {
         ov.setLabel(ov.getLabel() + " := " + eMoflonSDMUtil.extractExpression(trg__ov.getBindingExpression(), "").replace("\"", "\\\""));
      }
-->

}