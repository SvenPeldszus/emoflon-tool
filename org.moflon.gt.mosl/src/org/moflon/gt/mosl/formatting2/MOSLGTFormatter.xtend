/*
 * generated by Xtext 2.12.0
 */
package org.moflon.gt.mosl.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.moflon.gt.mosl.moslgt.EClassDef
import org.moflon.gt.mosl.moslgt.GraphTransformationFile
import org.moflon.gt.mosl.moslgt.Import
import org.moflon.gt.mosl.moslgt.NACAndObjectVariable
import org.moflon.gt.mosl.moslgt.PatternDef
import org.moflon.gt.mosl.moslgt.PatternParameter
import org.moflon.gt.mosl.moslgt.Using
import org.moflon.gt.mosl.services.MOSLGTGrammarAccess

class MOSLGTFormatter extends AbstractFormatter2 {
	
	@Inject extension MOSLGTGrammarAccess

	def dispatch void format(GraphTransformationFile graphTransformationFile, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Import _import : graphTransformationFile.getImports()) {
			_import.format;
		}
		for (Using using : graphTransformationFile.getUsing()) {
			using.format;
		}
		for (EClassDef eClassDef : graphTransformationFile.getEClasses()) {
			eClassDef.format;
		}
	}

	def dispatch void format(PatternDef patternDef, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (PatternParameter patternParameter : patternDef.getParameters()) {
			patternParameter.format;
		}
		for (NACAndObjectVariable nACAndObjectVariable : patternDef.getVariables()) {
			nACAndObjectVariable.format;
		}
	}
	
	// TODO: implement for NACGroup, PatternParameter, EClassDef, MethodDec, CalledPatternParameter, NextStatement, PatternStatement, ConditionStatement, Condition, WhileLoopStatement, DoLoopStatement, ForLoopStatement, ObjectVariableDefinition, AttributeConstraint, AttributeAssignment, LinkVariablePattern
}
