group eclass;

classes(classes, enums, datatypes) ::= <<
<classes>
<enums>
<datatypes>
>>

datatype(name, type) ::= <<
datatype <name> = "<type>"
>>

enum(name, literals) ::= <<
enum <name> {
	<literals>
}
>>

literals(literals) ::= <<
<literals; separator="\n">
>>

literal(name, value) ::= <<
<name> := <value>
>>

class(name, base, typedefs, attributes, references, operations, abstract) ::= <<
<abstract> class <name> <if (base)>extends <base> <endif>{
	<typedefs>
	<attributes>	
	<references>	
	<operations>
}
>>

references(references) ::= <<
<references; separator="\n">
>>

reference(name, type, multiplicity, diamond) ::= "<diamond> - <name> <multiplicity> -\> <type>"

multiplicity(lower, upper) ::= <<
(<lower>..<upper>)
>>

typedef(name, path) ::= "typedef <name> <path>"

attributes(attributes) ::= <<
<attributes; separator="\n">
>>

attribute(name, type) ::= "<name> : <type>"

operations(operations) ::= <<
<operations; separator="\n">
>>

operation(name, type, parameters, body) ::= "<name>(<parameters>) : <type> <body>"

parameters(parameters) ::= <<
<parameters; separator=", ">
>>

parameter(name, type) ::= <<
<name> : <type>
>>

method_body(body) ::= "{<body><\n>}"

single_statement(statement) ::= "<statement>"

simple_statement(statement) ::= "<\n><\t><statement>"

statement_list(statements) ::= "<statements>"

return_statement(value) ::= "return <value>"

call_statement(value) ::= "\<<value>\>"

pattern_statement(name) ::= "[<name>]"

if_statement(test,then,otherwise) ::= <<
<\t>if <test> {<\t><then>
<\t>}<if (otherwise)>
else {<\t><otherwise>
<\t>}<endif>
>>

foreach_statement(test,body) ::= "<\n><\t>forEach <test> <if (body)>{<\t><body><\n>}<endif>"

while_statement(test, then) ::= "<\n><\t>while <test>{<then><\n>}"

do_statement(do, test) ::="<\n><\t>do{<\t><do><\n>}while <test>"

// Expressions

expression(expression) ::= <<
<expression>
>>

undefined_expression(value) ::= "'<value>'"

string_expression(value) ::= <<
"<value>"
>>

literal_expression(value) ::= <<
<value>
>>

parameter_expression(name) ::= <<
$<name>
>>

object_variable_expression(name) ::= <<
@<name>
>>

method_call_expression(target, method, arguments) ::= <<
<target>.<method>(<arguments; separator=", ">)
>>

attribute_value_expression(object, attribute) ::= <<
<object>.<attribute>
>>

arguments(arguments) ::= <<
<arguments; separator=", ">
>>

argument(value) ::= <<
<value>
>>

dummy(arg) ::= "<arg>"