Index: velocity/src/java/org/apache/velocity/runtime/parser/node/ASTWhitespaceStatement.java
===================================================================
--- velocity/src/java/org/apache/velocity/runtime/parser/node/ASTWhitespaceStatement.java	(revision 0)
+++ velocity/src/java/org/apache/velocity/runtime/parser/node/ASTWhitespaceStatement.java	(revision 0)
@@ -0,0 +1,22 @@
+/* Generated By:JJTree: Do not edit this line. ASTWhitespaceStatement.java */
+
+package org.apache.velocity.runtime.parser.node;
+
+import org.apache.velocity.runtime.parser.Parser;
+import org.apache.velocity.runtime.parser.ParserVisitor;
+
+public class ASTWhitespaceStatement extends SimpleNode {
+  public ASTWhitespaceStatement(int id) {
+    super(id);
+  }
+
+  public ASTWhitespaceStatement(Parser p, int id) {
+    super(p, id);
+  }
+
+
+  /** Accept the visitor. **/
+  public Object jjtAccept(ParserVisitor visitor, Object data) {
+    return visitor.visit(this, data);
+  }
+}
Index: velocity/src/java/org/apache/velocity/runtime/parser/node/ASTStringLiteral.java
===================================================================
--- velocity/src/java/org/apache/velocity/runtime/parser/node/ASTStringLiteral.java	(revision 654045)
+++ velocity/src/java/org/apache/velocity/runtime/parser/node/ASTStringLiteral.java	(working copy)
@@ -19,11 +19,6 @@
  * under the License.    
  */
 
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.StringReader;
-import java.io.StringWriter;
-
 import org.apache.velocity.context.InternalContextAdapter;
 import org.apache.velocity.exception.MethodInvocationException;
 import org.apache.velocity.exception.ParseErrorException;
@@ -34,6 +29,11 @@
 import org.apache.velocity.runtime.parser.Parser;
 import org.apache.velocity.runtime.parser.ParserVisitor;
 
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.StringReader;
+import java.io.StringWriter;
+
 /**
  * ASTStringLiteral support.  Will interpolate!
  *
@@ -267,4 +267,9 @@
 
         return image;
     }
+
+   public Node getNodeTree()
+   {
+      return nodeTree;
+   }
 }
Index: velocity/src/java/org/apache/velocity/runtime/parser/JJTParserState.java
===================================================================
--- velocity/src/java/org/apache/velocity/runtime/parser/JJTParserState.java	(revision 654045)
+++ velocity/src/java/org/apache/velocity/runtime/parser/JJTParserState.java	(working copy)
@@ -1,10 +1,9 @@
-/* Generated By:JJTree: Do not edit this line. JJTParserState.java */
+/* Generated By:JJTree: Do not edit this line. c:\Dokumente und Einstellungen\mbork\Eigene Dateien\workspace\Velocity_1.5\target\generated-sources\jjtree\org\apache\velocity\runtime\parser\JJTParserState.java */
 
 package org.apache.velocity.runtime.parser;
 
 import org.apache.velocity.runtime.parser.node.Node;
 
-
 class JJTParserState {
   private java.util.Stack nodes;
   private java.util.Stack marks;
Index: velocity/src/java/org/apache/velocity/runtime/parser/ParserTreeConstants.java
===================================================================
--- velocity/src/java/org/apache/velocity/runtime/parser/ParserTreeConstants.java	(revision 654045)
+++ velocity/src/java/org/apache/velocity/runtime/parser/ParserTreeConstants.java	(working copy)
@@ -1,4 +1,4 @@
-/* Generated By:JJTree: Do not edit this line. /Users/hgschmie/scratch/velocity/engine/src/java/org/apache/velocity/runtime/parser/ParserTreeConstants.java */
+/* Generated By:JJTree: Do not edit this line. c:\Dokumente und Einstellungen\mbork\Eigene Dateien\workspace\Velocity_1.5\target\generated-sources\jjtree\org\apache\velocity\runtime\parser\ParserTreeConstants.java */
 
 package org.apache.velocity.runtime.parser;
 
@@ -29,22 +29,23 @@
   public int JJTELSEIFSTATEMENT = 22;
   public int JJTSETDIRECTIVE = 23;
   public int JJTSTOP = 24;
-  public int JJTEXPRESSION = 25;
-  public int JJTASSIGNMENT = 26;
-  public int JJTORNODE = 27;
-  public int JJTANDNODE = 28;
-  public int JJTEQNODE = 29;
-  public int JJTNENODE = 30;
-  public int JJTLTNODE = 31;
-  public int JJTGTNODE = 32;
-  public int JJTLENODE = 33;
-  public int JJTGENODE = 34;
-  public int JJTADDNODE = 35;
-  public int JJTSUBTRACTNODE = 36;
-  public int JJTMULNODE = 37;
-  public int JJTDIVNODE = 38;
-  public int JJTMODNODE = 39;
-  public int JJTNOTNODE = 40;
+  public int JJTWHITESPACESTATEMENT = 25;
+  public int JJTEXPRESSION = 26;
+  public int JJTASSIGNMENT = 27;
+  public int JJTORNODE = 28;
+  public int JJTANDNODE = 29;
+  public int JJTEQNODE = 30;
+  public int JJTNENODE = 31;
+  public int JJTLTNODE = 32;
+  public int JJTGTNODE = 33;
+  public int JJTLENODE = 34;
+  public int JJTGENODE = 35;
+  public int JJTADDNODE = 36;
+  public int JJTSUBTRACTNODE = 37;
+  public int JJTMULNODE = 38;
+  public int JJTDIVNODE = 39;
+  public int JJTMODNODE = 40;
+  public int JJTNOTNODE = 41;
 
 
   public String[] jjtNodeName = {
@@ -73,6 +74,7 @@
     "ElseIfStatement",
     "SetDirective",
     "Stop",
+    "WhitespaceStatement",
     "Expression",
     "Assignment",
     "OrNode",
Index: velocity/src/java/org/apache/velocity/runtime/parser/ParserVisitor.java
===================================================================
--- velocity/src/java/org/apache/velocity/runtime/parser/ParserVisitor.java	(revision 654045)
+++ velocity/src/java/org/apache/velocity/runtime/parser/ParserVisitor.java	(working copy)
@@ -1,24 +1,7 @@
+/* Generated By:JJTree: Do not edit this line. c:\Dokumente und Einstellungen\mbork\Eigene Dateien\workspace\Velocity_1.5\target\generated-sources\jjtree\org\apache\velocity\runtime\parser\ParserVisitor.java */
+
 package org.apache.velocity.runtime.parser;
 
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.    
- */
-
 import org.apache.velocity.runtime.parser.node.ASTAddNode;
 import org.apache.velocity.runtime.parser.node.ASTAndNode;
 import org.apache.velocity.runtime.parser.node.ASTAssignment;
@@ -57,305 +40,53 @@
 import org.apache.velocity.runtime.parser.node.ASTSubtractNode;
 import org.apache.velocity.runtime.parser.node.ASTText;
 import org.apache.velocity.runtime.parser.node.ASTTrue;
+import org.apache.velocity.runtime.parser.node.ASTWhitespaceStatement;
 import org.apache.velocity.runtime.parser.node.ASTWord;
 import org.apache.velocity.runtime.parser.node.ASTprocess;
 import org.apache.velocity.runtime.parser.node.SimpleNode;
 
-/**
- *
- */
 public interface ParserVisitor
 {
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(SimpleNode node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTprocess node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTEscapedDirective node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTEscape node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTComment node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTFloatingPointLiteral node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTIntegerLiteral node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTStringLiteral node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTIdentifier node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTWord node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTDirective node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTBlock node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTMap node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTObjectArray node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTIntegerRange node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTMethod node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTReference node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTTrue node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTFalse node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTText node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTIfStatement node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTElseStatement node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTElseIfStatement node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTSetDirective node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTStop node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
+  public Object visit(ASTWhitespaceStatement node, Object data);
   public Object visit(ASTExpression node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTAssignment node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTOrNode node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTAndNode node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTEQNode node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTNENode node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTLTNode node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTGTNode node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTLENode node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTGENode node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTAddNode node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTSubtractNode node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTMulNode node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTDivNode node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTModNode node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
   public Object visit(ASTNotNode node, Object data);
-
-  /**
-   * @param node
-   * @param data
-   * @return The object rendered by this node.
-   */
 }
Index: velocity/src/java/org/apache/velocity/runtime/parser/Parser.jj
===================================================================
--- velocity/src/java/org/apache/velocity/runtime/parser/Parser.jj	(revision 654045)
+++ velocity/src/java/org/apache/velocity/runtime/parser/Parser.jj	(working copy)
@@ -1,4 +1,4 @@
-/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. /Users/hgschmie/scratch/velocity/engine/src/java/org/apache/velocity/runtime/parser/Parser.jj */
+/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. c:\Dokumente und Einstellungen\mbork\Eigene Dateien\workspace\Velocity_1.5\src\java\org\apache\velocity\runtime\parser\Parser.jj */
 /*@egen*//*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -15,7 +15,7 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
- * under the License.
+ * under the License.    
  */
 
 /*
@@ -23,14 +23,14 @@
  *    to always have to page past it... :)
  */
 options
-{
+{
 
     /**
      * The parser must be non-static in order for the
      * above option to work, otherwise the parser value
      * is passed in as null, which isn't all the useful ;)
      */
-    STATIC=false;
+    STATIC=false;                                                                                                                                                                                                                                                                                                                       
 
     /**
      * Declare that we are accepting unicode input and
@@ -245,6 +245,7 @@
 
             if ( strDirective.substring(1).equals("if")
                 || strDirective.substring(1).equals("end")
+                || strDirective.substring(1).equals("%")
                 || strDirective.substring(1).equals("set")
                 || strDirective.substring(1).equals("else")
                 || strDirective.substring(1).equals("elseif")
@@ -713,7 +714,7 @@
 <IN_SINGLE_LINE_COMMENT>
 TOKEN :
 {
-  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n">
+  <SINGLE_LINE_COMMENT: (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   {
      inComment = false;
      stateStackPop();
@@ -721,17 +722,17 @@
 
 }
 
-<IN_FORMAL_COMMENT>
+<IN_FORMAL_COMMENT, IN_MULTI_LINE_COMMENT>
 TOKEN :
 {
-  <FORMAL_COMMENT: "*#" >
+  <FORMAL_COMMENT: ((~["*"])+("*"~["#"])*)* "*#" >
   {
     inComment = false;
     stateStackPop();
   }
 }
 
-<IN_MULTI_LINE_COMMENT>
+/*<IN_MULTI_LINE_COMMENT>
 TOKEN :
 {
   <MULTI_LINE_COMMENT: "*#" >
@@ -739,14 +740,8 @@
     inComment = false;
     stateStackPop();
   }
-}
+}*/
 
-<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
-SKIP :
-{
-  < ~[] >
-}
-
 /* -----------------------------------------------------------------------
  *
  *  DIRECTIVE Lexical State (some of it, anyway)
@@ -852,6 +847,12 @@
         inDirective = false;
         stateStackPop();
     }
+    
+|   <WHITESPACE_DIRECTIVE: "%" >
+    {
+        inDirective = false;
+        stateStackPop();
+    }
 
 |   <IF_DIRECTIVE: "if" | "{if}">
     {
@@ -1099,6 +1100,7 @@
 {
     IfStatement()
 |   StopStatement()
+|   WhitespaceStatement()
 |   LOOKAHEAD(2) Reference()
 |   Comment()
 |   SetDirective()
@@ -1187,6 +1189,7 @@
             case ELSE_DIRECTIVE :
             case ELSEIF_DIRECTIVE :
             case END :
+            case WHITESPACE_DIRECTIVE :
             case STOP_DIRECTIVE :
                 control = true;
                 break;
@@ -1224,7 +1227,7 @@
         try {
 /*@egen*/
 	<SINGLE_LINE_COMMENT_START> ( <SINGLE_LINE_COMMENT> ) ?
-|   <MULTI_LINE_COMMENT>
+/*|   <MULTI_LINE_COMMENT>*/
 |   <FORMAL_COMMENT>/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
@@ -2148,6 +2151,23 @@
 /*@egen*/
 }
 
+void WhitespaceStatement() : {/*@bgen(jjtree) WhitespaceStatement */
+  ASTWhitespaceStatement jjtn000 = new ASTWhitespaceStatement(this, JJTWHITESPACESTATEMENT);
+  boolean jjtc000 = true;
+  jjtree.openNodeScope(jjtn000);
+/*@egen*/}
+{/*@bgen(jjtree) WhitespaceStatement */
+    try {
+/*@egen*/
+    <WHITESPACE_DIRECTIVE>/*@bgen(jjtree)*/
+    } finally {
+      if (jjtc000) {
+        jjtree.closeNodeScope(jjtn000, true);
+      }
+    }
+/*@egen*/
+}
+
 /* -----------------------------------------------------------------------
  *
  *  Expression Syntax
Index: velocity/src/java/org/apache/velocity/runtime/parser/ParserTokenManager.java
===================================================================
--- velocity/src/java/org/apache/velocity/runtime/parser/ParserTokenManager.java	(revision 654045)
+++ velocity/src/java/org/apache/velocity/runtime/parser/ParserTokenManager.java	(working copy)
@@ -167,44 +167,44 @@
       case 0:
          if ((active0 & 0x10L) != 0L)
             return 53;
-         if ((active0 & 0x30000000L) != 0L)
+         if ((active0 & 0x80000000000L) != 0L)
+            return 45;
+         if ((active0 & 0xc000000L) != 0L)
          {
-            jjmatchedKind = 57;
+            jjmatchedKind = 56;
             return 58;
          }
-         if ((active0 & 0x200000000000L) != 0L)
-            return 45;
          if ((active0 & 0x40L) != 0L)
             return 60;
-         if ((active0 & 0x80000000L) != 0L)
+         if ((active0 & 0x20000000L) != 0L)
             return 96;
          if ((active0 & 0x70000L) != 0L)
             return 7;
          return -1;
       case 1:
-         if ((active0 & 0x30000000L) != 0L)
+         if ((active0 & 0x10000L) != 0L)
+            return 5;
+         if ((active0 & 0xc000000L) != 0L)
          {
-            jjmatchedKind = 57;
+            jjmatchedKind = 56;
             jjmatchedPos = 1;
             return 58;
          }
-         if ((active0 & 0x10000L) != 0L)
-            return 5;
          return -1;
       case 2:
-         if ((active0 & 0x30000000L) != 0L)
+         if ((active0 & 0xc000000L) != 0L)
          {
-            jjmatchedKind = 57;
+            jjmatchedKind = 56;
             jjmatchedPos = 2;
             return 58;
          }
          return -1;
       case 3:
-         if ((active0 & 0x10000000L) != 0L)
+         if ((active0 & 0x4000000L) != 0L)
             return 58;
-         if ((active0 & 0x20000000L) != 0L)
+         if ((active0 & 0x8000000L) != 0L)
          {
-            jjmatchedKind = 57;
+            jjmatchedKind = 56;
             jjmatchedPos = 3;
             return 58;
          }
@@ -239,33 +239,33 @@
          jjmatchedKind = 17;
          return jjMoveStringLiteralDfa1_0(0x50000L);
       case 37:
-         return jjStopAtPos(0, 35);
+         return jjStopAtPos(0, 33);
       case 40:
          return jjStopAtPos(0, 8);
       case 42:
-         return jjStopAtPos(0, 33);
+         return jjStopAtPos(0, 31);
       case 43:
-         return jjStopAtPos(0, 32);
+         return jjStopAtPos(0, 30);
       case 44:
          return jjStopAtPos(0, 3);
       case 45:
-         return jjStartNfaWithStates_0(0, 31, 96);
+         return jjStartNfaWithStates_0(0, 29, 96);
       case 46:
          return jjMoveStringLiteralDfa1_0(0x10L);
       case 47:
-         return jjStopAtPos(0, 34);
+         return jjStopAtPos(0, 32);
       case 58:
          return jjStopAtPos(0, 5);
       case 61:
-         return jjStartNfaWithStates_0(0, 45, 45);
+         return jjStartNfaWithStates_0(0, 43, 45);
       case 91:
          return jjStopAtPos(0, 1);
       case 93:
          return jjStopAtPos(0, 2);
       case 102:
-         return jjMoveStringLiteralDfa1_0(0x20000000L);
+         return jjMoveStringLiteralDfa1_0(0x8000000L);
       case 116:
-         return jjMoveStringLiteralDfa1_0(0x10000000L);
+         return jjMoveStringLiteralDfa1_0(0x4000000L);
       case 123:
          return jjStartNfaWithStates_0(0, 6, 60);
       case 125:
@@ -296,9 +296,9 @@
             return jjStopAtPos(1, 4);
          break;
       case 97:
-         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
+         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
       case 114:
-         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
+         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
       default :
          break;
    }
@@ -307,7 +307,7 @@
 private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
 {
    if (((active0 &= old0)) == 0L)
-      return jjStartNfa_0(0, old0);
+      return jjStartNfa_0(0, old0); 
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_0(1, active0);
@@ -316,9 +316,9 @@
    switch(curChar)
    {
       case 108:
-         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
+         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
       case 117:
-         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
+         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
       default :
          break;
    }
@@ -327,7 +327,7 @@
 private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
 {
    if (((active0 &= old0)) == 0L)
-      return jjStartNfa_0(1, old0);
+      return jjStartNfa_0(1, old0); 
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_0(2, active0);
@@ -336,11 +336,11 @@
    switch(curChar)
    {
       case 101:
-         if ((active0 & 0x10000000L) != 0L)
-            return jjStartNfaWithStates_0(3, 28, 58);
+         if ((active0 & 0x4000000L) != 0L)
+            return jjStartNfaWithStates_0(3, 26, 58);
          break;
       case 115:
-         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
+         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
       default :
          break;
    }
@@ -349,7 +349,7 @@
 private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
 {
    if (((active0 &= old0)) == 0L)
-      return jjStartNfa_0(2, old0);
+      return jjStartNfa_0(2, old0); 
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_0(3, active0);
@@ -358,8 +358,8 @@
    switch(curChar)
    {
       case 101:
-         if ((active0 & 0x20000000L) != 0L)
-            return jjStartNfaWithStates_0(4, 29, 58);
+         if ((active0 & 0x8000000L) != 0L)
+            return jjStartNfaWithStates_0(4, 27, 58);
          break;
       default :
          break;
@@ -424,14 +424,14 @@
                case 0:
                   if ((0x3ff000000000000L & l) != 0L)
                   {
-                     if (kind > 52)
-                        kind = 52;
+                     if (kind > 51)
+                        kind = 51;
                      jjCheckNAddStates(0, 5);
                   }
                   else if ((0x100002600L & l) != 0L)
                   {
-                     if (kind > 26)
-                        kind = 26;
+                     if (kind > 24)
+                        kind = 24;
                      jjCheckNAdd(9);
                   }
                   else if (curChar == 45)
@@ -446,8 +446,8 @@
                      jjCheckNAdd(53);
                   else if (curChar == 33)
                   {
-                     if (kind > 44)
-                        kind = 44;
+                     if (kind > 42)
+                        kind = 42;
                   }
                   else if (curChar == 61)
                      jjstateSet[jjnewStateCnt++] = 45;
@@ -471,20 +471,20 @@
                   }
                   if ((0x2400L & l) != 0L)
                   {
-                     if (kind > 30)
-                        kind = 30;
+                     if (kind > 28)
+                        kind = 28;
                   }
                   else if (curChar == 33)
                      jjstateSet[jjnewStateCnt++] = 49;
                   else if (curChar == 62)
                   {
-                     if (kind > 40)
-                        kind = 40;
+                     if (kind > 38)
+                        kind = 38;
                   }
                   else if (curChar == 60)
                   {
-                     if (kind > 38)
-                        kind = 38;
+                     if (kind > 36)
+                        kind = 36;
                   }
                   if (curChar == 13)
                      jjstateSet[jjnewStateCnt++] = 28;
@@ -498,8 +498,8 @@
                      jjCheckNAddTwoStates(85, 86);
                   if ((0x3ff000000000000L & l) != 0L)
                   {
-                     if (kind > 52)
-                        kind = 52;
+                     if (kind > 51)
+                        kind = 51;
                      jjCheckNAddTwoStates(82, 84);
                   }
                   break;
@@ -538,8 +538,8 @@
                case 9:
                   if ((0x100002600L & l) == 0L)
                      break;
-                  if (kind > 26)
-                     kind = 26;
+                  if (kind > 24)
+                     kind = 24;
                   jjCheckNAdd(9);
                   break;
                case 10:
@@ -551,8 +551,8 @@
                      jjCheckNAddStates(13, 15);
                   break;
                case 12:
-                  if (curChar == 34 && kind > 27)
-                     kind = 27;
+                  if (curChar == 34 && kind > 25)
+                     kind = 25;
                   break;
                case 14:
                   if ((0x8400000000L & l) != 0L)
@@ -599,72 +599,72 @@
                      jjCheckNAddStates(10, 12);
                   break;
                case 26:
-                  if (curChar == 39 && kind > 27)
-                     kind = 27;
+                  if (curChar == 39 && kind > 25)
+                     kind = 25;
                   break;
                case 27:
-                  if ((0x2400L & l) != 0L && kind > 30)
-                     kind = 30;
+                  if ((0x2400L & l) != 0L && kind > 28)
+                     kind = 28;
                   break;
                case 28:
-                  if (curChar == 10 && kind > 30)
-                     kind = 30;
+                  if (curChar == 10 && kind > 28)
+                     kind = 28;
                   break;
                case 29:
                   if (curChar == 13)
                      jjstateSet[jjnewStateCnt++] = 28;
                   break;
                case 30:
-                  if (curChar == 38 && kind > 36)
-                     kind = 36;
+                  if (curChar == 38 && kind > 34)
+                     kind = 34;
                   break;
                case 31:
                   if (curChar == 38)
                      jjstateSet[jjnewStateCnt++] = 30;
                   break;
                case 39:
-                  if (curChar == 60 && kind > 38)
-                     kind = 38;
+                  if (curChar == 60 && kind > 36)
+                     kind = 36;
                   break;
                case 40:
-                  if (curChar == 61 && kind > 39)
-                     kind = 39;
+                  if (curChar == 61 && kind > 37)
+                     kind = 37;
                   break;
                case 41:
                   if (curChar == 60)
                      jjstateSet[jjnewStateCnt++] = 40;
                   break;
                case 42:
-                  if (curChar == 62 && kind > 40)
-                     kind = 40;
+                  if (curChar == 62 && kind > 38)
+                     kind = 38;
                   break;
                case 43:
-                  if (curChar == 61 && kind > 41)
-                     kind = 41;
+                  if (curChar == 61 && kind > 39)
+                     kind = 39;
                   break;
                case 44:
                   if (curChar == 62)
                      jjstateSet[jjnewStateCnt++] = 43;
                   break;
                case 45:
-                  if (curChar == 61 && kind > 42)
-                     kind = 42;
+                  if (curChar == 61 && kind > 40)
+                     kind = 40;
                   break;
                case 46:
                   if (curChar == 61)
                      jjstateSet[jjnewStateCnt++] = 45;
                   break;
                case 49:
-                  if (curChar == 61 && kind > 43)
-                     kind = 43;
+                  if (curChar == 61 && kind > 41)
+                     kind = 41;
                   break;
                case 50:
                   if (curChar == 33)
                      jjstateSet[jjnewStateCnt++] = 49;
                   break;
                case 51:
-                  if (curChar == 33 && kind > 44)
-                     kind = 44;
+                  if (curChar == 33 && kind > 42)
+                     kind = 42;
                   break;
                case 52:
                   if (curChar == 46)
@@ -673,8 +673,8 @@
                case 53:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 53)
-                     kind = 53;
+                  if (kind > 52)
+                     kind = 52;
                   jjCheckNAddTwoStates(53, 54);
                   break;
                case 55:
@@ -684,15 +684,15 @@
                case 56:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 53)
-                     kind = 53;
+                  if (kind > 52)
+                     kind = 52;
                   jjCheckNAdd(56);
                   break;
                case 58:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 57)
-                     kind = 57;
+                  if (kind > 56)
+                     kind = 56;
                   jjstateSet[jjnewStateCnt++] = 58;
                   break;
                case 61:
@@ -725,13 +725,13 @@
                case 82:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 52)
-                     kind = 52;
+                  if (kind > 51)
+                     kind = 51;
                   jjCheckNAddTwoStates(82, 84);
                   break;
                case 83:
-                  if (curChar == 46 && kind > 52)
-                     kind = 52;
+                  if (curChar == 46 && kind > 51)
+                     kind = 51;
                   break;
                case 84:
                   if (curChar == 46)
@@ -744,15 +744,15 @@
                case 86:
                   if (curChar != 46)
                      break;
-                  if (kind > 53)
-                     kind = 53;
+                  if (kind > 52)
+                     kind = 52;
                   jjCheckNAddTwoStates(87, 88);
                   break;
                case 87:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 53)
-                     kind = 53;
+                  if (kind > 52)
+                     kind = 52;
                   jjCheckNAddTwoStates(87, 88);
                   break;
                case 89:
@@ -762,8 +762,8 @@
                case 90:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 53)
-                     kind = 53;
+                  if (kind > 52)
+                     kind = 52;
                   jjCheckNAdd(90);
                   break;
                case 91:
@@ -777,15 +777,15 @@
                case 94:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 53)
-                     kind = 53;
+                  if (kind > 52)
+                     kind = 52;
                   jjCheckNAdd(94);
                   break;
                case 95:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 52)
-                     kind = 52;
+                  if (kind > 51)
+                     kind = 51;
                   jjCheckNAddStates(0, 5);
                   break;
                default : break;
@@ -802,8 +802,8 @@
                case 0:
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
-                     if (kind > 57)
-                        kind = 57;
+                     if (kind > 56)
+                        kind = 56;
                      jjCheckNAdd(58);
                   }
                   else if (curChar == 92)
@@ -849,8 +849,8 @@
                      jjAddStates(25, 26);
                   break;
                case 32:
-                  if (curChar == 100 && kind > 36)
-                     kind = 36;
+                  if (curChar == 100 && kind > 34)
+                     kind = 34;
                   break;
                case 33:
                   if (curChar == 110)
@@ -861,24 +861,24 @@
                      jjstateSet[jjnewStateCnt++] = 33;
                   break;
                case 35:
-                  if (curChar == 124 && kind > 37)
-                     kind = 37;
+                  if (curChar == 124 && kind > 35)
+                     kind = 35;
                   break;
                case 36:
                   if (curChar == 124)
                      jjstateSet[jjnewStateCnt++] = 35;
                   break;
                case 37:
-                  if (curChar == 114 && kind > 37)
-                     kind = 37;
+                  if (curChar == 114 && kind > 35)
+                     kind = 35;
                   break;
                case 38:
                   if (curChar == 111)
                      jjstateSet[jjnewStateCnt++] = 37;
                   break;
                case 47:
-                  if (curChar == 113 && kind > 42)
-                     kind = 42;
+                  if (curChar == 113 && kind > 40)
+                     kind = 40;
                   break;
                case 48:
                   if (curChar == 101)
@@ -892,8 +892,8 @@
                case 58:
                   if ((0x7fffffe87fffffeL & l) == 0L)
                      break;
-                  if (kind > 57)
-                     kind = 57;
+                  if (kind > 56)
+                     kind = 56;
                   jjCheckNAdd(58);
                   break;
                case 59:
@@ -906,8 +906,8 @@
                      jjCheckNAddTwoStates(61, 62);
                   break;
                case 62:
-                  if (curChar == 125 && kind > 58)
-                     kind = 58;
+                  if (curChar == 125 && kind > 57)
+                     kind = 57;
                   break;
                case 63:
                   if (curChar == 92)
@@ -930,36 +930,36 @@
                      jjAddStates(37, 38);
                   break;
                case 72:
-                  if (curChar == 116 && kind > 38)
-                     kind = 38;
+                  if (curChar == 116 && kind > 36)
+                     kind = 36;
                   break;
                case 73:
-                  if (curChar == 101 && kind > 39)
-                     kind = 39;
+                  if (curChar == 101 && kind > 37)
+                     kind = 37;
                   break;
                case 74:
                   if (curChar == 103)
                      jjAddStates(35, 36);
                   break;
                case 75:
-                  if (curChar == 116 && kind > 40)
-                     kind = 40;
+                  if (curChar == 116 && kind > 38)
+                     kind = 38;
                   break;
                case 76:
-                  if (curChar == 101 && kind > 41)
-                     kind = 41;
+                  if (curChar == 101 && kind > 39)
+                     kind = 39;
                   break;
                case 77:
                   if (curChar == 110)
                      jjAddStates(33, 34);
                   break;
                case 78:
-                  if (curChar == 101 && kind > 43)
-                     kind = 43;
+                  if (curChar == 101 && kind > 41)
+                     kind = 41;
                   break;
                case 79:
-                  if (curChar == 116 && kind > 44)
-                     kind = 44;
+                  if (curChar == 116 && kind > 42)
+                     kind = 42;
                   break;
                case 80:
                   if (curChar == 111)
@@ -1048,8 +1048,6 @@
       case 35:
          jjmatchedKind = 17;
          return jjMoveStringLiteralDfa1_6(0x50000L);
-      case 42:
-         return jjMoveStringLiteralDfa1_6(0x1000000L);
       default :
          return jjMoveNfa_6(3, 0);
    }
@@ -1065,9 +1063,7 @@
    {
       case 35:
          if ((active0 & 0x40000L) != 0L)
-            return jjStopAtPos(1, 18);
-         else if ((active0 & 0x1000000L) != 0L)
-            return jjStopAtPos(1, 24);
+            return jjStartNfaWithStates_6(1, 18, 17);
          break;
       case 42:
          if ((active0 & 0x10000L) != 0L)
@@ -1082,7 +1078,7 @@
 {
    int[] nextStates;
    int startsAt = 0;
-   jjnewStateCnt = 12;
+   jjnewStateCnt = 17;
    int i = 1;
    jjstateSet[0] = startState;
    int j, kind = 0x7fffffff;
@@ -1097,46 +1093,91 @@
          {
             switch(jjstateSet[--i])
             {
+               case 17:
+                  if ((0xfffffbffffffffffL & l) != 0L)
+                     jjCheckNAddStates(52, 54);
+                  else if (curChar == 42)
+                     jjstateSet[jjnewStateCnt++] = 7;
+                  if (curChar == 42)
+                     jjstateSet[jjnewStateCnt++] = 6;
+                  break;
+               case 0:
+                  if ((0xfffffff7ffffffffL & l) != 0L)
+                     jjCheckNAddStates(52, 54);
+                  else if (curChar == 35)
+                  {
+                     if (kind > 23)
+                        kind = 23;
+                  }
+                  if (curChar == 42)
+                     jjstateSet[jjnewStateCnt++] = 1;
+                  break;
+               case 2:
+                  if ((0xfffffbffffffffffL & l) != 0L)
+                     jjCheckNAddStates(52, 54);
+                  else if (curChar == 42)
+                     jjstateSet[jjnewStateCnt++] = 7;
+                  if (curChar == 42)
+                     jjstateSet[jjnewStateCnt++] = 6;
+                  if (curChar == 42)
+                     jjstateSet[jjnewStateCnt++] = 0;
+                  break;
                case 3:
+                  if ((0xfffffbffffffffffL & l) != 0L)
+                     jjCheckNAddStates(52, 54);
+                  else if (curChar == 42)
+                     jjstateSet[jjnewStateCnt++] = 7;
                   if (curChar == 36)
                   {
                      if (kind > 13)
                         kind = 13;
-                     jjCheckNAddTwoStates(9, 10);
+                     jjCheckNAddTwoStates(14, 15);
                   }
                   else if (curChar == 35)
                      jjstateSet[jjnewStateCnt++] = 2;
                   break;
-               case 0:
-                  if (curChar == 42)
-                     jjstateSet[jjnewStateCnt++] = 1;
-                  break;
                case 1:
                   if ((0xfffffff7ffffffffL & l) != 0L && kind > 15)
                      kind = 15;
                   break;
-               case 2:
+               case 4:
+                  if ((0xfffffbffffffffffL & l) != 0L)
+                     jjCheckNAddStates(52, 54);
+                  break;
+               case 5:
                   if (curChar == 42)
-                     jjstateSet[jjnewStateCnt++] = 0;
+                     jjstateSet[jjnewStateCnt++] = 6;
                   break;
                case 6:
+                  if ((0xfffffff7ffffffffL & l) != 0L)
+                     jjCheckNAddStates(52, 54);
+                  break;
+               case 7:
+                  if (curChar == 35 && kind > 23)
+                     kind = 23;
+                  break;
+               case 8:
+                  if (curChar == 42)
+                     jjstateSet[jjnewStateCnt++] = 7;
+                  break;
+               case 11:
                   if (curChar == 36 && kind > 13)
                      kind = 13;
                   break;
-               case 8:
+               case 13:
                   if (curChar == 36)
-                     jjCheckNAddTwoStates(9, 10);
+                     jjCheckNAddTwoStates(14, 15);
                   break;
-               case 10:
+               case 15:
                   if (curChar == 33 && kind > 14)
                      kind = 14;
                   break;
-               case 11:
+               case 16:
                   if (curChar != 36)
                      break;
                   if (kind > 13)
                      kind = 13;
-                  jjCheckNAddTwoStates(9, 10);
+                  jjCheckNAddTwoStates(14, 15);
                   break;
                default : break;
             }
@@ -1149,26 +1190,41 @@
          {
             switch(jjstateSet[--i])
             {
+               case 17:
+               case 4:
+                  jjCheckNAddStates(52, 54);
+                  break;
+               case 0:
+                  jjCheckNAddStates(52, 54);
+                  break;
+               case 2:
+                  jjCheckNAddStates(52, 54);
+                  break;
                case 3:
+                  jjCheckNAddStates(52, 54);
                   if (curChar == 92)
-                     jjCheckNAddStates(52, 55);
+                     jjCheckNAddStates(55, 58);
                   break;
                case 1:
                   if (kind > 15)
                      kind = 15;
                   break;
-               case 5:
+               case 9:
                   if (curChar == 92)
-                     jjCheckNAddTwoStates(5, 6);
+                     jjCheckNAddStates(55, 58);
                   break;
-               case 7:
+               case 10:
                   if (curChar == 92)
-                     jjCheckNAddTwoStates(7, 8);
+                     jjCheckNAddTwoStates(10, 11);
                   break;
-               case 9:
+               case 12:
                   if (curChar == 92)
-                     jjAddStates(56, 57);
+                     jjCheckNAddTwoStates(12, 13);
                   break;
+               case 14:
+                  if (curChar == 92)
+                     jjAddStates(59, 60);
+                  break;
                default : break;
             }
          } while(i != startsAt);
@@ -1184,6 +1240,23 @@
          {
             switch(jjstateSet[--i])
             {
+               case 17:
+               case 4:
+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
+                     jjCheckNAddStates(52, 54);
+                  break;
+               case 0:
+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
+                     jjCheckNAddStates(52, 54);
+                  break;
+               case 2:
+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
+                     jjCheckNAddStates(52, 54);
+                  break;
+               case 3:
+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
+                     jjCheckNAddStates(52, 54);
+                  break;
                case 1:
                   if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 15)
                      kind = 15;
@@ -1199,7 +1272,7 @@
          kind = 0x7fffffff;
       }
       ++curPos;
-      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
+      if ((i = jjnewStateCnt) == (startsAt = 17 - (jjnewStateCnt = startsAt)))
          return curPos;
       try { curChar = input_stream.readChar(); }
       catch(java.io.IOException e) { return curPos; }
@@ -1236,6 +1309,8 @@
       case 35:
          jjmatchedKind = 17;
          return jjMoveStringLiteralDfa1_4(0x50000L);
+      case 37:
+         return jjStopAtPos(0, 45);
       default :
          return jjMoveNfa_4(3, 0);
    }
@@ -1284,12 +1359,12 @@
                case 3:
                   if ((0x3ff000000000000L & l) != 0L)
                   {
-                     if (kind > 52)
-                        kind = 52;
-                     jjCheckNAddStates(58, 63);
+                     if (kind > 51)
+                        kind = 51;
+                     jjCheckNAddStates(61, 66);
                   }
                   else if (curChar == 45)
-                     jjCheckNAddStates(64, 67);
+                     jjCheckNAddStates(67, 70);
                   else if (curChar == 36)
                   {
                      if (kind > 13)
@@ -1320,8 +1395,8 @@
                case 11:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 53)
-                     kind = 53;
+                  if (kind > 52)
+                     kind = 52;
                   jjCheckNAddTwoStates(11, 12);
                   break;
                case 13:
@@ -1331,15 +1406,15 @@
                case 14:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 53)
-                     kind = 53;
+                  if (kind > 52)
+                     kind = 52;
                   jjCheckNAdd(14);
                   break;
                case 16:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 57)
-                     kind = 57;
+                  if (kind > 56)
+                     kind = 56;
                   jjstateSet[jjnewStateCnt++] = 16;
                   break;
                case 19:
@@ -1367,15 +1442,15 @@
                   break;
                case 31:
                   if ((0x100000200L & l) != 0L)
-                     jjCheckNAddStates(68, 70);
+                     jjCheckNAddStates(71, 73);
                   break;
                case 32:
-                  if ((0x2400L & l) != 0L && kind > 46)
-                     kind = 46;
+                  if ((0x2400L & l) != 0L && kind > 44)
+                     kind = 44;
                   break;
                case 33:
-                  if (curChar == 10 && kind > 46)
-                     kind = 46;
+                  if (curChar == 10 && kind > 44)
+                     kind = 44;
                   break;
                case 34:
                case 51:
@@ -1384,15 +1459,15 @@
                   break;
                case 42:
                   if ((0x100000200L & l) != 0L)
-                     jjCheckNAddStates(71, 73);
+                     jjCheckNAddStates(74, 76);
                   break;
                case 43:
-                  if ((0x2400L & l) != 0L && kind > 49)
-                     kind = 49;
+                  if ((0x2400L & l) != 0L && kind > 48)
+                     kind = 48;
                   break;
                case 44:
-                  if (curChar == 10 && kind > 49)
-                     kind = 49;
+                  if (curChar == 10 && kind > 48)
+                     kind = 48;
                   break;
                case 45:
                case 67:
@@ -1401,26 +1476,26 @@
                   break;
                case 50:
                   if ((0x100000200L & l) != 0L)
-                     jjCheckNAddStates(74, 76);
+                     jjCheckNAddStates(77, 79);
                   break;
                case 66:
                   if ((0x100000200L & l) != 0L)
-                     jjCheckNAddStates(77, 79);
+                     jjCheckNAddStates(80, 82);
                   break;
                case 77:
                   if (curChar == 45)
-                     jjCheckNAddStates(64, 67);
+                     jjCheckNAddStates(67, 70);
                   break;
                case 78:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 52)
-                     kind = 52;
+                  if (kind > 51)
+                     kind = 51;
                   jjCheckNAddTwoStates(78, 80);
                   break;
                case 79:
-                  if (curChar == 46 && kind > 52)
-                     kind = 52;
+                  if (curChar == 46 && kind > 51)
+                     kind = 51;
                   break;
                case 80:
                   if (curChar == 46)
@@ -1433,15 +1508,15 @@
                case 82:
                   if (curChar != 46)
                      break;
-                  if (kind > 53)
-                     kind = 53;
+                  if (kind > 52)
+                     kind = 52;
                   jjCheckNAddTwoStates(83, 84);
                   break;
                case 83:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 53)
-                     kind = 53;
+                  if (kind > 52)
+                     kind = 52;
                   jjCheckNAddTwoStates(83, 84);
                   break;
                case 85:
@@ -1451,8 +1526,8 @@
                case 86:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 53)
-                     kind = 53;
+                  if (kind > 52)
+                     kind = 52;
                   jjCheckNAdd(86);
                   break;
                case 87:
@@ -1466,16 +1541,16 @@
                case 90:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 53)
-                     kind = 53;
+                  if (kind > 52)
+                     kind = 52;
                   jjCheckNAdd(90);
                   break;
                case 91:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 52)
-                     kind = 52;
-                  jjCheckNAddStates(58, 63);
+                  if (kind > 51)
+                     kind = 51;
+                  jjCheckNAddStates(61, 66);
                   break;
                default : break;
             }
@@ -1491,16 +1566,16 @@
                case 3:
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
-                     if (kind > 57)
-                        kind = 57;
+                     if (kind > 56)
+                        kind = 56;
                      jjCheckNAdd(16);
                   }
                   else if (curChar == 123)
-                     jjAddStates(80, 84);
+                     jjAddStates(83, 87);
                   else if (curChar == 92)
-                     jjCheckNAddStates(85, 88);
+                     jjCheckNAddStates(88, 91);
                   if (curChar == 101)
-                     jjAddStates(89, 91);
+                     jjAddStates(92, 94);
                   else if (curChar == 123)
                      jjstateSet[jjnewStateCnt++] = 18;
                   else if (curChar == 115)
@@ -1513,16 +1588,16 @@
                      kind = 15;
                   break;
                case 4:
-                  if (curChar == 102 && kind > 47)
-                     kind = 47;
+                  if (curChar == 102 && kind > 46)
+                     kind = 46;
                   break;
                case 5:
                   if (curChar == 105)
                      jjstateSet[jjnewStateCnt++] = 4;
                   break;
                case 6:
-                  if (curChar == 112 && kind > 50)
-                     kind = 50;
+                  if (curChar == 112 && kind > 49)
+                     kind = 49;
                   break;
                case 7:
                   if (curChar == 111)
@@ -1538,14 +1613,14 @@
                   break;
                case 12:
                   if ((0x2000000020L & l) != 0L)
-                     jjAddStates(92, 93);
+                     jjAddStates(95, 96);
                   break;
                case 15:
                case 16:
                   if ((0x7fffffe87fffffeL & l) == 0L)
                      break;
-                  if (kind > 57)
-                     kind = 57;
+                  if (kind > 56)
+                     kind = 56;
                   jjCheckNAdd(16);
                   break;
                case 17:
@@ -1558,12 +1633,12 @@
                      jjCheckNAddTwoStates(19, 20);
                   break;
                case 20:
-                  if (curChar == 125 && kind > 58)
-                     kind = 58;
+                  if (curChar == 125 && kind > 57)
+                     kind = 57;
                   break;
                case 21:
                   if (curChar == 92)
-                     jjCheckNAddStates(85, 88);
+                     jjCheckNAddStates(88, 91);
                   break;
                case 22:
                   if (curChar == 92)
@@ -1575,26 +1650,26 @@
                   break;
                case 26:
                   if (curChar == 92)
-                     jjAddStates(94, 95);
+                     jjAddStates(97, 98);
                   break;
                case 29:
                   if (curChar == 101)
-                     jjAddStates(89, 91);
+                     jjAddStates(92, 94);
                   break;
                case 30:
                   if (curChar != 100)
                      break;
-                  if (kind > 46)
-                     kind = 46;
-                  jjCheckNAddStates(68, 70);
+                  if (kind > 44)
+                     kind = 44;
+                  jjCheckNAddStates(71, 73);
                   break;
                case 35:
                   if (curChar == 110)
                      jjstateSet[jjnewStateCnt++] = 30;
                   break;
                case 36:
-                  if (curChar == 102 && kind > 48)
-                     kind = 48;
+                  if (curChar == 102 && kind > 47)
+                     kind = 47;
                   break;
                case 37:
                   if (curChar == 105)
@@ -1615,9 +1690,9 @@
                case 41:
                   if (curChar != 101)
                      break;
-                  if (kind > 49)
-                     kind = 49;
-                  jjCheckNAddStates(71, 73);
+                  if (kind > 48)
+                     kind = 48;
+                  jjCheckNAddStates(74, 76);
                   break;
                case 46:
                   if (curChar == 115)
@@ -1629,14 +1704,14 @@
                   break;
                case 48:
                   if (curChar == 123)
-                     jjAddStates(80, 84);
+                     jjAddStates(83, 87);
                   break;
                case 49:
                   if (curChar != 125)
                      break;
-                  if (kind > 46)
-                     kind = 46;
-                  jjCheckNAddStates(74, 76);
+                  if (kind > 44)
+                     kind = 44;
+                  jjCheckNAddStates(77, 79);
                   break;
                case 52:
                   if (curChar == 100)
@@ -1651,8 +1726,8 @@
                      jjstateSet[jjnewStateCnt++] = 53;
                   break;
                case 55:
-                  if (curChar == 125 && kind > 47)
-                     kind = 47;
+                  if (curChar == 125 && kind > 46)
+                     kind = 46;
                   break;
                case 56:
                   if (curChar == 102)
@@ -1663,8 +1738,8 @@
                      jjstateSet[jjnewStateCnt++] = 56;
                   break;
                case 58:
-                  if (curChar == 125 && kind > 48)
-                     kind = 48;
+                  if (curChar == 125 && kind > 47)
+                     kind = 47;
                   break;
                case 59:
                   if (curChar == 102)
@@ -1693,9 +1768,9 @@
                case 65:
                   if (curChar != 125)
                      break;
-                  if (kind > 49)
-                     kind = 49;
-                  jjCheckNAddStates(77, 79);
+                  if (kind > 48)
+                     kind = 48;
+                  jjCheckNAddStates(80, 82);
                   break;
                case 68:
                   if (curChar == 101)
@@ -1714,8 +1789,8 @@
                      jjstateSet[jjnewStateCnt++] = 70;
                   break;
                case 72:
-                  if (curChar == 125 && kind > 50)
-                     kind = 50;
+                  if (curChar == 125 && kind > 49)
+                     kind = 49;
                   break;
                case 73:
                   if (curChar == 112)
@@ -1735,7 +1810,7 @@
                   break;
                case 84:
                   if ((0x2000000020L & l) != 0L)
-                     jjAddStates(96, 97);
+                     jjAddStates(99, 100);
                   break;
                case 88:
                   if ((0x2000000020L & l) != 0L)
@@ -1874,7 +1949,7 @@
                      jjCheckNAdd(12);
                   }
                   else if (curChar == 35)
-                     jjCheckNAddStates(98, 100);
+                     jjCheckNAddStates(101, 103);
                   else if (curChar == 36)
                   {
                      if (kind > 13)
@@ -1914,7 +1989,7 @@
                   break;
                case 3:
                   if (curChar == 32)
-                     jjAddStates(101, 102);
+                     jjAddStates(104, 105);
                   break;
                case 4:
                   if (curChar == 40 && kind > 12)
@@ -1959,7 +2034,7 @@
                   break;
                case 26:
                   if (curChar == 35)
-                     jjCheckNAddStates(98, 100);
+                     jjCheckNAddStates(101, 103);
                   break;
                case 27:
                   if (curChar == 42)
@@ -1994,13 +2069,13 @@
                      jjCheckNAdd(12);
                   }
                   else if (curChar == 92)
-                     jjCheckNAddStates(103, 106);
+                     jjCheckNAddStates(106, 109);
                   if (curChar == 92)
-                     jjAddStates(107, 108);
+                     jjAddStates(59, 60);
                   break;
                case 30:
                   if (curChar == 92)
-                     jjAddStates(107, 108);
+                     jjAddStates(59, 60);
                   if (curChar == 92)
                      jjCheckNAddTwoStates(21, 22);
                   if (curChar == 92)
@@ -2055,7 +2130,7 @@
                   break;
                case 13:
                   if (curChar == 92)
-                     jjAddStates(107, 108);
+                     jjAddStates(59, 60);
                   break;
                case 16:
                case 17:
@@ -2075,7 +2150,7 @@
                   break;
                case 23:
                   if (curChar == 92)
-                     jjAddStates(109, 110);
+                     jjAddStates(110, 111);
                   break;
                case 28:
                   if (kind > 15)
@@ -2156,8 +2231,6 @@
       case 35:
          jjmatchedKind = 17;
          return jjMoveStringLiteralDfa1_7(0x50000L);
-      case 42:
-         return jjMoveStringLiteralDfa1_7(0x800000L);
       default :
          return jjMoveNfa_7(3, 0);
    }
@@ -2173,9 +2246,7 @@
    {
       case 35:
          if ((active0 & 0x40000L) != 0L)
-            return jjStopAtPos(1, 18);
-         else if ((active0 & 0x800000L) != 0L)
-            return jjStopAtPos(1, 23);
+            return jjStartNfaWithStates_7(1, 18, 17);
          break;
       case 42:
          if ((active0 & 0x10000L) != 0L)
@@ -2190,7 +2261,7 @@
 {
    int[] nextStates;
    int startsAt = 0;
-   jjnewStateCnt = 12;
+   jjnewStateCnt = 17;
    int i = 1;
    jjstateSet[0] = startState;
    int j, kind = 0x7fffffff;
@@ -2205,46 +2276,91 @@
          {
             switch(jjstateSet[--i])
             {
+               case 17:
+                  if ((0xfffffbffffffffffL & l) != 0L)
+                     jjCheckNAddStates(52, 54);
+                  else if (curChar == 42)
+                     jjstateSet[jjnewStateCnt++] = 7;
+                  if (curChar == 42)
+                     jjstateSet[jjnewStateCnt++] = 6;
+                  break;
+               case 0:
+                  if ((0xfffffff7ffffffffL & l) != 0L)
+                     jjCheckNAddStates(52, 54);
+                  else if (curChar == 35)
+                  {
+                     if (kind > 23)
+                        kind = 23;
+                  }
+                  if (curChar == 42)
+                     jjstateSet[jjnewStateCnt++] = 1;
+                  break;
+               case 2:
+                  if ((0xfffffbffffffffffL & l) != 0L)
+                     jjCheckNAddStates(52, 54);
+                  else if (curChar == 42)
+                     jjstateSet[jjnewStateCnt++] = 7;
+                  if (curChar == 42)
+                     jjstateSet[jjnewStateCnt++] = 6;
+                  if (curChar == 42)
+                     jjstateSet[jjnewStateCnt++] = 0;
+                  break;
                case 3:
+                  if ((0xfffffbffffffffffL & l) != 0L)
+                     jjCheckNAddStates(52, 54);
+                  else if (curChar == 42)
+                     jjstateSet[jjnewStateCnt++] = 7;
                   if (curChar == 36)
                   {
                      if (kind > 13)
                         kind = 13;
-                     jjCheckNAddTwoStates(9, 10);
+                     jjCheckNAddTwoStates(14, 15);
                   }
                   else if (curChar == 35)
                      jjstateSet[jjnewStateCnt++] = 2;
                   break;
-               case 0:
-                  if (curChar == 42)
-                     jjstateSet[jjnewStateCnt++] = 1;
-                  break;
                case 1:
                   if ((0xfffffff7ffffffffL & l) != 0L && kind > 15)
                      kind = 15;
                   break;
-               case 2:
+               case 4:
+                  if ((0xfffffbffffffffffL & l) != 0L)
+                     jjCheckNAddStates(52, 54);
+                  break;
+               case 5:
                   if (curChar == 42)
-                     jjstateSet[jjnewStateCnt++] = 0;
+                     jjstateSet[jjnewStateCnt++] = 6;
                   break;
                case 6:
+                  if ((0xfffffff7ffffffffL & l) != 0L)
+                     jjCheckNAddStates(52, 54);
+                  break;
+               case 7:
+                  if (curChar == 35 && kind > 23)
+                     kind = 23;
+                  break;
+               case 8:
+                  if (curChar == 42)
+                     jjstateSet[jjnewStateCnt++] = 7;
+                  break;
+               case 11:
                   if (curChar == 36 && kind > 13)
                      kind = 13;
                   break;
-               case 8:
+               case 13:
                   if (curChar == 36)
-                     jjCheckNAddTwoStates(9, 10);
+                     jjCheckNAddTwoStates(14, 15);
                   break;
-               case 10:
+               case 15:
                   if (curChar == 33 && kind > 14)
                      kind = 14;
                   break;
-               case 11:
+               case 16:
                   if (curChar != 36)
                      break;
                   if (kind > 13)
                      kind = 13;
-                  jjCheckNAddTwoStates(9, 10);
+                  jjCheckNAddTwoStates(14, 15);
                   break;
                default : break;
             }
@@ -2257,26 +2373,41 @@
          {
             switch(jjstateSet[--i])
             {
+               case 17:
+               case 4:
+                  jjCheckNAddStates(52, 54);
+                  break;
+               case 0:
+                  jjCheckNAddStates(52, 54);
+                  break;
+               case 2:
+                  jjCheckNAddStates(52, 54);
+                  break;
                case 3:
+                  jjCheckNAddStates(52, 54);
                   if (curChar == 92)
-                     jjCheckNAddStates(52, 55);
+                     jjCheckNAddStates(55, 58);
                   break;
                case 1:
                   if (kind > 15)
                      kind = 15;
                   break;
-               case 5:
+               case 9:
                   if (curChar == 92)
-                     jjCheckNAddTwoStates(5, 6);
+                     jjCheckNAddStates(55, 58);
                   break;
-               case 7:
+               case 10:
                   if (curChar == 92)
-                     jjCheckNAddTwoStates(7, 8);
+                     jjCheckNAddTwoStates(10, 11);
                   break;
-               case 9:
+               case 12:
                   if (curChar == 92)
-                     jjAddStates(56, 57);
+                     jjCheckNAddTwoStates(12, 13);
                   break;
+               case 14:
+                  if (curChar == 92)
+                     jjAddStates(59, 60);
+                  break;
                default : break;
             }
          } while(i != startsAt);
@@ -2292,6 +2423,23 @@
          {
             switch(jjstateSet[--i])
             {
+               case 17:
+               case 4:
+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
+                     jjCheckNAddStates(52, 54);
+                  break;
+               case 0:
+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
+                     jjCheckNAddStates(52, 54);
+                  break;
+               case 2:
+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
+                     jjCheckNAddStates(52, 54);
+                  break;
+               case 3:
+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
+                     jjCheckNAddStates(52, 54);
+                  break;
                case 1:
                   if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 15)
                      kind = 15;
@@ -2307,7 +2455,7 @@
          kind = 0x7fffffff;
       }
       ++curPos;
-      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
+      if ((i = jjnewStateCnt) == (startsAt = 17 - (jjnewStateCnt = startsAt)))
          return curPos;
       try { curChar = input_stream.readChar(); }
       catch(java.io.IOException e) { return curPos; }
@@ -2359,7 +2507,7 @@
    {
       case 35:
          if ((active0 & 0x40000L) != 0L)
-            return jjStopAtPos(1, 18);
+            return jjStartNfaWithStates_8(1, 18, 16);
          break;
       case 42:
          if ((active0 & 0x10000L) != 0L)
@@ -2374,7 +2522,7 @@
 {
    int[] nextStates;
    int startsAt = 0;
-   jjnewStateCnt = 15;
+   jjnewStateCnt = 16;
    int i = 1;
    jjstateSet[0] = startState;
    int j, kind = 0x7fffffff;
@@ -2389,65 +2537,100 @@
          {
             switch(jjstateSet[--i])
             {
+               case 2:
+                  if ((0xffffffffffffdbffL & l) != 0L)
+                     jjCheckNAddStates(112, 114);
+                  else if ((0x2400L & l) != 0L)
+                  {
+                     if (kind > 22)
+                        kind = 22;
+                  }
+                  if (curChar == 13)
+                     jjstateSet[jjnewStateCnt++] = 6;
+                  else if (curChar == 42)
+                     jjstateSet[jjnewStateCnt++] = 0;
+                  break;
+               case 0:
+                  if ((0xffffffffffffdbffL & l) != 0L)
+                     jjCheckNAddStates(112, 114);
+                  else if ((0x2400L & l) != 0L)
+                  {
+                     if (kind > 22)
+                        kind = 22;
+                  }
+                  if (curChar == 13)
+                     jjstateSet[jjnewStateCnt++] = 6;
+                  else if (curChar == 42)
+                     jjstateSet[jjnewStateCnt++] = 1;
+                  break;
+               case 16:
+                  if ((0xffffffffffffdbffL & l) != 0L)
+                     jjCheckNAddStates(112, 114);
+                  else if ((0x2400L & l) != 0L)
+                  {
+                     if (kind > 22)
+                        kind = 22;
+                  }
+                  if (curChar == 13)
+                     jjstateSet[jjnewStateCnt++] = 6;
+                  break;
                case 3:
-                  if ((0x2400L & l) != 0L)
+                  if ((0xffffffffffffdbffL & l) != 0L)
+                     jjCheckNAddStates(112, 114);
+                  else if ((0x2400L & l) != 0L)
                   {
                      if (kind > 22)
                         kind = 22;
                   }
-                  else if (curChar == 36)
+                  if (curChar == 36)
                   {
                      if (kind > 13)
                         kind = 13;
-                     jjCheckNAddTwoStates(12, 13);
+                     jjCheckNAddTwoStates(13, 14);
                   }
+                  else if (curChar == 13)
+                     jjstateSet[jjnewStateCnt++] = 6;
                   else if (curChar == 35)
                      jjstateSet[jjnewStateCnt++] = 2;
-                  if (curChar == 13)
-                     jjstateSet[jjnewStateCnt++] = 5;
                   break;
-               case 0:
-                  if (curChar == 42)
-                     jjstateSet[jjnewStateCnt++] = 1;
-                  break;
                case 1:
                   if ((0xfffffff7ffffffffL & l) != 0L && kind > 15)
                      kind = 15;
                   break;
-               case 2:
-                  if (curChar == 42)
-                     jjstateSet[jjnewStateCnt++] = 0;
+               case 4:
+                  if ((0xffffffffffffdbffL & l) != 0L)
+                     jjCheckNAddStates(112, 114);
                   break;
-               case 4:
+               case 5:
                   if ((0x2400L & l) != 0L && kind > 22)
                      kind = 22;
                   break;
-               case 5:
+               case 6:
                   if (curChar == 10 && kind > 22)
                      kind = 22;
                   break;
-               case 6:
+               case 7:
                   if (curChar == 13)
-                     jjstateSet[jjnewStateCnt++] = 5;
+                     jjstateSet[jjnewStateCnt++] = 6;
                   break;
-               case 9:
+               case 10:
                   if (curChar == 36 && kind > 13)
                      kind = 13;
                   break;
-               case 11:
+               case 12:
                   if (curChar == 36)
-                     jjCheckNAddTwoStates(12, 13);
+                     jjCheckNAddTwoStates(13, 14);
                   break;
-               case 13:
+               case 14:
                   if (curChar == 33 && kind > 14)
                      kind = 14;
                   break;
-               case 14:
+               case 15:
                   if (curChar != 36)
                      break;
                   if (kind > 13)
                      kind = 13;
-                  jjCheckNAddTwoStates(12, 13);
+                  jjCheckNAddTwoStates(13, 14);
                   break;
                default : break;
             }
@@ -2460,9 +2643,20 @@
          {
             switch(jjstateSet[--i])
             {
+               case 2:
+               case 4:
+                  jjCheckNAddStates(112, 114);
+                  break;
+               case 0:
+                  jjCheckNAddStates(112, 114);
+                  break;
+               case 16:
+                  jjCheckNAddStates(112, 114);
+                  break;
                case 3:
+                  jjCheckNAddStates(112, 114);
                   if (curChar == 92)
-                     jjCheckNAddStates(111, 114);
+                     jjCheckNAddStates(115, 118);
                   break;
                case 1:
                   if (kind > 15)
@@ -2470,16 +2664,20 @@
                   break;
                case 8:
                   if (curChar == 92)
-                     jjCheckNAddTwoStates(8, 9);
+                     jjCheckNAddStates(115, 118);
                   break;
-               case 10:
+               case 9:
                   if (curChar == 92)
-                     jjCheckNAddTwoStates(10, 11);
+                     jjCheckNAddTwoStates(9, 10);
                   break;
-               case 12:
+               case 11:
                   if (curChar == 92)
-                     jjAddStates(115, 116);
+                     jjCheckNAddTwoStates(11, 12);
                   break;
+               case 13:
+                  if (curChar == 92)
+                     jjAddStates(95, 96);
+                  break;
                default : break;
             }
          } while(i != startsAt);
@@ -2495,6 +2693,23 @@
          {
             switch(jjstateSet[--i])
             {
+               case 2:
+               case 4:
+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
+                     jjCheckNAddStates(112, 114);
+                  break;
+               case 0:
+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
+                     jjCheckNAddStates(112, 114);
+                  break;
+               case 16:
+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
+                     jjCheckNAddStates(112, 114);
+                  break;
+               case 3:
+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
+                     jjCheckNAddStates(112, 114);
+                  break;
                case 1:
                   if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 15)
                      kind = 15;
@@ -2510,7 +2725,7 @@
          kind = 0x7fffffff;
       }
       ++curPos;
-      if ((i = jjnewStateCnt) == (startsAt = 15 - (jjnewStateCnt = startsAt)))
+      if ((i = jjnewStateCnt) == (startsAt = 16 - (jjnewStateCnt = startsAt)))
          return curPos;
       try { curChar = input_stream.readChar(); }
       catch(java.io.IOException e) { return curPos; }
@@ -2523,38 +2738,38 @@
       case 0:
          if ((active0 & 0x70000L) != 0L)
             return 2;
-         if ((active0 & 0x30000000L) != 0L)
+         if ((active0 & 0xc000000L) != 0L)
          {
-            jjmatchedKind = 62;
+            jjmatchedKind = 61;
             return 5;
          }
          return -1;
       case 1:
          if ((active0 & 0x10000L) != 0L)
             return 0;
-         if ((active0 & 0x30000000L) != 0L)
+         if ((active0 & 0xc000000L) != 0L)
          {
-            jjmatchedKind = 62;
+            jjmatchedKind = 61;
             jjmatchedPos = 1;
             return 5;
          }
          return -1;
       case 2:
-         if ((active0 & 0x30000000L) != 0L)
+         if ((active0 & 0xc000000L) != 0L)
          {
-            jjmatchedKind = 62;
+            jjmatchedKind = 61;
             jjmatchedPos = 2;
             return 5;
          }
          return -1;
       case 3:
-         if ((active0 & 0x20000000L) != 0L)
+         if ((active0 & 0x8000000L) != 0L)
          {
-            jjmatchedKind = 62;
+            jjmatchedKind = 61;
             jjmatchedPos = 3;
             return 5;
          }
-         if ((active0 & 0x10000000L) != 0L)
+         if ((active0 & 0x4000000L) != 0L)
             return 5;
          return -1;
       default :
@@ -2581,13 +2796,13 @@
          jjmatchedKind = 17;
          return jjMoveStringLiteralDfa1_5(0x50000L);
       case 102:
-         return jjMoveStringLiteralDfa1_5(0x20000000L);
+         return jjMoveStringLiteralDfa1_5(0x8000000L);
       case 116:
-         return jjMoveStringLiteralDfa1_5(0x10000000L);
+         return jjMoveStringLiteralDfa1_5(0x4000000L);
       case 123:
+         return jjStopAtPos(0, 63);
+      case 125:
          return jjStopAtPos(0, 64);
-      case 125:
-         return jjStopAtPos(0, 65);
       default :
          return jjMoveNfa_5(3, 0);
    }
@@ -2610,9 +2825,9 @@
             return jjStartNfaWithStates_5(1, 16, 0);
          break;
       case 97:
-         return jjMoveStringLiteralDfa2_5(active0, 0x20000000L);
+         return jjMoveStringLiteralDfa2_5(active0, 0x8000000L);
       case 114:
-         return jjMoveStringLiteralDfa2_5(active0, 0x10000000L);
+         return jjMoveStringLiteralDfa2_5(active0, 0x4000000L);
       default :
          break;
    }
@@ -2630,9 +2845,9 @@
    switch(curChar)
    {
       case 108:
-         return jjMoveStringLiteralDfa3_5(active0, 0x20000000L);
+         return jjMoveStringLiteralDfa3_5(active0, 0x8000000L);
       case 117:
-         return jjMoveStringLiteralDfa3_5(active0, 0x10000000L);
+         return jjMoveStringLiteralDfa3_5(active0, 0x4000000L);
       default :
          break;
    }
@@ -2650,11 +2865,11 @@
    switch(curChar)
    {
       case 101:
-         if ((active0 & 0x10000000L) != 0L)
-            return jjStartNfaWithStates_5(3, 28, 5);
+         if ((active0 & 0x4000000L) != 0L)
+            return jjStartNfaWithStates_5(3, 26, 5);
          break;
       case 115:
-         return jjMoveStringLiteralDfa4_5(active0, 0x20000000L);
+         return jjMoveStringLiteralDfa4_5(active0, 0x8000000L);
       default :
          break;
    }
@@ -2672,8 +2887,8 @@
    switch(curChar)
    {
       case 101:
-         if ((active0 & 0x20000000L) != 0L)
-            return jjStartNfaWithStates_5(4, 29, 5);
+         if ((active0 & 0x8000000L) != 0L)
+            return jjStartNfaWithStates_5(4, 27, 5);
          break;
       default :
          break;
@@ -2726,8 +2941,8 @@
                case 5:
                   if ((0x3ff200000000000L & l) == 0L)
                      break;
-                  if (kind > 62)
-                     kind = 62;
+                  if (kind > 61)
+                     kind = 61;
                   jjstateSet[jjnewStateCnt++] = 5;
                   break;
                case 6:
@@ -2767,12 +2982,12 @@
                case 3:
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
-                     if (kind > 62)
-                        kind = 62;
+                     if (kind > 61)
+                        kind = 61;
                      jjCheckNAdd(5);
                   }
                   else if (curChar == 92)
-                     jjCheckNAddStates(117, 120);
+                     jjCheckNAddStates(115, 118);
                   break;
                case 1:
                   if (kind > 15)
@@ -2782,17 +2997,17 @@
                case 5:
                   if ((0x7fffffe87fffffeL & l) == 0L)
                      break;
-                  if (kind > 62)
-                     kind = 62;
+                  if (kind > 61)
+                     kind = 61;
                   jjCheckNAdd(5);
                   break;
                case 7:
-                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 63)
-                     kind = 63;
+                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 62)
+                     kind = 62;
                   break;
                case 8:
                   if (curChar == 92)
-                     jjCheckNAddStates(117, 120);
+                     jjCheckNAddStates(115, 118);
                   break;
                case 9:
                   if (curChar == 92)
@@ -2804,7 +3019,7 @@
                   break;
                case 13:
                   if (curChar == 92)
-                     jjAddStates(92, 93);
+                     jjAddStates(95, 96);
                   break;
                default : break;
             }
@@ -2851,36 +3066,36 @@
             return 2;
          if ((active0 & 0x10L) != 0L)
             return 53;
-         if ((active0 & 0x30000000L) != 0L)
+         if ((active0 & 0xc000000L) != 0L)
          {
-            jjmatchedKind = 62;
+            jjmatchedKind = 61;
             return 23;
          }
          return -1;
       case 1:
          if ((active0 & 0x10000L) != 0L)
             return 0;
-         if ((active0 & 0x30000000L) != 0L)
+         if ((active0 & 0xc000000L) != 0L)
          {
-            jjmatchedKind = 62;
+            jjmatchedKind = 61;
             jjmatchedPos = 1;
             return 23;
          }
          return -1;
       case 2:
-         if ((active0 & 0x30000000L) != 0L)
+         if ((active0 & 0xc000000L) != 0L)
          {
-            jjmatchedKind = 62;
+            jjmatchedKind = 61;
             jjmatchedPos = 2;
             return 23;
          }
          return -1;
       case 3:
-         if ((active0 & 0x10000000L) != 0L)
+         if ((active0 & 0x4000000L) != 0L)
             return 23;
-         if ((active0 & 0x20000000L) != 0L)
+         if ((active0 & 0x8000000L) != 0L)
          {
-            jjmatchedKind = 62;
+            jjmatchedKind = 61;
             jjmatchedPos = 3;
             return 23;
          }
@@ -2921,9 +3136,9 @@
       case 93:
          return jjStopAtPos(0, 2);
       case 102:
-         return jjMoveStringLiteralDfa1_1(0x20000000L);
+         return jjMoveStringLiteralDfa1_1(0x8000000L);
       case 116:
-         return jjMoveStringLiteralDfa1_1(0x10000000L);
+         return jjMoveStringLiteralDfa1_1(0x4000000L);
       case 123:
          return jjStopAtPos(0, 6);
       case 125:
@@ -2954,9 +3169,9 @@
             return jjStopAtPos(1, 4);
          break;
       case 97:
-         return jjMoveStringLiteralDfa2_1(active0, 0x20000000L);
+         return jjMoveStringLiteralDfa2_1(active0, 0x8000000L);
       case 114:
-         return jjMoveStringLiteralDfa2_1(active0, 0x10000000L);
+         return jjMoveStringLiteralDfa2_1(active0, 0x4000000L);
       default :
          break;
    }
@@ -2965,7 +3180,7 @@
 private final int jjMoveStringLiteralDfa2_1(long old0, long active0)
 {
    if (((active0 &= old0)) == 0L)
-      return jjStartNfa_1(0, old0);
+      return jjStartNfa_1(0, old0); 
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_1(1, active0);
@@ -2974,9 +3189,9 @@
    switch(curChar)
    {
       case 108:
-         return jjMoveStringLiteralDfa3_1(active0, 0x20000000L);
+         return jjMoveStringLiteralDfa3_1(active0, 0x8000000L);
       case 117:
-         return jjMoveStringLiteralDfa3_1(active0, 0x10000000L);
+         return jjMoveStringLiteralDfa3_1(active0, 0x4000000L);
       default :
          break;
    }
@@ -2985,7 +3200,7 @@
 private final int jjMoveStringLiteralDfa3_1(long old0, long active0)
 {
    if (((active0 &= old0)) == 0L)
-      return jjStartNfa_1(1, old0);
+      return jjStartNfa_1(1, old0); 
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_1(2, active0);
@@ -2994,11 +3209,11 @@
    switch(curChar)
    {
       case 101:
-         if ((active0 & 0x10000000L) != 0L)
-            return jjStartNfaWithStates_1(3, 28, 23);
+         if ((active0 & 0x4000000L) != 0L)
+            return jjStartNfaWithStates_1(3, 26, 23);
          break;
       case 115:
-         return jjMoveStringLiteralDfa4_1(active0, 0x20000000L);
+         return jjMoveStringLiteralDfa4_1(active0, 0x8000000L);
       default :
          break;
    }
@@ -3007,7 +3222,7 @@
 private final int jjMoveStringLiteralDfa4_1(long old0, long active0)
 {
    if (((active0 &= old0)) == 0L)
-      return jjStartNfa_1(2, old0);
+      return jjStartNfa_1(2, old0); 
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_1(3, active0);
@@ -3016,8 +3231,8 @@
    switch(curChar)
    {
       case 101:
-         if ((active0 & 0x20000000L) != 0L)
-            return jjStartNfaWithStates_1(4, 29, 23);
+         if ((active0 & 0x8000000L) != 0L)
+            return jjStartNfaWithStates_1(4, 27, 23);
          break;
       default :
          break;
@@ -3046,20 +3261,20 @@
                case 3:
                   if ((0x3ff000000000000L & l) != 0L)
                   {
-                     if (kind > 52)
-                        kind = 52;
-                     jjCheckNAddStates(121, 126);
+                     if (kind > 51)
+                        kind = 51;
+                     jjCheckNAddStates(119, 124);
                   }
                   else if ((0x100002600L & l) != 0L)
                   {
-                     if (kind > 26)
-                        kind = 26;
+                     if (kind > 24)
+                        kind = 24;
                      jjCheckNAdd(4);
                   }
                   else if (curChar == 46)
                      jjCheckNAddTwoStates(43, 53);
                   else if (curChar == 45)
-                     jjCheckNAddStates(127, 130);
+                     jjCheckNAddStates(125, 128);
                   else if (curChar == 36)
                   {
                      if (kind > 13)
@@ -3067,9 +3282,9 @@
                      jjCheckNAddTwoStates(29, 30);
                   }
                   else if (curChar == 39)
-                     jjCheckNAddStates(131, 133);
+                     jjCheckNAddStates(129, 131);
                   else if (curChar == 34)
-                     jjCheckNAddStates(134, 136);
+                     jjCheckNAddStates(132, 134);
                   else if (curChar == 35)
                      jjstateSet[jjnewStateCnt++] = 2;
                   break;
@@ -3077,8 +3292,8 @@
                case 43:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 53)
-                     kind = 53;
+                  if (kind > 52)
+                     kind = 52;
                   jjCheckNAddTwoStates(43, 44);
                   break;
                case 0:
@@ -3096,33 +3311,33 @@
                case 4:
                   if ((0x100002600L & l) == 0L)
                      break;
-                  if (kind > 26)
-                     kind = 26;
+                  if (kind > 24)
+                     kind = 24;
                   jjCheckNAdd(4);
                   break;
                case 5:
                   if (curChar == 34)
-                     jjCheckNAddStates(134, 136);
+                     jjCheckNAddStates(132, 134);
                   break;
                case 6:
                   if ((0xfffffffbffffffffL & l) != 0L)
-                     jjCheckNAddStates(134, 136);
+                     jjCheckNAddStates(132, 134);
                   break;
                case 7:
-                  if (curChar == 34 && kind > 27)
-                     kind = 27;
+                  if (curChar == 34 && kind > 25)
+                     kind = 25;
                   break;
                case 9:
                   if ((0x8400000000L & l) != 0L)
-                     jjCheckNAddStates(134, 136);
+                     jjCheckNAddStates(132, 134);
                   break;
                case 10:
                   if ((0xff000000000000L & l) != 0L)
-                     jjCheckNAddStates(137, 140);
+                     jjCheckNAddStates(135, 138);
                   break;
                case 11:
                   if ((0xff000000000000L & l) != 0L)
-                     jjCheckNAddStates(134, 136);
+                     jjCheckNAddStates(132, 134);
                   break;
                case 12:
                   if ((0xf000000000000L & l) != 0L)
@@ -3134,19 +3349,19 @@
                   break;
                case 14:
                   if (curChar == 32)
-                     jjAddStates(107, 108);
+                     jjAddStates(59, 60);
                   break;
                case 15:
                   if (curChar == 10)
-                     jjCheckNAddStates(134, 136);
+                     jjCheckNAddStates(132, 134);
                   break;
                case 16:
                   if (curChar == 39)
-                     jjCheckNAddStates(131, 133);
+                     jjCheckNAddStates(129, 131);
                   break;
                case 17:
                   if ((0xffffff7fffffffffL & l) != 0L)
-                     jjCheckNAddStates(131, 133);
+                     jjCheckNAddStates(129, 131);
                   break;
                case 19:
                   if (curChar == 32)
@@ -3154,17 +3369,17 @@
                   break;
                case 20:
                   if (curChar == 10)
-                     jjCheckNAddStates(131, 133);
+                     jjCheckNAddStates(129, 131);
                   break;
                case 21:
-                  if (curChar == 39 && kind > 27)
-                     kind = 27;
+                  if (curChar == 39 && kind > 25)
+                     kind = 25;
                   break;
                case 23:
                   if ((0x3ff200000000000L & l) == 0L)
                      break;
-                  if (kind > 62)
-                     kind = 62;
+                  if (kind > 61)
+                     kind = 61;
                   jjstateSet[jjnewStateCnt++] = 23;
                   break;
                case 26:
@@ -3188,18 +3403,18 @@
                   break;
                case 32:
                   if (curChar == 45)
-                     jjCheckNAddStates(127, 130);
+                     jjCheckNAddStates(125, 128);
                   break;
                case 33:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 52)
-                     kind = 52;
+                  if (kind > 51)
+                     kind = 51;
                   jjCheckNAddTwoStates(33, 35);
                   break;
                case 34:
-                  if (curChar == 46 && kind > 52)
-                     kind = 52;
+                  if (curChar == 46 && kind > 51)
+                     kind = 51;
                   break;
                case 35:
                   if (curChar == 46)
@@ -3212,15 +3427,15 @@
                case 37:
                   if (curChar != 46)
                      break;
-                  if (kind > 53)
-                     kind = 53;
+                  if (kind > 52)
+                     kind = 52;
                   jjCheckNAddTwoStates(38, 39);
                   break;
                case 38:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 53)
-                     kind = 53;
+                  if (kind > 52)
+                     kind = 52;
                   jjCheckNAddTwoStates(38, 39);
                   break;
                case 40:
@@ -3230,8 +3445,8 @@
                case 41:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 53)
-                     kind = 53;
+                  if (kind > 52)
+                     kind = 52;
                   jjCheckNAdd(41);
                   break;
                case 42:
@@ -3245,8 +3460,8 @@
                case 46:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 53)
-                     kind = 53;
+                  if (kind > 52)
+                     kind = 52;
                   jjCheckNAdd(46);
                   break;
                case 47:
@@ -3260,16 +3475,16 @@
                case 50:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 53)
-                     kind = 53;
+                  if (kind > 52)
+                     kind = 52;
                   jjCheckNAdd(50);
                   break;
                case 51:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 52)
-                     kind = 52;
-                  jjCheckNAddStates(121, 126);
+                  if (kind > 51)
+                     kind = 51;
+                  jjCheckNAddStates(119, 124);
                   break;
                case 52:
                   if (curChar == 46)
@@ -3289,16 +3504,16 @@
                case 3:
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
-                     if (kind > 62)
-                        kind = 62;
+                     if (kind > 61)
+                        kind = 61;
                      jjCheckNAdd(23);
                   }
                   else if (curChar == 92)
-                     jjCheckNAddStates(141, 144);
+                     jjCheckNAddStates(139, 142);
                   break;
                case 53:
-                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 63)
-                     kind = 63;
+                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 62)
+                     kind = 62;
                   break;
                case 1:
                   if (kind > 15)
@@ -3306,18 +3521,18 @@
                   break;
                case 6:
                   if ((0xffffffffefffffffL & l) != 0L)
-                     jjCheckNAddStates(134, 136);
+                     jjCheckNAddStates(132, 134);
                   break;
                case 8:
                   if (curChar == 92)
-                     jjAddStates(145, 149);
+                     jjAddStates(143, 147);
                   break;
                case 9:
                   if ((0x14404410000000L & l) != 0L)
-                     jjCheckNAddStates(134, 136);
+                     jjCheckNAddStates(132, 134);
                   break;
                case 17:
-                  jjAddStates(131, 133);
+                  jjAddStates(129, 131);
                   break;
                case 18:
                   if (curChar == 92)
@@ -3327,13 +3542,13 @@
                case 23:
                   if ((0x7fffffe87fffffeL & l) == 0L)
                      break;
-                  if (kind > 62)
-                     kind = 62;
+                  if (kind > 61)
+                     kind = 61;
                   jjCheckNAdd(23);
                   break;
                case 24:
                   if (curChar == 92)
-                     jjCheckNAddStates(141, 144);
+                     jjCheckNAddStates(139, 142);
                   break;
                case 25:
                   if (curChar == 92)
@@ -3345,19 +3560,19 @@
                   break;
                case 29:
                   if (curChar == 92)
-                     jjAddStates(150, 151);
+                     jjAddStates(148, 149);
                   break;
                case 39:
                   if ((0x2000000020L & l) != 0L)
-                     jjAddStates(152, 153);
+                     jjAddStates(150, 151);
                   break;
                case 44:
                   if ((0x2000000020L & l) != 0L)
-                     jjAddStates(154, 155);
+                     jjAddStates(152, 153);
                   break;
                case 48:
                   if ((0x2000000020L & l) != 0L)
-                     jjAddStates(156, 157);
+                     jjAddStates(154, 155);
                   break;
                default : break;
             }
@@ -3380,11 +3595,11 @@
                   break;
                case 6:
                   if (jjCanMove_0(hiByte, i1, i2, l1, l2))
-                     jjAddStates(134, 136);
+                     jjAddStates(132, 134);
                   break;
                case 17:
                   if (jjCanMove_0(hiByte, i1, i2, l1, l2))
-                     jjAddStates(131, 133);
+                     jjAddStates(129, 131);
                   break;
                default : break;
             }
@@ -3410,38 +3625,38 @@
       case 0:
          if ((active0 & 0x70000L) != 0L)
             return 2;
-         if ((active0 & 0x30000000L) != 0L)
+         if ((active0 & 0xc000000L) != 0L)
          {
-            jjmatchedKind = 62;
+            jjmatchedKind = 61;
             return 5;
          }
          return -1;
       case 1:
          if ((active0 & 0x10000L) != 0L)
             return 0;
-         if ((active0 & 0x30000000L) != 0L)
+         if ((active0 & 0xc000000L) != 0L)
          {
-            jjmatchedKind = 62;
+            jjmatchedKind = 61;
             jjmatchedPos = 1;
             return 5;
          }
          return -1;
       case 2:
-         if ((active0 & 0x30000000L) != 0L)
+         if ((active0 & 0xc000000L) != 0L)
          {
-            jjmatchedKind = 62;
+            jjmatchedKind = 61;
             jjmatchedPos = 2;
             return 5;
          }
          return -1;
       case 3:
-         if ((active0 & 0x20000000L) != 0L)
+         if ((active0 & 0x8000000L) != 0L)
          {
-            jjmatchedKind = 62;
+            jjmatchedKind = 61;
             jjmatchedPos = 3;
             return 5;
          }
-         if ((active0 & 0x10000000L) != 0L)
+         if ((active0 & 0x4000000L) != 0L)
             return 5;
          return -1;
       default :
@@ -3470,13 +3685,13 @@
       case 40:
          return jjStopAtPos(0, 8);
       case 102:
-         return jjMoveStringLiteralDfa1_2(0x20000000L);
+         return jjMoveStringLiteralDfa1_2(0x8000000L);
       case 116:
-         return jjMoveStringLiteralDfa1_2(0x10000000L);
+         return jjMoveStringLiteralDfa1_2(0x4000000L);
       case 123:
+         return jjStopAtPos(0, 63);
+      case 125:
          return jjStopAtPos(0, 64);
-      case 125:
-         return jjStopAtPos(0, 65);
       default :
          return jjMoveNfa_2(3, 0);
    }
@@ -3499,9 +3714,9 @@
             return jjStartNfaWithStates_2(1, 16, 0);
          break;
       case 97:
-         return jjMoveStringLiteralDfa2_2(active0, 0x20000000L);
+         return jjMoveStringLiteralDfa2_2(active0, 0x8000000L);
       case 114:
-         return jjMoveStringLiteralDfa2_2(active0, 0x10000000L);
+         return jjMoveStringLiteralDfa2_2(active0, 0x4000000L);
       default :
          break;
    }
@@ -3519,9 +3734,9 @@
    switch(curChar)
    {
       case 108:
-         return jjMoveStringLiteralDfa3_2(active0, 0x20000000L);
+         return jjMoveStringLiteralDfa3_2(active0, 0x8000000L);
       case 117:
-         return jjMoveStringLiteralDfa3_2(active0, 0x10000000L);
+         return jjMoveStringLiteralDfa3_2(active0, 0x4000000L);
       default :
          break;
    }
@@ -3539,11 +3754,11 @@
    switch(curChar)
    {
       case 101:
-         if ((active0 & 0x10000000L) != 0L)
-            return jjStartNfaWithStates_2(3, 28, 5);
+         if ((active0 & 0x4000000L) != 0L)
+            return jjStartNfaWithStates_2(3, 26, 5);
          break;
       case 115:
-         return jjMoveStringLiteralDfa4_2(active0, 0x20000000L);
+         return jjMoveStringLiteralDfa4_2(active0, 0x8000000L);
       default :
          break;
    }
@@ -3561,8 +3776,8 @@
    switch(curChar)
    {
       case 101:
-         if ((active0 & 0x20000000L) != 0L)
-            return jjStartNfaWithStates_2(4, 29, 5);
+         if ((active0 & 0x8000000L) != 0L)
+            return jjStartNfaWithStates_2(4, 27, 5);
          break;
       default :
          break;
@@ -3615,8 +3830,8 @@
                case 5:
                   if ((0x3ff200000000000L & l) == 0L)
                      break;
-                  if (kind > 62)
-                     kind = 62;
+                  if (kind > 61)
+                     kind = 61;
                   jjstateSet[jjnewStateCnt++] = 5;
                   break;
                case 6:
@@ -3656,12 +3871,12 @@
                case 3:
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
-                     if (kind > 62)
-                        kind = 62;
+                     if (kind > 61)
+                        kind = 61;
                      jjCheckNAdd(5);
                   }
                   else if (curChar == 92)
-                     jjCheckNAddStates(117, 120);
+                     jjCheckNAddStates(115, 118);
                   break;
                case 1:
                   if (kind > 15)
@@ -3671,17 +3886,17 @@
                case 5:
                   if ((0x7fffffe87fffffeL & l) == 0L)
                      break;
-                  if (kind > 62)
-                     kind = 62;
+                  if (kind > 61)
+                     kind = 61;
                   jjCheckNAdd(5);
                   break;
                case 7:
-                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 63)
-                     kind = 63;
+                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 62)
+                     kind = 62;
                   break;
                case 8:
                   if (curChar == 92)
-                     jjCheckNAddStates(117, 120);
+                     jjCheckNAddStates(115, 118);
                   break;
                case 9:
                   if (curChar == 92)
@@ -3693,7 +3908,7 @@
                   break;
                case 13:
                   if (curChar == 92)
-                     jjAddStates(92, 93);
+                     jjAddStates(95, 96);
                   break;
                default : break;
             }
@@ -3732,16 +3947,16 @@
    }
 }
 static final int[] jjnextStates = {
-   82, 84, 85, 86, 91, 92, 82, 85, 52, 91, 22, 23, 26, 11, 12, 13,
-   1, 2, 4, 11, 16, 12, 13, 19, 20, 24, 25, 61, 62, 64, 65, 66,
-   67, 78, 80, 75, 76, 72, 73, 14, 15, 17, 19, 20, 55, 56, 68, 69,
-   89, 90, 93, 94, 5, 6, 7, 8, 9, 10, 78, 80, 81, 82, 87, 88,
-   78, 81, 10, 87, 31, 32, 34, 42, 43, 45, 50, 32, 51, 66, 43, 67,
-   54, 57, 64, 71, 76, 22, 23, 24, 25, 35, 40, 47, 13, 14, 26, 27,
-   85, 86, 6, 11, 29, 3, 4, 19, 20, 21, 22, 14, 15, 23, 24, 8,
-   9, 10, 11, 12, 13, 9, 10, 11, 12, 33, 35, 36, 37, 47, 48, 33,
-   36, 42, 47, 17, 18, 21, 6, 7, 8, 6, 11, 7, 8, 25, 26, 27,
-   28, 9, 10, 12, 14, 15, 29, 30, 40, 41, 45, 46, 49, 50,
+   82, 84, 85, 86, 91, 92, 82, 85, 52, 91, 22, 23, 26, 11, 12, 13, 
+   1, 2, 4, 11, 16, 12, 13, 19, 20, 24, 25, 61, 62, 64, 65, 66, 
+   67, 78, 80, 75, 76, 72, 73, 14, 15, 17, 19, 20, 55, 56, 68, 69, 
+   89, 90, 93, 94, 4, 5, 8, 10, 11, 12, 13, 14, 15, 78, 80, 81, 
+   82, 87, 88, 78, 81, 10, 87, 31, 32, 34, 42, 43, 45, 50, 32, 51, 
+   66, 43, 67, 54, 57, 64, 71, 76, 22, 23, 24, 25, 35, 40, 47, 13, 
+   14, 26, 27, 85, 86, 6, 11, 29, 3, 4, 19, 20, 21, 22, 23, 24, 
+   4, 5, 7, 9, 10, 11, 12, 33, 35, 36, 37, 47, 48, 33, 36, 42, 
+   47, 17, 18, 21, 6, 7, 8, 6, 11, 7, 8, 25, 26, 27, 28, 9, 
+   10, 12, 14, 15, 29, 30, 40, 41, 45, 46, 49, 50, 
 };
 private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
 {
@@ -3749,45 +3964,45 @@
    {
       case 0:
          return ((jjbitVec2[i2] & l2) != 0L);
-      default :
+      default : 
          if ((jjbitVec0[i1] & l1) != 0L)
             return true;
          return false;
    }
 }
 public static final String[] jjstrLiteralImages = {
-null, null, null, null, null, null, null, null, null, null, null, null, null,
-null, null, null, null, null, null, null, null, null, null, null, null, null, null,
-null, null, null, null, null, null, null, null, null, null, null, null, null, null,
-null, null, null, null, null, null, null, null, null, null, null, null, null, null,
-null, null, null, null, null, null, null, null, null, null, null, null, null, };
+null, null, null, null, null, null, null, null, null, null, null, null, null, 
+null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
+null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
+null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
+null, null, null, null, null, null, null, null, null, null, null, null, };
 public static final String[] lexStateNames = {
-   "DIRECTIVE",
-   "REFMOD2",
-   "REFMODIFIER",
-   "DEFAULT",
-   "PRE_DIRECTIVE",
-   "REFERENCE",
-   "IN_MULTI_LINE_COMMENT",
-   "IN_FORMAL_COMMENT",
-   "IN_SINGLE_LINE_COMMENT",
+   "DIRECTIVE", 
+   "REFMOD2", 
+   "REFMODIFIER", 
+   "DEFAULT", 
+   "PRE_DIRECTIVE", 
+   "REFERENCE", 
+   "IN_MULTI_LINE_COMMENT", 
+   "IN_FORMAL_COMMENT", 
+   "IN_SINGLE_LINE_COMMENT", 
 };
 public static final int[] jjnewLexState = {
-   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
+   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
+   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
 };
 static final long[] jjtoToken = {
-   0xc637fffffdfc1fffL, 0x3L,
+   0xe31bfffffffc1fffL, 0x1L, 
 };
 static final long[] jjtoSkip = {
-   0x2000000L, 0xcL,
+   0x0L, 0x6L, 
 };
 static final long[] jjtoSpecial = {
-   0x0L, 0xcL,
+   0x0L, 0x6L, 
 };
 static final long[] jjtoMore = {
-   0x3e000L, 0x0L,
+   0x3e000L, 0x0L, 
 };
 protected CharStream input_stream;
 private final int[] jjrounds = new int[96];
@@ -3850,7 +4065,7 @@
 int jjmatchedPos;
 int jjmatchedKind;
 
-public Token getNextToken()
+public Token getNextToken() 
 {
   int kind;
   Token specialToken = null;
@@ -3859,13 +4074,13 @@
 
   EOFLoop :
   for (;;)
-  {
-   try
-   {
+  {   
+   try   
+   {     
       curChar = input_stream.BeginToken();
-   }
+   }     
    catch(java.io.IOException e)
-   {
+   {        
       jjmatchedKind = 0;
       matchedToken = jjFillToken();
       matchedToken.specialToken = specialToken;
@@ -3887,18 +4102,18 @@
          jjmatchedKind = 0x7fffffff;
          jjmatchedPos = 0;
          curPos = jjMoveStringLiteralDfa0_1();
-         if (jjmatchedPos == 0 && jjmatchedKind > 66)
+         if (jjmatchedPos == 0 && jjmatchedKind > 65)
          {
-            jjmatchedKind = 66;
+            jjmatchedKind = 65;
          }
          break;
        case 2:
          jjmatchedKind = 0x7fffffff;
          jjmatchedPos = 0;
          curPos = jjMoveStringLiteralDfa0_2();
-         if (jjmatchedPos == 0 && jjmatchedKind > 66)
+         if (jjmatchedPos == 0 && jjmatchedKind > 65)
          {
-            jjmatchedKind = 66;
+            jjmatchedKind = 65;
          }
          break;
        case 3:
@@ -3910,46 +4125,34 @@
          jjmatchedKind = 0x7fffffff;
          jjmatchedPos = 0;
          curPos = jjMoveStringLiteralDfa0_4();
-         if (jjmatchedPos == 0 && jjmatchedKind > 67)
+         if (jjmatchedPos == 0 && jjmatchedKind > 66)
          {
-            jjmatchedKind = 67;
+            jjmatchedKind = 66;
          }
          break;
        case 5:
          jjmatchedKind = 0x7fffffff;
          jjmatchedPos = 0;
          curPos = jjMoveStringLiteralDfa0_5();
-         if (jjmatchedPos == 0 && jjmatchedKind > 66)
+         if (jjmatchedPos == 0 && jjmatchedKind > 65)
          {
-            jjmatchedKind = 66;
+            jjmatchedKind = 65;
          }
          break;
        case 6:
          jjmatchedKind = 0x7fffffff;
          jjmatchedPos = 0;
          curPos = jjMoveStringLiteralDfa0_6();
-         if (jjmatchedPos == 0 && jjmatchedKind > 25)
-         {
-            jjmatchedKind = 25;
-         }
          break;
        case 7:
          jjmatchedKind = 0x7fffffff;
          jjmatchedPos = 0;
          curPos = jjMoveStringLiteralDfa0_7();
-         if (jjmatchedPos == 0 && jjmatchedKind > 25)
-         {
-            jjmatchedKind = 25;
-         }
          break;
        case 8:
          jjmatchedKind = 0x7fffffff;
          jjmatchedPos = 0;
          curPos = jjMoveStringLiteralDfa0_8();
-         if (jjmatchedPos == 0 && jjmatchedKind > 25)
-         {
-            jjmatchedKind = 25;
-         }
          break;
      }
      if (jjmatchedKind != 0x7fffffff)
@@ -3979,7 +4182,7 @@
               }
               SkipLexicalActions(matchedToken);
            }
-           else
+           else 
               SkipLexicalActions(null);
          if (jjnewLexState[jjmatchedKind] != -1)
            curLexState = jjnewLexState[jjmatchedKind];
@@ -4024,7 +4227,7 @@
 {
    switch(jjmatchedKind)
    {
-      case 66 :
+      case 65 :
          if (image == null)
             image = new StringBuffer();
          image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
@@ -4041,7 +4244,7 @@
 
         stateStackPop();
          break;
-      case 67 :
+      case 66 :
          if (image == null)
             image = new StringBuffer();
          image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
@@ -4163,7 +4366,7 @@
             SwitchTo(PRE_DIRECTIVE);
         }
          break;
-      default :
+      default : 
          break;
    }
 }
@@ -4268,17 +4471,10 @@
     inComment = false;
     stateStackPop();
          break;
-      case 24 :
+      case 25 :
         if (image == null)
             image = new StringBuffer();
             image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
-    inComment = false;
-    stateStackPop();
-         break;
-      case 27 :
-        if (image == null)
-            image = new StringBuffer();
-            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
         /*
          *  - if we are in DIRECTIVE and haven't seen ( yet, then also drop out.
          *      don't forget to account for the beloved yet wierd #set
@@ -4288,7 +4484,7 @@
          if( curLexState == DIRECTIVE && !inSet && lparen == 0)
             stateStackPop();
          break;
-      case 30 :
+      case 28 :
         if (image == null)
             image = new StringBuffer();
             image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
@@ -4303,40 +4499,47 @@
         if (inDirective)
             inDirective = false;
          break;
-      case 46 :
+      case 44 :
         if (image == null)
             image = new StringBuffer();
             image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
         inDirective = false;
         stateStackPop();
          break;
-      case 47 :
+      case 45 :
         if (image == null)
             image = new StringBuffer();
             image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
+        inDirective = false;
+        stateStackPop();
+         break;
+      case 46 :
+        if (image == null)
+            image = new StringBuffer();
+            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
         SwitchTo(DIRECTIVE);
          break;
-      case 48 :
+      case 47 :
         if (image == null)
             image = new StringBuffer();
             image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
         SwitchTo(DIRECTIVE);
          break;
-      case 49 :
+      case 48 :
         if (image == null)
             image = new StringBuffer();
             image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
         inDirective = false;
         stateStackPop();
          break;
-      case 50 :
+      case 49 :
         if (image == null)
             image = new StringBuffer();
             image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
         inDirective = false;
         stateStackPop();
          break;
-      case 52 :
+      case 51 :
         if (image == null)
             image = new StringBuffer();
             image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
@@ -4359,7 +4562,7 @@
             stateStackPop();
         }
          break;
-      case 53 :
+      case 52 :
         if (image == null)
             image = new StringBuffer();
             image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
@@ -4374,7 +4577,7 @@
             stateStackPop();
     }
          break;
-      case 63 :
+      case 62 :
         if (image == null)
             image = new StringBuffer();
             image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
@@ -4396,13 +4599,13 @@
             System.out.print("DOT : switching to " + REFMODIFIER);
         SwitchTo(REFMODIFIER);
          break;
-      case 65 :
+      case 64 :
         if (image == null)
             image = new StringBuffer();
             image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
         stateStackPop();
          break;
-      default :
+      default : 
          break;
    }
 }
Index: velocity/src/java/org/apache/velocity/runtime/parser/ParserConstants.java
===================================================================
--- velocity/src/java/org/apache/velocity/runtime/parser/ParserConstants.java	(revision 654045)
+++ velocity/src/java/org/apache/velocity/runtime/parser/ParserConstants.java	(working copy)
@@ -25,49 +25,49 @@
   int TEXT = 21;
   int SINGLE_LINE_COMMENT = 22;
   int FORMAL_COMMENT = 23;
-  int MULTI_LINE_COMMENT = 24;
-  int WHITESPACE = 26;
-  int STRING_LITERAL = 27;
-  int TRUE = 28;
-  int FALSE = 29;
-  int NEWLINE = 30;
-  int MINUS = 31;
-  int PLUS = 32;
-  int MULTIPLY = 33;
-  int DIVIDE = 34;
-  int MODULUS = 35;
-  int LOGICAL_AND = 36;
-  int LOGICAL_OR = 37;
-  int LOGICAL_LT = 38;
-  int LOGICAL_LE = 39;
-  int LOGICAL_GT = 40;
-  int LOGICAL_GE = 41;
-  int LOGICAL_EQUALS = 42;
-  int LOGICAL_NOT_EQUALS = 43;
-  int LOGICAL_NOT = 44;
-  int EQUALS = 45;
-  int END = 46;
-  int IF_DIRECTIVE = 47;
-  int ELSEIF_DIRECTIVE = 48;
-  int ELSE_DIRECTIVE = 49;
-  int STOP_DIRECTIVE = 50;
-  int DIGIT = 51;
-  int INTEGER_LITERAL = 52;
-  int FLOATING_POINT_LITERAL = 53;
-  int EXPONENT = 54;
-  int LETTER = 55;
-  int DIRECTIVE_CHAR = 56;
-  int WORD = 57;
-  int BRACKETED_WORD = 58;
-  int ALPHA_CHAR = 59;
-  int ALPHANUM_CHAR = 60;
-  int IDENTIFIER_CHAR = 61;
-  int IDENTIFIER = 62;
-  int DOT = 63;
-  int LCURLY = 64;
-  int RCURLY = 65;
-  int REFERENCE_TERMINATOR = 66;
-  int DIRECTIVE_TERMINATOR = 67;
+  int WHITESPACE = 24;
+  int STRING_LITERAL = 25;
+  int TRUE = 26;
+  int FALSE = 27;
+  int NEWLINE = 28;
+  int MINUS = 29;
+  int PLUS = 30;
+  int MULTIPLY = 31;
+  int DIVIDE = 32;
+  int MODULUS = 33;
+  int LOGICAL_AND = 34;
+  int LOGICAL_OR = 35;
+  int LOGICAL_LT = 36;
+  int LOGICAL_LE = 37;
+  int LOGICAL_GT = 38;
+  int LOGICAL_GE = 39;
+  int LOGICAL_EQUALS = 40;
+  int LOGICAL_NOT_EQUALS = 41;
+  int LOGICAL_NOT = 42;
+  int EQUALS = 43;
+  int END = 44;
+  int WHITESPACE_DIRECTIVE = 45;
+  int IF_DIRECTIVE = 46;
+  int ELSEIF_DIRECTIVE = 47;
+  int ELSE_DIRECTIVE = 48;
+  int STOP_DIRECTIVE = 49;
+  int DIGIT = 50;
+  int INTEGER_LITERAL = 51;
+  int FLOATING_POINT_LITERAL = 52;
+  int EXPONENT = 53;
+  int LETTER = 54;
+  int DIRECTIVE_CHAR = 55;
+  int WORD = 56;
+  int BRACKETED_WORD = 57;
+  int ALPHA_CHAR = 58;
+  int ALPHANUM_CHAR = 59;
+  int IDENTIFIER_CHAR = 60;
+  int IDENTIFIER = 61;
+  int DOT = 62;
+  int LCURLY = 63;
+  int RCURLY = 64;
+  int REFERENCE_TERMINATOR = 65;
+  int DIRECTIVE_TERMINATOR = 66;
 
   int DIRECTIVE = 0;
   int REFMOD2 = 1;
@@ -103,9 +103,7 @@
     "\"\\\\\"",
     "<TEXT>",
     "<SINGLE_LINE_COMMENT>",
-    "\"*#\"",
-    "\"*#\"",
-    "<token of kind 25>",
+    "<FORMAL_COMMENT>",
     "<WHITESPACE>",
     "<STRING_LITERAL>",
     "\"true\"",
@@ -127,6 +125,7 @@
     "<LOGICAL_NOT>",
     "\"=\"",
     "<END>",
+    "\"%\"",
     "<IF_DIRECTIVE>",
     "<ELSEIF_DIRECTIVE>",
     "<ELSE_DIRECTIVE>",
Index: velocity/src/java/org/apache/velocity/runtime/parser/Parser.java
===================================================================
--- velocity/src/java/org/apache/velocity/runtime/parser/Parser.java	(revision 654045)
+++ velocity/src/java/org/apache/velocity/runtime/parser/Parser.java	(working copy)
@@ -1,15 +1,15 @@
 /* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
 package org.apache.velocity.runtime.parser;
 
-import java.io.*;
-import java.util.*;
+import java.io.ByteArrayInputStream;
+import java.io.Reader;
+import java.util.Hashtable;
 
 import org.apache.velocity.runtime.RuntimeServices;
-import org.apache.velocity.runtime.parser.node.*;
 import org.apache.velocity.runtime.directive.Directive;
 import org.apache.velocity.runtime.directive.Macro;
 import org.apache.velocity.runtime.directive.MacroParseException;
-import org.apache.velocity.util.StringUtils;
+import org.apache.velocity.runtime.parser.node.*;
 
 /**
  * This class is responsible for parsing a Velocity
@@ -189,6 +189,7 @@
 
             if ( strDirective.substring(1).equals("if")
                 || strDirective.substring(1).equals("end")
+                || strDirective.substring(1).equals("%")
                 || strDirective.substring(1).equals("set")
                 || strDirective.substring(1).equals("else")
                 || strDirective.substring(1).equals("elseif")
@@ -237,8 +238,8 @@
         case ESCAPE:
         case TEXT:
         case FORMAL_COMMENT:
-        case MULTI_LINE_COMMENT:
         case STRING_LITERAL:
+        case WHITESPACE_DIRECTIVE:
         case IF_DIRECTIVE:
         case STOP_DIRECTIVE:
         case INTEGER_LITERAL:
@@ -295,6 +296,9 @@
     case STOP_DIRECTIVE:
       StopStatement();
       break;
+    case WHITESPACE_DIRECTIVE:
+      WhitespaceStatement();
+      break;
     default:
       jj_la1[1] = jj_gen;
       if (jj_2_1(2)) {
@@ -303,7 +307,6 @@
         switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
         case SINGLE_LINE_COMMENT_START:
         case FORMAL_COMMENT:
-        case MULTI_LINE_COMMENT:
           Comment();
           break;
         case SET_DIRECTIVE:
@@ -404,6 +407,7 @@
             case ELSE_DIRECTIVE :
             case ELSEIF_DIRECTIVE :
             case END :
+            case WHITESPACE_DIRECTIVE :
             case STOP_DIRECTIVE :
                 control = true;
                 break;
@@ -447,9 +451,6 @@
           ;
         }
         break;
-      case MULTI_LINE_COMMENT:
-        jj_consume_token(MULTI_LINE_COMMENT);
-        break;
       case FORMAL_COMMENT:
         jj_consume_token(FORMAL_COMMENT);
         break;
@@ -802,8 +803,8 @@
           case ESCAPE:
           case TEXT:
           case FORMAL_COMMENT:
-          case MULTI_LINE_COMMENT:
           case STRING_LITERAL:
+          case WHITESPACE_DIRECTIVE:
           case IF_DIRECTIVE:
           case STOP_DIRECTIVE:
           case INTEGER_LITERAL:
@@ -1432,8 +1433,8 @@
           case ESCAPE:
           case TEXT:
           case FORMAL_COMMENT:
-          case MULTI_LINE_COMMENT:
           case STRING_LITERAL:
+          case WHITESPACE_DIRECTIVE:
           case IF_DIRECTIVE:
           case STOP_DIRECTIVE:
           case INTEGER_LITERAL:
@@ -1543,8 +1544,8 @@
           case ESCAPE:
           case TEXT:
           case FORMAL_COMMENT:
-          case MULTI_LINE_COMMENT:
           case STRING_LITERAL:
+          case WHITESPACE_DIRECTIVE:
           case IF_DIRECTIVE:
           case STOP_DIRECTIVE:
           case INTEGER_LITERAL:
@@ -1637,8 +1638,8 @@
           case ESCAPE:
           case TEXT:
           case FORMAL_COMMENT:
-          case MULTI_LINE_COMMENT:
           case STRING_LITERAL:
+          case WHITESPACE_DIRECTIVE:
           case IF_DIRECTIVE:
           case STOP_DIRECTIVE:
           case INTEGER_LITERAL:
@@ -1784,6 +1785,20 @@
     }
   }
 
+  final public void WhitespaceStatement() throws ParseException {
+                              /*@bgen(jjtree) WhitespaceStatement */
+  ASTWhitespaceStatement jjtn000 = new ASTWhitespaceStatement(this, JJTWHITESPACESTATEMENT);
+  boolean jjtc000 = true;
+  jjtree.openNodeScope(jjtn000);
+    try {
+      jj_consume_token(WHITESPACE_DIRECTIVE);
+    } finally {
+      if (jjtc000) {
+        jjtree.closeNodeScope(jjtn000, true);
+      }
+    }
+  }
+
 /* -----------------------------------------------------------------------
  *
  *  Expression Syntax
@@ -2567,6 +2582,22 @@
     return false;
   }
 
+  final private boolean jj_3_12() {
+    if (jj_scan_token(LBRACKET)) return true;
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_scan_token(24)) jj_scanpos = xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_32()) {
+    jj_scanpos = xsp;
+    if (jj_3R_33()) return true;
+    }
+    xsp = jj_scanpos;
+    if (jj_scan_token(24)) jj_scanpos = xsp;
+    if (jj_scan_token(DOUBLEDOT)) return true;
+    return false;
+  }
+
   final private boolean jj_3_7() {
     if (jj_scan_token(DOT)) return true;
     Token xsp;
@@ -2578,11 +2609,6 @@
     return false;
   }
 
-  final private boolean jj_3_2() {
-    if (jj_scan_token(DOUBLE_ESCAPE)) return true;
-    return false;
-  }
-
   final private boolean jj_3R_35() {
     if (jj_scan_token(LCURLY)) return true;
     if (jj_scan_token(IDENTIFIER)) return true;
@@ -2595,32 +2621,11 @@
     return false;
   }
 
-  final private boolean jj_3_12() {
-    if (jj_scan_token(LBRACKET)) return true;
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_scan_token(26)) jj_scanpos = xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_32()) {
-    jj_scanpos = xsp;
-    if (jj_3R_33()) return true;
-    }
-    xsp = jj_scanpos;
-    if (jj_scan_token(26)) jj_scanpos = xsp;
-    if (jj_scan_token(DOUBLEDOT)) return true;
+  final private boolean jj_3_2() {
+    if (jj_scan_token(DOUBLE_ESCAPE)) return true;
     return false;
   }
 
-  final private boolean jj_3R_34() {
-    if (jj_scan_token(IDENTIFIER)) return true;
-    Token xsp;
-    while (true) {
-      xsp = jj_scanpos;
-      if (jj_3_7()) { jj_scanpos = xsp; break; }
-    }
-    return false;
-  }
-
   final private boolean jj_3R_81() {
     if (jj_scan_token(LPAREN)) return true;
     return false;
@@ -2636,12 +2641,12 @@
     return false;
   }
 
-  final private boolean jj_3R_20() {
+  final private boolean jj_3R_34() {
+    if (jj_scan_token(IDENTIFIER)) return true;
     Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_34()) {
-    jj_scanpos = xsp;
-    if (jj_3R_35()) return true;
+    while (true) {
+      xsp = jj_scanpos;
+      if (jj_3_7()) { jj_scanpos = xsp; break; }
     }
     return false;
   }
@@ -2666,6 +2671,16 @@
     return false;
   }
 
+  final private boolean jj_3R_20() {
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_34()) {
+    jj_scanpos = xsp;
+    if (jj_3R_35()) return true;
+    }
+    return false;
+  }
+
   final private boolean jj_3R_74() {
     if (jj_3R_36()) return true;
     return false;
@@ -2676,32 +2691,6 @@
     return false;
   }
 
-  final private boolean jj_3_6() {
-    if (jj_scan_token(LBRACKET)) return true;
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_scan_token(26)) jj_scanpos = xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_26()) {
-    jj_scanpos = xsp;
-    if (jj_3R_27()) return true;
-    }
-    xsp = jj_scanpos;
-    if (jj_scan_token(26)) jj_scanpos = xsp;
-    if (jj_scan_token(DOUBLEDOT)) return true;
-    return false;
-  }
-
-  final private boolean jj_3R_29() {
-    if (jj_3R_56()) return true;
-    if (jj_scan_token(LPAREN)) return true;
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_57()) jj_scanpos = xsp;
-    if (jj_scan_token(REFMOD2_RPAREN)) return true;
-    return false;
-  }
-
   final private boolean jj_3R_72() {
     if (jj_3R_60()) return true;
     return false;
@@ -2710,7 +2699,7 @@
   final private boolean jj_3R_67() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(26)) jj_scanpos = xsp;
+    if (jj_scan_token(24)) jj_scanpos = xsp;
     xsp = jj_scanpos;
     if (jj_3R_72()) {
     jj_scanpos = xsp;
@@ -2743,34 +2732,32 @@
     return false;
   }
 
-  final private boolean jj_3R_55() {
-    if (jj_3R_62()) return true;
+  final private boolean jj_3_6() {
+    if (jj_scan_token(LBRACKET)) return true;
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_scan_token(24)) jj_scanpos = xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_26()) {
+    jj_scanpos = xsp;
+    if (jj_3R_27()) return true;
+    }
+    xsp = jj_scanpos;
+    if (jj_scan_token(24)) jj_scanpos = xsp;
+    if (jj_scan_token(DOUBLEDOT)) return true;
     return false;
   }
 
-  final private boolean jj_3R_54() {
-    if (jj_3R_20()) return true;
+  final private boolean jj_3R_29() {
+    if (jj_3R_56()) return true;
+    if (jj_scan_token(LPAREN)) return true;
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_57()) jj_scanpos = xsp;
+    if (jj_scan_token(REFMOD2_RPAREN)) return true;
     return false;
   }
 
-  final private boolean jj_3R_53() {
-    if (jj_3R_66()) return true;
-    return false;
-  }
-
-  final private boolean jj_3R_85() {
-    if (jj_scan_token(COMMA)) return true;
-    if (jj_3R_25()) return true;
-    if (jj_scan_token(COLON)) return true;
-    if (jj_3R_25()) return true;
-    return false;
-  }
-
-  final private boolean jj_3R_52() {
-    if (jj_3R_65()) return true;
-    return false;
-  }
-
   final private boolean jj_3R_31() {
     Token xsp;
     xsp = jj_scanpos;
@@ -2784,7 +2771,7 @@
   final private boolean jj_3_11() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(26)) jj_scanpos = xsp;
+    if (jj_scan_token(24)) jj_scanpos = xsp;
     if (jj_scan_token(LOGICAL_NOT)) return true;
     if (jj_3R_31()) return true;
     return false;
@@ -2795,6 +2782,34 @@
     return false;
   }
 
+  final private boolean jj_3R_55() {
+    if (jj_3R_62()) return true;
+    return false;
+  }
+
+  final private boolean jj_3R_54() {
+    if (jj_3R_20()) return true;
+    return false;
+  }
+
+  final private boolean jj_3R_53() {
+    if (jj_3R_66()) return true;
+    return false;
+  }
+
+  final private boolean jj_3R_85() {
+    if (jj_scan_token(COMMA)) return true;
+    if (jj_3R_25()) return true;
+    if (jj_scan_token(COLON)) return true;
+    if (jj_3R_25()) return true;
+    return false;
+  }
+
+  final private boolean jj_3R_52() {
+    if (jj_3R_65()) return true;
+    return false;
+  }
+
   final private boolean jj_3R_51() {
     if (jj_3R_64()) return true;
     return false;
@@ -2844,7 +2859,7 @@
   final private boolean jj_3R_25() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(26)) jj_scanpos = xsp;
+    if (jj_scan_token(24)) jj_scanpos = xsp;
     xsp = jj_scanpos;
     if (jj_3R_47()) {
     jj_scanpos = xsp;
@@ -2872,7 +2887,7 @@
     }
     }
     xsp = jj_scanpos;
-    if (jj_scan_token(26)) jj_scanpos = xsp;
+    if (jj_scan_token(24)) jj_scanpos = xsp;
     return false;
   }
 
@@ -2910,24 +2925,24 @@
     if (jj_scan_token(LBRACKET)) return true;
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(26)) jj_scanpos = xsp;
+    if (jj_scan_token(24)) jj_scanpos = xsp;
     xsp = jj_scanpos;
     if (jj_3R_68()) {
     jj_scanpos = xsp;
     if (jj_3R_69()) return true;
     }
     xsp = jj_scanpos;
-    if (jj_scan_token(26)) jj_scanpos = xsp;
+    if (jj_scan_token(24)) jj_scanpos = xsp;
     if (jj_scan_token(DOUBLEDOT)) return true;
     xsp = jj_scanpos;
-    if (jj_scan_token(26)) jj_scanpos = xsp;
+    if (jj_scan_token(24)) jj_scanpos = xsp;
     xsp = jj_scanpos;
     if (jj_3R_83()) {
     jj_scanpos = xsp;
     if (jj_3R_84()) return true;
     }
     xsp = jj_scanpos;
-    if (jj_scan_token(26)) jj_scanpos = xsp;
+    if (jj_scan_token(24)) jj_scanpos = xsp;
     if (jj_scan_token(RBRACKET)) return true;
     return false;
   }
@@ -2949,7 +2964,7 @@
   final private boolean jj_3R_70() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(26)) jj_scanpos = xsp;
+    if (jj_scan_token(24)) jj_scanpos = xsp;
     return false;
   }
 
@@ -2986,14 +3001,14 @@
     if (jj_scan_token(LBRACKET)) return true;
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(26)) jj_scanpos = xsp;
+    if (jj_scan_token(24)) jj_scanpos = xsp;
     xsp = jj_scanpos;
     if (jj_3R_21()) {
     jj_scanpos = xsp;
     if (jj_3R_22()) return true;
     }
     xsp = jj_scanpos;
-    if (jj_scan_token(26)) jj_scanpos = xsp;
+    if (jj_scan_token(24)) jj_scanpos = xsp;
     if (jj_scan_token(DOUBLEDOT)) return true;
     return false;
   }
@@ -3032,7 +3047,7 @@
     if (jj_scan_token(COMMA)) return true;
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(26)) jj_scanpos = xsp;
+    if (jj_scan_token(24)) jj_scanpos = xsp;
     return false;
   }
 
@@ -3093,7 +3108,7 @@
   final private boolean jj_3_4() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(26)) jj_scanpos = xsp;
+    if (jj_scan_token(24)) jj_scanpos = xsp;
     xsp = jj_scanpos;
     if (jj_3R_23()) jj_scanpos = xsp;
     if (jj_3R_24()) return true;
@@ -3115,6 +3130,11 @@
     return false;
   }
 
+  final private boolean jj_3R_33() {
+    if (jj_3R_36()) return true;
+    return false;
+  }
+
   final private boolean jj_3R_28() {
     if (jj_3R_56()) return true;
     return false;
@@ -3125,11 +3145,6 @@
     return false;
   }
 
-  final private boolean jj_3R_33() {
-    if (jj_3R_36()) return true;
-    return false;
-  }
-
   final private boolean jj_3R_32() {
     if (jj_3R_20()) return true;
     return false;
@@ -3163,13 +3178,13 @@
       jj_la1_2();
    }
    private static void jj_la1_0() {
-      jj_la1_0 = new int[] {0x9bc1b00,0x0,0x9bc1b00,0x400000,0x1840000,0x8000000,0x30000042,0x0,0x4000000,0x4000000,0x4000000,0x8,0x4000000,0x9bc1b00,0x8,0x4000000,0x8,0x3c000042,0x4000000,0x0,0x4000000,0x4000000,0x0,0x4000000,0x4000000,0x8000000,0x30000042,0x4000000,0x8,0x3c000042,0x0,0x0,0x0,0x8300300,0x4000000,0x9bc1b00,0x0,0x0,0x0,0x9bc1b00,0x4000000,0x9bc1b00,0x4000000,0x4000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x4000000,0x3c000142,0x4000000,0x8000000,0x30000142,0x4000000,};
+      jj_la1_0 = new int[] {0x2bc1b00,0x0,0x2bc1b00,0x400000,0x840000,0x2000000,0xc000042,0x0,0x1000000,0x1000000,0x1000000,0x8,0x1000000,0x2bc1b00,0x8,0x1000000,0x8,0xf000042,0x1000000,0x0,0x1000000,0x1000000,0x0,0x1000000,0x1000000,0x2000000,0xc000042,0x1000000,0x8,0xf000042,0x0,0x0,0x0,0x2300300,0x1000000,0x2bc1b00,0x0,0x0,0x0,0x2bc1b00,0x1000000,0x2bc1b00,0x1000000,0x1000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x60000000,0x60000000,0x80000000,0x80000000,0x1000000,0xf000142,0x1000000,0x2000000,0xc000142,0x1000000,};
    }
    private static void jj_la1_1() {
-      jj_la1_1 = new int[] {0xc6348000,0x48000,0x86300000,0x0,0x0,0x42100000,0x200000,0x6000000,0x0,0x0,0x0,0x0,0x0,0xc6348000,0x0,0x0,0x0,0x40300000,0x0,0x40100000,0x0,0x0,0x40100000,0x0,0x0,0x100000,0x40200000,0x0,0x0,0x40300000,0x40000000,0x40000000,0x40000000,0x80300000,0x0,0xc6348000,0x10000,0x10000,0x20000,0xc6348000,0x0,0xc6348000,0x0,0x0,0x0,0x20,0x10,0xc00,0xc00,0x3c0,0x3c0,0x1,0x1,0xe,0xe,0x0,0x40300000,0x0,0x40100000,0x200000,0x0,};
+      jj_la1_1 = new int[] {0xe31a6000,0x26000,0xc3180000,0x0,0x0,0xa1080000,0x100000,0x3000000,0x0,0x0,0x0,0x0,0x0,0xe31a6000,0x0,0x0,0x0,0xa0180000,0x0,0xa0080000,0x0,0x0,0xa0080000,0x0,0x0,0x80000,0xa0100000,0x0,0x0,0xa0180000,0x20000000,0x20000000,0xa0000000,0xc0180000,0x0,0xe31a6000,0x8000,0x8000,0x10000,0xe31a6000,0x0,0xe31a6000,0x0,0x0,0x0,0x8,0x4,0x300,0x300,0xf0,0xf0,0x0,0x0,0x3,0x3,0x0,0xa0180000,0x0,0xa0080000,0x100000,0x0,};
    }
    private static void jj_la1_2() {
-      jj_la1_2 = new int[] {0x3,0x0,0x3,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x1,0x3,0x0,0x3,0x0,0x0,0x0,0x3,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x0,};
+      jj_la1_2 = new int[] {0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
    }
   final private JJCalls[] jj_2_rtns = new JJCalls[12];
   private boolean jj_rescan = false;
@@ -3320,8 +3335,8 @@
 
   public ParseException generateParseException() {
     jj_expentries.removeAllElements();
-    boolean[] la1tokens = new boolean[68];
-    for (int i = 0; i < 68; i++) {
+    boolean[] la1tokens = new boolean[67];
+    for (int i = 0; i < 67; i++) {
       la1tokens[i] = false;
     }
     if (jj_kind >= 0) {
@@ -3343,7 +3358,7 @@
         }
       }
     }
-    for (int i = 0; i < 68; i++) {
+    for (int i = 0; i < 67; i++) {
       if (la1tokens[i]) {
         jj_expentry = new int[1];
         jj_expentry[0] = i;
Index: velocity/src/java/org/apache/velocity/runtime/visitor/NodeViewMode.java
===================================================================
--- velocity/src/java/org/apache/velocity/runtime/visitor/NodeViewMode.java	(revision 654045)
+++ velocity/src/java/org/apache/velocity/runtime/visitor/NodeViewMode.java	(working copy)
@@ -57,6 +57,7 @@
 import org.apache.velocity.runtime.parser.node.ASTSubtractNode;
 import org.apache.velocity.runtime.parser.node.ASTText;
 import org.apache.velocity.runtime.parser.node.ASTTrue;
+import org.apache.velocity.runtime.parser.node.ASTWhitespaceStatement;
 import org.apache.velocity.runtime.parser.node.ASTWord;
 import org.apache.velocity.runtime.parser.node.ASTprocess;
 import org.apache.velocity.runtime.parser.node.Node;
@@ -437,4 +438,9 @@
     {
         return showNode(node,data);
     }
+
+   public Object visit(ASTWhitespaceStatement node, Object data)
+   {
+      return showNode(node, data);
+   }
 }
Index: velocity/src/java/org/apache/velocity/runtime/visitor/BaseVisitor.java
===================================================================
--- velocity/src/java/org/apache/velocity/runtime/visitor/BaseVisitor.java	(revision 654045)
+++ velocity/src/java/org/apache/velocity/runtime/visitor/BaseVisitor.java	(working copy)
@@ -61,6 +61,7 @@
 import org.apache.velocity.runtime.parser.node.ASTSubtractNode;
 import org.apache.velocity.runtime.parser.node.ASTText;
 import org.apache.velocity.runtime.parser.node.ASTTrue;
+import org.apache.velocity.runtime.parser.node.ASTWhitespaceStatement;
 import org.apache.velocity.runtime.parser.node.ASTWord;
 import org.apache.velocity.runtime.parser.node.ASTprocess;
 import org.apache.velocity.runtime.parser.node.SimpleNode;
@@ -466,4 +467,9 @@
         data = node.childrenAccept(this, data);
         return data;
     }
+
+    public Object visit(ASTWhitespaceStatement node, Object data)
+    {
+       return data;
+    }
 }
Index: velocity/src/java/org/apache/velocity/runtime/visitor/VMReferenceMungeVisitor.java
===================================================================
--- velocity/src/java/org/apache/velocity/runtime/visitor/VMReferenceMungeVisitor.java	(revision 654045)
+++ velocity/src/java/org/apache/velocity/runtime/visitor/VMReferenceMungeVisitor.java	(working copy)
@@ -22,6 +22,7 @@
 import java.util.Map;
 
 import org.apache.velocity.runtime.parser.node.ASTReference;
+import org.apache.velocity.runtime.parser.node.ASTWhitespaceStatement;
 
 /**
  *  This class is a visitor used by the VM proxy to change the
Index: velocity/src/parser/Parser.jjt
===================================================================
--- velocity/src/parser/Parser.jjt	(revision 654045)
+++ velocity/src/parser/Parser.jjt	(working copy)
@@ -266,6 +266,7 @@
 
             if ( strDirective.substring(1).equals("if")
                 || strDirective.substring(1).equals("end")
+                || strDirective.substring(1).equals("%")
                 || strDirective.substring(1).equals("set")
                 || strDirective.substring(1).equals("else")
                 || strDirective.substring(1).equals("elseif")
@@ -734,7 +735,7 @@
 <IN_SINGLE_LINE_COMMENT>
 TOKEN :
 {
-  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n">
+  <SINGLE_LINE_COMMENT: (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   {
      inComment = false;
      stateStackPop();
@@ -742,17 +743,17 @@
 
 }
 
-<IN_FORMAL_COMMENT>
+<IN_FORMAL_COMMENT, IN_MULTI_LINE_COMMENT>
 TOKEN :
 {
-  <FORMAL_COMMENT: "*#" >
+  <FORMAL_COMMENT: ((~["*"])+("*"~["#"])*)* "*#" >
   {
     inComment = false;
     stateStackPop();
   }
 }
 
-<IN_MULTI_LINE_COMMENT>
+/*<IN_MULTI_LINE_COMMENT>
 TOKEN :
 {
   <MULTI_LINE_COMMENT: "*#" >
@@ -760,14 +761,8 @@
     inComment = false;
     stateStackPop();
   }
-}
+}*/
 
-<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
-SKIP :
-{
-  < ~[] >
-}
-
 /* -----------------------------------------------------------------------
  *
  *  DIRECTIVE Lexical State (some of it, anyway)
@@ -873,6 +868,12 @@
         inDirective = false;
         stateStackPop();
     }
+    
+|   <WHITESPACE_DIRECTIVE: "%" >
+    {
+        inDirective = false;
+        stateStackPop();
+    }
 
 |   <IF_DIRECTIVE: "if" | "{if}">
     {
@@ -1089,6 +1090,7 @@
 {
     IfStatement()
 |   StopStatement()
+|   WhitespaceStatement()
 |   LOOKAHEAD(2) Reference()
 |   Comment()
 |   SetDirective()
@@ -1149,6 +1151,7 @@
             case ELSE_DIRECTIVE :
             case ELSEIF_DIRECTIVE :
             case END :
+            case WHITESPACE_DIRECTIVE :
             case STOP_DIRECTIVE :
                 control = true;
                 break;
@@ -1174,7 +1177,7 @@
 void Comment() : {}
 {
 	<SINGLE_LINE_COMMENT_START> ( <SINGLE_LINE_COMMENT> ) ?
-|   <MULTI_LINE_COMMENT>
+/*|   <MULTI_LINE_COMMENT>*/
 |   <FORMAL_COMMENT>
 }
 
@@ -1611,6 +1614,11 @@
     <STOP_DIRECTIVE>
 }
 
+void WhitespaceStatement() : {}
+{
+    <WHITESPACE_DIRECTIVE>
+}
+
 /* -----------------------------------------------------------------------
  *
  *  Expression Syntax
Index: velocity/pom.xml
===================================================================
--- velocity/pom.xml	(revision 654045)
+++ velocity/pom.xml	(working copy)
@@ -27,13 +27,13 @@
 
   <groupId>org.apache.velocity</groupId>
   <artifactId>velocity</artifactId>
-  <version>1.5</version>
+  <version>1.5-codegen2.1-SNAPSHOT</version>
 
   <name>Apache Velocity</name>
   <url>http://velocity.apache.org/engine/releases/velocity-1.5/</url>
   <description>Apache Velocity is a general purpose template engine.</description>
   <inceptionYear>2000</inceptionYear>
-  <packaging>pom</packaging>
+  <packaging>jar</packaging>
 
   <organization>
     <name>The Apache Software Foundation</name>
@@ -43,6 +43,14 @@
   <build>
     <defaultGoal>install</defaultGoal>
     <sourceDirectory>src/java</sourceDirectory>
+    <resources>
+       <resource>
+          <directory>src/java</directory>
+          <excludes>
+             <exclude>**/*.java</exclude>
+          </excludes>
+       </resource>
+    </resources>
     <testSourceDirectory>src/test</testSourceDirectory>
     <plugins>
       <plugin>
@@ -54,6 +62,23 @@
           <xdocDirectory>${basedir}/xdocs/docs</xdocDirectory>
         </configuration>
       </plugin>
+       <plugin>
+          <groupId>org.codehaus.mojo</groupId>
+          <artifactId>javacc-maven-plugin</artifactId>
+          <!--executions>
+             <execution>
+                <id>javacc</id>
+                <goals>
+                   <goal>jjtree-javacc</goal>
+                </goals>
+             </execution>
+          </executions-->
+          <configuration>
+             <sourceDirectory>src/parser</sourceDirectory>
+             <outputDirectory>src/java</outputDirectory>
+             <buildNodeFiles>false</buildNodeFiles>
+          </configuration>
+       </plugin>
     </plugins>
   </build>
 
@@ -77,7 +102,7 @@
   </repositories>
 
   <distributionManagement>
-    <site>
+    <!--<site>
       <id>velocity.apache.org</id>
       <url>scpexe://people.apache.org/www/velocity.apache.org/engine/releases/velocity-1.5/</url>
     </site>
@@ -90,7 +115,13 @@
       <id>apache.snapshots</id>
       <name>Apache Development Snapshot Repository</name>
       <url>scp://people.apache.org/www/people.apache.org/repo/m2-snapshot-repository</url>
-    </snapshotRepository>
+    </snapshotRepository>-->
+     <repository>
+        <id>ssh-se.uni-kassel.de</id>
+        <url>
+           scpexe://www.se.eecs.uni-kassel.de/home/maven/public_html/repository
+        </url>
+     </repository>
   </distributionManagement>
 
   <developers>
@@ -128,7 +159,7 @@
       <name>Henning P. Schmiedehausen</name>
       <id>henning</id>
       <email>hps@intermeta.de</email>
-      <organization>INTERMETA - Gesellschaft für Mehrwertdienste mbH</organization>
+      <organization>INTERMETA - Gesellschaft fÃ¼r Mehrwertdienste mbH</organization>
       <roles>
         <role>Java Developer</role>
       </roles>
@@ -200,6 +231,18 @@
       <version>0.9.4</version>
       <scope>provided</scope>
     </dependency>
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <version>3.8.1</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>hsqldb</groupId>
+      <artifactId>hsqldb</artifactId>
+      <version>1.7.1</version>
+      <scope>test</scope>
+    </dependency>
   </dependencies>
 
   <reporting>
