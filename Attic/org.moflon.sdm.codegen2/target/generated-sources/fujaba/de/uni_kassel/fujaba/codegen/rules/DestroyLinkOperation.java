/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.rules;
import java.util.Iterator;

import de.upb.tools.sdm.JavaSDM; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDMException;


public class DestroyLinkOperation extends LinkLifecycleOperation
{


   public LinkOperation getReverseOperation ()
   {
      boolean fujaba__Success = false;
      Iterator fujaba__IterLinkToReverse = null;
      Object _TmpObject = null;
      DestroyLinkOperation reverse = null;
      UMLLinkRef link = null;
      Iterator fujaba__IterThisToNeeds = null;
      UMLObjectRef needs = null;
      UMLObjectRef subject = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // search to-one link subject from this to subject
         subject = this.getSubject ();

         // check object subject is really bound
         JavaSDM.ensure ( subject != null );

         // iterate to-many link needs from this to needs
         fujaba__Success = false;
         fujaba__IterThisToNeeds = this.iteratorOfNeeds ();

         while ( !(fujaba__Success) && fujaba__IterThisToNeeds.hasNext () )
         {
            try
            {
               needs = (UMLObjectRef) fujaba__IterThisToNeeds.next ();

               // check object needs is really bound
               JavaSDM.ensure ( needs != null );
               // check isomorphic binding between objects subject and needs
               JavaSDM.ensure ( !subject.equals (needs) );

               // search to-one link link from this to link
               link = this.getLink ();

               // check object link is really bound
               JavaSDM.ensure ( link != null );

               // iterate to-many link link from link to reverse
               fujaba__Success = false;
               fujaba__IterLinkToReverse = link.iteratorOfLinkTo ();

               while ( !(fujaba__Success) && fujaba__IterLinkToReverse.hasNext () )
               {
                  try
                  {
                     _TmpObject =  fujaba__IterLinkToReverse.next ();

                     // ensure correct type and really bound of object reverse
                     JavaSDM.ensure ( _TmpObject instanceof DestroyLinkOperation );
                     reverse = (DestroyLinkOperation) _TmpObject;

                     // check isomorphic binding between objects this and reverse
                     JavaSDM.ensure ( !this.equals (reverse) );

                     // check link subject from reverse to needs
                     JavaSDM.ensure (needs.equals (reverse.getSubject ()));

                     // check link needs from reverse to subject
                     JavaSDM.ensure (reverse.hasInNeeds (subject));


                     fujaba__Success = true;
                  }
                  catch ( JavaSDMException fujaba__InternalException )
                  {
                     fujaba__Success = false;
                  }
               }
               JavaSDM.ensure (fujaba__Success);


               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return null;

      }
      return reverse;
   }

}


