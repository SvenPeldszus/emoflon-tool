/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.rules;
import java.util.Collections;
import java.util.Iterator;
import java.util.Set;

import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_paderborn.fujaba.uml.behavior.UMLLink;
import de.upb.tools.fca.FEmptyIterator;
import de.upb.tools.fca.FHashSet; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDM; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDMException;


public class UMLLinkRef extends Object
{


   /**
    * <pre>
    *           0..1     link     0..n
    * UMLLinkRef ------------------------- LinkOperation
    *           link               linkTo
    * </pre>
    */
   public static final String PROPERTY_LINK_TO = "linkTo";

   @Property( name = PROPERTY_LINK_TO, partner = LinkOperation.PROPERTY_LINK, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashSet<LinkOperation> linkTo;

   @Property( name = PROPERTY_LINK_TO )
   public Set<? extends LinkOperation> getLinkTo()
   {
      return ((this.linkTo == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.linkTo));
   }

   @Property( name = PROPERTY_LINK_TO )
   public boolean addToLinkTo (LinkOperation value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.linkTo == null)
         {
            this.linkTo = new FHashSet<LinkOperation> ();

         }
      
         changed = this.linkTo.add (value);
         if (changed)
         {
            value.setLink (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_LINK_TO )
   public UMLLinkRef withLinkTo (LinkOperation value)
   {
      addToLinkTo (value);
      return this;
   }

   public UMLLinkRef withoutLinkTo (LinkOperation value)
   {
      removeFromLinkTo (value);
      return this;
   }


   public boolean removeFromLinkTo (LinkOperation value)
   {
      boolean changed = false;

      if ((this.linkTo != null) && (value != null))
      {
      
         changed = this.linkTo.remove (value);
         if (changed)
         {
            value.setLink (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_LINK_TO )
   public void removeAllFromLinkTo (){
   
      LinkOperation tmpValue;
      Iterator<? extends LinkOperation> iter = this.iteratorOfLinkTo ();
      while (iter.hasNext ())
      {
         tmpValue = (LinkOperation) iter.next ();
         this.removeFromLinkTo (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_LINK_TO )
   public boolean hasInLinkTo (LinkOperation value)
   {
      return ((this.linkTo != null) &&
              (value != null) &&
              this.linkTo.contains (value));
   }

   @Property( name = PROPERTY_LINK_TO )
   public Iterator<? extends LinkOperation> iteratorOfLinkTo ()
   {
      return ((this.linkTo == null)
              ? FEmptyIterator.<LinkOperation>get ()
              : this.linkTo.iterator ());
   }

   @Property( name = PROPERTY_LINK_TO )
   public int sizeOfLinkTo ()
   {
      return ((this.linkTo == null)
              ? 0
              : this.linkTo.size ());
   }

   /**
    * <pre>
    *           0..1     links     0..1
    * UMLLinkRef ------------------------- ObjectSet
    *           links               list
    * </pre>
    */
   public static final String PROPERTY_LIST = "list";

   @Property( name = PROPERTY_LIST, partner = ObjectSet.PROPERTY_LINKS, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private ObjectSet list;

   @Property( name = PROPERTY_LIST )
   public boolean setList (ObjectSet value)
   {
      boolean changed = false;

      if (this.list != value)
      {
      
         ObjectSet oldValue = this.list;
         UMLLinkRef source = this;
         if (this.list != null)
         {
            this.list = null;
            oldValue.removeFromLinks (this);
         }
         this.list = value;

         if (value != null)
         {
            value.addToLinks (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_LIST )
   public UMLLinkRef withList (ObjectSet value)
   {
      setList (value);
      return this;
   }

   public ObjectSet getList ()
   {
      return this.list;
   }

   /**
    * <pre>
    *           0..1     ref     0..1
    * UMLLinkRef ------------------------> UMLLink
    *           uMLLinkRef               ref
    * </pre>
    */
   public static final String PROPERTY_REF = "ref";

   @Property( name = PROPERTY_REF, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private UMLLink ref;

   @Property( name = PROPERTY_REF )
   public boolean setRef (UMLLink value)
   {
      boolean changed = false;

      if (this.ref != value)
      {
      
         UMLLink oldValue = this.ref;
         this.ref = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_REF )
   public UMLLinkRef withRef (UMLLink value)
   {
      setRef (value);
      return this;
   }

   public UMLLink getRef ()
   {
      return this.ref;
   }

   public String toString ()
   {
      boolean fujaba__Success = false;
      UMLLink theLink = null;
      String linkName = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // search to-one link ref from this to theLink
         theLink = this.getRef ();

         // check object theLink is really bound
         JavaSDM.ensure ( theLink != null );


         // collabStat call
         linkName = theLink.getName ();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return linkName;
   }

   public void removeYou()
   {
      this.removeAllFromLinkTo ();
      this.setList (null);
      this.setRef (null);
   }
}


