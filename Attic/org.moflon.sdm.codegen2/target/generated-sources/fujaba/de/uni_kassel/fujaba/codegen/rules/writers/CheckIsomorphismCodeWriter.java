/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.rules.writers;
import java.util.Iterator;

import org.apache.velocity.context.Context;

import de.uni_kassel.fujaba.codegen.rules.CheckIsomorphismOperation;
import de.uni_kassel.fujaba.codegen.rules.Token;
import de.uni_kassel.fujaba.codegen.rules.UMLObjectRef;
import de.uni_paderborn.fujaba.uml.behavior.UMLObject;
import de.upb.tools.sdm.JavaSDM; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDMException;


public class CheckIsomorphismCodeWriter extends StoryPatternElementCodeWriter
{


   public void fillContext (Token operation , Context context )
   {
      boolean fujaba__Success = false;
      Object _TmpObject = null;
      CheckIsomorphismOperation ciOp = null;
      UMLObject o2 = null;
      Iterator fujaba__IterCiOpToO2Ref = null;
      UMLObjectRef o2Ref = null;
      UMLObject o1 = null;
      Iterator fujaba__IterCiOpToO1Ref = null;
      UMLObjectRef o1Ref = null;
      boolean test = false;

      // fix for 'test': objects of type SET go into 'secondObject'
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         _TmpObject = operation;

         // ensure correct type and really bound of object ciOp
         JavaSDM.ensure ( _TmpObject instanceof CheckIsomorphismOperation );
         ciOp = (CheckIsomorphismOperation) _TmpObject;

         // check object context is really bound
         JavaSDM.ensure ( context != null );
         // iterate to-many link needs from ciOp to o1Ref
         fujaba__Success = false;
         fujaba__IterCiOpToO1Ref = ciOp.iteratorOfNeeds ();

         while ( !(fujaba__Success) && fujaba__IterCiOpToO1Ref.hasNext () )
         {
            try
            {
               o1Ref = (UMLObjectRef) fujaba__IterCiOpToO1Ref.next ();

               // check object o1Ref is really bound
               JavaSDM.ensure ( o1Ref != null );
               // search to-one link ref from o1Ref to o1
               o1 = o1Ref.getRef ();

               // check object o1 is really bound
               JavaSDM.ensure ( o1 != null );

               // iterate to-many link needs from ciOp to o2Ref
               fujaba__Success = false;
               fujaba__IterCiOpToO2Ref = ciOp.iteratorOfNeeds ();

               while ( !(fujaba__Success) && fujaba__IterCiOpToO2Ref.hasNext () )
               {
                  try
                  {
                     o2Ref = (UMLObjectRef) fujaba__IterCiOpToO2Ref.next ();

                     // check object o2Ref is really bound
                     JavaSDM.ensure ( o2Ref != null );
                     // check isomorphic binding between objects o2Ref and o1Ref
                     JavaSDM.ensure ( !o2Ref.equals (o1Ref) );

                     // search to-one link ref from o2Ref to o2
                     o2 = o2Ref.getRef ();

                     // check object o2 is really bound
                     JavaSDM.ensure ( o2 != null );

                     // check isomorphic binding between objects o2 and o1
                     JavaSDM.ensure ( !o2.equals (o1) );



                     fujaba__Success = true;
                  }
                  catch ( JavaSDMException fujaba__InternalException )
                  {
                     fujaba__Success = false;
                  }
               }
               JavaSDM.ensure (fujaba__Success);


               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         // collabStat call
         super.fillContext( operation, context );
         // collabStat call
         test = o1.getType() != o2.getType() ? o1.getType() > o2.getType() : o1.getObjectName().compareTo (o2.getObjectName()) > 0;
         // collabStat call
         context.put ("object", test ? o1 : o2);
         // collabStat call
         context.put ("secondObject", test ? o2 : o1);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

}


