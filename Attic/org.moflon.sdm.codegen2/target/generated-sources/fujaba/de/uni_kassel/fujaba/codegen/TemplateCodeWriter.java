/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen;
import java.io.StringWriter;
import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;

import org.apache.velocity.Template;
import org.apache.velocity.context.Context;

import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.fujaba.codegen.engine.CodeWritingEngine;
import de.uni_kassel.fujaba.codegen.engine.TemplateLoader;
import de.uni_kassel.fujaba.codegen.engine.TokenMutatorTemplateEngine;
import de.uni_kassel.fujaba.codegen.rules.Token;
import de.uni_kassel.fujaba.codegen.velocity.URLResourceLoader;
import de.upb.tools.fca.FEmptyListIterator;
import de.upb.tools.fca.FHashSet;
import de.upb.tools.fca.FLinkedList; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDM; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDMException;


public class TemplateCodeWriter extends CodeWriter
{


   public static final String PROPERTY_CONTEXT = "context";

   @Property( name = PROPERTY_CONTEXT, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String context = "children";

   @Property( name = PROPERTY_CONTEXT )
   public void setContext (String value)
   {
      this.context = value;
   }

   public TemplateCodeWriter withContext (String value)
   {
      setContext (value);
      return this;
   }

   @Property( name = PROPERTY_CONTEXT )
   public String getContext ()
   {
      return this.context;
   }

   /**
    * <pre>
    *           0..1     templateDirs     0..n
    * TemplateCodeWriter ------------------------> URL
    *           templateCodeWriter               dir
    * </pre>
    */
   public static final String PROPERTY_DIR = "dir";

   @Property( name = PROPERTY_DIR, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FLinkedList<URL> dir;

   @Property( name = PROPERTY_DIR )
   public List<? extends URL> getDir()
   {
      return ((this.dir == null)
              ? Collections.EMPTY_LIST
              : Collections.unmodifiableList(this.dir));
   }

   @Property( name = PROPERTY_DIR )
   public boolean addToDir (URL value)
   {
      boolean changed = false;

      if (value != null && !this.hasInDir (value))
      {
         if (this.dir == null)
         {
            this.dir = new FLinkedList<URL> ();

         }
      
         changed = this.dir.add (value);
      
      }
      return changed;
   }

   @Property( name = PROPERTY_DIR )
   public TemplateCodeWriter withDir (URL value)
   {
      addToDir (value);
      return this;
   }

   public TemplateCodeWriter withoutDir (URL value)
   {
      removeFromDir (value);
      return this;
   }


   public boolean removeFromDir (URL value)
   {
      boolean changed = false;

      if ((this.dir != null) && (value != null))
      {
      
         changed = this.dir.remove (value);
      
      }
      return changed;
   }

   @Property( name = PROPERTY_DIR )
   public void removeAllFromDir (){
      if (this.dir != null && this.dir.size () > 0)
      {
      
         this.dir.clear();
      
      }
   }

   @Property( name = PROPERTY_DIR )
   public boolean hasInDir (URL value)
   {
      return ((this.dir != null) &&
              (value != null) &&
              this.dir.contains (value));
   }

   @Property( name = PROPERTY_DIR )
   public ListIterator<? extends URL> iteratorOfDir ()
   {
      return ((this.dir == null)
              ? FEmptyListIterator.<URL>get ()
              : this.dir.listIterator());
   }

   @Property( name = PROPERTY_DIR )
   public int sizeOfDir ()
   {
      return ((this.dir == null)
              ? 0
              : this.dir.size ());
   }
   @Property( name = PROPERTY_DIR )
   public URL getFirstOfDir ()
   {
      if (dir == null)
      {
         return null;
      }
      else
      {
         if (dir.size() == 0) 	 
         { 	 
            return null; 	 
         }
         return (URL) dir.getFirst ();
      }
   }

   @Property( name = PROPERTY_DIR )
   public URL getLastOfDir ()
   {
      if (dir == null)
      {
         return null;
      }
      else
      {
         if (dir.size() == 0) 	 
         { 	 
            return null; 	 
         }
         return (URL) dir.getLast ();
      }
   }
   @Property( name = PROPERTY_DIR )
   public URL getFromDir ( int index )
   {
      if (index >= 0 && index < sizeOfDir ())
      {
         return (URL) this.dir.get (index);
      }
      else
      {
         throw new IllegalArgumentException ("getDirAt(" + index + ")" );
      }
   }

   @Property( name = PROPERTY_DIR )
   public int indexOfDir ( URL value )
   {
      return ((this.dir == null)
              ? -1
              : this.dir.indexOf (value));
   }

   @Property( name = PROPERTY_DIR )
   public int indexOfDir ( URL value, int index )
   {
      return ((this.dir == null)
   	       ? -1
   	       : this.dir.indexOf (value, index));
   }

   @Property( name = PROPERTY_DIR )
   public int lastIndexOfDir ( URL value )
   {
      return ((this.dir == null)
               ? -1
               : this.dir.lastIndexOf (value));
   }

   @Property( name = PROPERTY_DIR )
   public int lastIndexOfDir ( URL value, int index )
   {
      return ((this.dir == null)
               ? -1
               : this.dir.lastIndexOf (value, index));
   }

   @Property( name = PROPERTY_DIR )
   public boolean isBeforeOfDir ( URL leftObject, URL rightObject)
   {
      if (dir == null)
      {
         return false;
      }
      else
      {
         return dir.isBefore (leftObject, rightObject);
      }
   }

   @Property( name = PROPERTY_DIR )
   public boolean isAfterOfDir ( URL leftObject, URL rightObject)
   {
      if (dir == null)
      {
         return false;
      }
      else
      {
         return dir.isAfter (leftObject, rightObject);
      }
   }

   @Property( name = PROPERTY_DIR )
   public URL getNextOfDir ( URL object )
   {
      if (dir == null)
      {
         return null;
      }
      else
      {
         return (URL) dir.getNextOf (object);
      }
   }

   @Property( name = PROPERTY_DIR )
   public URL getNextOfDir ( URL object, int index)
   {
      if (dir == null)
      {
         return null;
      }
      else
      {
         return (URL) dir.getNextOf (object, index);
      }
   }

   @Property( name = PROPERTY_DIR )
   public URL getPreviousOfDir ( URL object)
   {
      if (dir == null)
      {
         return null;
      }
      else
      {
         return (URL) dir.getPreviousOf (object);
      }
   }

   @Property( name = PROPERTY_DIR )
   public URL getPreviousOfDir ( URL object, int index )
   {
      if (dir == null)
      {
         return null;
      }
      else
      {
         return (URL) dir.getPreviousOf (object, index);
      }
   }

   @Property( name = PROPERTY_DIR )
   public boolean addAfterOfDir ( URL refObject, URL value)
   {
      boolean changed = false;
      if (dir != null)
      {
         int index = dir.indexOf (refObject);
         changed = addToDir (index+1, value);
      }
      return changed;
   }

   @Property( name = PROPERTY_DIR )
   public boolean addBeforeOfDir ( URL refObject, URL value)
   {
      boolean changed = false;
      if (dir != null)
      {
         int index = dir.indexOf (refObject);
         changed = addToDir (index, value);
      }
      return changed;
   }

   @Property( name = PROPERTY_DIR )
   public boolean addToDir (int index, URL value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.dir == null)
         {
            this.dir = new FLinkedList<URL> (); // or FTreeSet () or FLinkedList ()
         }
         int oldIndex = this.indexOfDir (value);
         if (oldIndex != index)
         {
            try
            {
            
               if (oldIndex > -1)
               {
                  dir.remove (oldIndex);
               }
               dir.add (index, value);
               changed = true;
            
            }
            catch (IndexOutOfBoundsException ex)
            {
               return false;
            }
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_DIR )
   public boolean setInDir (int index, URL value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.dir == null)
         {
            this.dir = new FLinkedList<URL> (); // or FTreeSet () or FLinkedList ()
         }
         int oldIndex = this.indexOfDir (value);
         if (oldIndex != index)
         {
            try
            {
            
               URL oldValue = (URL)this.dir.set (index, value);
               if (oldIndex > -1)
               {
                  this.dir.remove (oldIndex);
               }
               if (oldValue != value)
               {
                  changed = true;
               }
            
            }
            catch (IndexOutOfBoundsException ex)
            {
               return false;
            }
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_DIR )
   public boolean removeFromDir (int index)
   {
      boolean changed = false;

      if (this.dir != null && (index >= 0 && index < this.dir.size ()))
      {
      
         URL tmpValue = (URL) this.dir.remove (index);
         if (tmpValue != null)
         {
            changed = true;
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_DIR )
   public boolean removeFromDir (int index, URL value)
   {
      boolean changed = false;

      if ((this.dir != null) && (value != null) && 
          (index >= 0 && index < this.dir.size ()))
      {
         URL oldValue = (URL) this.dir.get (index);
         if (oldValue == value)
         {
         
            changed = this.removeFromDir (index);
         
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_DIR )
   public ListIterator<? extends URL> iteratorOfDir ( URL  lowerBound )
   {
      ListIterator<URL> result = FEmptyListIterator.<URL>get ();

      if (dir != null && lowerBound != null)
      {
         int index = dir.indexOf (lowerBound) + 1;
         result = dir.listIterator (index);
      }
      else if (dir != null && lowerBound == null)
      {
         result = dir.listIterator (0);
      }

      return result;
   }

   @Property( name = PROPERTY_DIR )
   public ListIterator<? extends URL> iteratorOfDir (int index)
   {
      return ((this.dir == null)
              ? FEmptyListIterator.<URL>get ()
              : this.dir.listIterator (Math.max(0,Math.min(index,this.dir.size ()))));
   }

   public void fillContext (Token operation , Context context )
   {
      boolean fujaba__Success = false;
      CodeWritingEngine engine = null;
      HashSet contexts = null;
      String s = null;
      Iterator fujaba__IterOperationToChild = null;
      Token child = null;
      TemplateLoader loader = null;
      Object util = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // search to-one link generators from this to engine
         engine = this.getEngine ();

         // check object engine is really bound
         JavaSDM.ensure ( engine != null );


         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( isGenerateCodeForChildren() )
      {
         // story pattern 
         try 
         {
            fujaba__Success = false; 

            // create object contexts
            contexts = new HashSet ( );

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         // story pattern 
         try 
         {
            fujaba__Success = false; 

            // check object operation is really bound
            JavaSDM.ensure ( operation != null );
            // iterate to-many link children from operation to child
            fujaba__Success = false;
            fujaba__IterOperationToChild = operation.iteratorOfChildren ();

            while ( fujaba__IterOperationToChild.hasNext () )
            {
               try
               {
                  child = (Token) fujaba__IterOperationToChild.next ();

                  // check object child is really bound
                  JavaSDM.ensure ( child != null );
                  // check isomorphic binding between objects operation and child
                  JavaSDM.ensure ( !operation.equals (child) );

                  // constraint !contexts.contains (child.getContext())
                  JavaSDM.ensure ( !contexts.contains (child.getContext()) );
                  // story pattern storypatternwiththis
                  try 
                  {
                     fujaba__Success = false; 

                     s = child.getContext();

                     // check object s is really bound
                     JavaSDM.ensure ( s != null );
                     // check object context is really bound
                     JavaSDM.ensure ( context != null );
                     // check object contexts is really bound
                     JavaSDM.ensure ( contexts != null );
                     // create link contains from contexts to s
                     contexts.add (s);

                     // collabStat call
                     context.put (s, engine.generateCodeForChildren (operation, s, this));
                     fujaba__Success = true;
                  }
                  catch ( JavaSDMException fujaba__InternalException )
                  {
                     fujaba__Success = false;
                  }


                  fujaba__Success = true;
               }
               catch ( JavaSDMException fujaba__InternalException )
               {
                  fujaba__Success = false;
               }
            }
            JavaSDM.ensure (fujaba__Success);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         // // restore context link since generateCodeForChildren changes the context
         // story pattern 
         try 
         {
            fujaba__Success = false; 

            // check object context is really bound
            JavaSDM.ensure ( context != null );
            // check object engine is really bound
            JavaSDM.ensure ( engine != null );
            // search to-one link template loader from engine to loader
            loader = engine.getTemplateLoader ();

            // check object loader is really bound
            JavaSDM.ensure ( loader != null );


            // create link context from loader to context
            loader.setContext (context);

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }


      }
      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         util = context.get("utility");

         // check object util is really bound
         JavaSDM.ensure ( util != null );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         // story pattern storypatternwithparams
         try 
         {
            fujaba__Success = false; 

            // check object context is really bound
            JavaSDM.ensure ( context != null );
            // collabStat call
            context.put("utility", Utility.get());
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }


      }
      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // check object context is really bound
         JavaSDM.ensure ( context != null );
         // collabStat call
         context.put ("engine", engine);
         // collabStat call
         context.put ("token", operation);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   public static final String PROPERTY_GENERATE_CODE_FOR_CHILDREN = "generateCodeForChildren";

   @Property( name = PROPERTY_GENERATE_CODE_FOR_CHILDREN, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private boolean generateCodeForChildren = true;

   @Property( name = PROPERTY_GENERATE_CODE_FOR_CHILDREN )
   public void setGenerateCodeForChildren (boolean value)
   {
      this.generateCodeForChildren = value;
   }

   public TemplateCodeWriter withGenerateCodeForChildren (boolean value)
   {
      setGenerateCodeForChildren (value);
      return this;
   }

   @Property( name = PROPERTY_GENERATE_CODE_FOR_CHILDREN )
   public boolean isGenerateCodeForChildren ()
   {
      return this.generateCodeForChildren;
   }

   public String generateCode (Token operation )
   {
      boolean fujaba__Success = false;
      Context context = null;
      TemplateLoader templateEngine = null;
      CodeWritingEngine engine = null;
      StringWriter sw = null;
      Template global = null;
      Template template = null;
      String code = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // constraint isResponsibleFor (operation)
         JavaSDM.ensure ( isResponsibleFor (operation) );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return null;

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // attribute condition templateName != null
         JavaSDM.ensure ( JavaSDM.stringCompare ((String) this.getTemplateName (), null) != 0 );

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // search to-one link generators from this to engine
            engine = this.getEngine ();

            // check object engine is really bound
            JavaSDM.ensure ( engine != null );

            // search to-one link template loader from engine to templateEngine
            templateEngine = engine.getTemplateLoader ();

            // check object templateEngine is really bound
            JavaSDM.ensure ( templateEngine != null );

            // search to-one link context from templateEngine to context
            context = templateEngine.getContext ();

            // check object context is really bound
            JavaSDM.ensure ( context != null );




            // collabStat call
            this.fillContext (operation, context);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         // story pattern 
         try 
         {
            fujaba__Success = false; 

            // create object sw
            sw = new StringWriter ( );

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         // children
         // story pattern 
         try 
         {
            fujaba__Success = false; 

            // check object engine is really bound
            JavaSDM.ensure ( engine != null );
            // search to-one link globalTemplate from engine to global
            global = engine.getGlobalTemplate ();

            // check object global is really bound
            JavaSDM.ensure ( global != null );


            // collabStat call
            global.merge( context, sw );
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }


         // exception
         catch( Exception e )
         {
            // story pattern successor
            try 
            {
               fujaba__Success = false; 

               // check object engine is really bound
               JavaSDM.ensure ( engine != null );
               // collabStat call
               engine.error ("Error merging global.vm template: " + e.toString(), null);
               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }


         }

         // children
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            template = loadTemplate (operation, templateEngine);

            // check object template is really bound
            JavaSDM.ensure ( template != null );
            // collabStat call
            template.merge( context, sw );
            // collabStat call
            code = sw.toString();
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }


         // exception
         catch( Exception e )
         {
            // story pattern successor
            try 
            {
               fujaba__Success = false; 

               // check object engine is really bound
               JavaSDM.ensure ( engine != null );
               // collabStat call
               engine.error ("Error merging " + (template == null? getTemplateName() : template.getName()) + " template: " + e.toString(), null);
               // collabStat call
               e.printStackTrace();
               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }


         }

         return !generateCodeForChildren && "".equals (code) ? null : code;

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // attribute condition generateCodeForChildren == true
         JavaSDM.ensure ( this.isGenerateCodeForChildren () == true );

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return "";

      }
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // search to-one link generators from this to engine
         engine = this.getEngine ();

         // check object engine is really bound
         JavaSDM.ensure ( engine != null );


         // collabStat call
         code = engine.generateCodeForChildren (operation, this);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( code == null )
      {
         return "";

      }
      return code;
   }

   public String getAccessStyle (Token operation )
   {

      return null;
   }

   public boolean isResponsibleFor (Token operation )
   {
      boolean fujaba__Success = false;

      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // constraint (getContext() == null) || JavaSDM.stringEquals (getContext(), operation.getContext())
         JavaSDM.ensure ( (getContext() == null) || JavaSDM.stringEquals (getContext(), operation.getContext()) );
         // constraint (responsible != null) && (responsible.isAssignableFrom(operation.getClass()))
         JavaSDM.ensure ( (responsible != null) && (responsible.isAssignableFrom(operation.getClass())) );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return false;

      }
      return true;
   }

   private Template loadTemplate (Token operation , TemplateLoader templateEngine )
   {
      boolean fujaba__Success = false;
      CodeWritingEngine codeWritingEngine = null;
      Iterator fujaba__IterLoaderToFujaba__TmpObjectOldDirs = null;
      FHashSet oldDirs = null;
      URL fujaba__TmpObjectOldDirs = null;
      URLResourceLoader loader = null;
      Iterator fujaba__IterOldDirs = null;
      String accessStyle = null;
      Iterator fujaba__IterThisToFujaba__TmpObjectDirs = null;
      FHashSet dirs = null;
      URL fujaba__TmpObjectDirs = null;
      Iterator fujaba__IterDirs = null;
      Iterator fujaba__IterCodeWritingEngineToFujaba__TmpObjectDirs = null;
      Iterator fujaba__IterEngineToFujaba__TmpObjectDirs = null;
      TokenMutatorTemplateEngine engine = null;
      Template template = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object templateEngine is really bound
         JavaSDM.ensure ( templateEngine != null );
         // search to-one link template loader from templateEngine to codeWritingEngine
         codeWritingEngine = templateEngine.getCodeWritingEngine ();

         // check object codeWritingEngine is really bound
         JavaSDM.ensure ( codeWritingEngine != null );


         // search to-one link loader from templateEngine to loader
         loader = templateEngine.getLoader ();

         // check object loader is really bound
         JavaSDM.ensure ( loader != null );

         // iterate to-many link contexts from loader to fujaba__TmpObjectOldDirs
         oldDirs = new FHashSet ();
         fujaba__IterLoaderToFujaba__TmpObjectOldDirs = loader.iteratorOfContext ();

         while ( fujaba__IterLoaderToFujaba__TmpObjectOldDirs.hasNext () )
         {
            try
            {
               fujaba__TmpObjectOldDirs = (URL) fujaba__IterLoaderToFujaba__TmpObjectOldDirs.next ();

               // check object fujaba__TmpObjectOldDirs is really bound
               JavaSDM.ensure ( fujaba__TmpObjectOldDirs != null );

               oldDirs.add (fujaba__TmpObjectOldDirs);
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }

         // iterate set
         fujaba__IterOldDirs = oldDirs.iterator ();
         while ( fujaba__IterOldDirs.hasNext () )
         {
            fujaba__TmpObjectOldDirs = (URL) fujaba__IterOldDirs.next ();
            // destroy link contexts from loader to fujaba__TmpObjectOldDirs
            loader.removeFromContext (fujaba__TmpObjectOldDirs);

         } // while
         // collabStat call
         accessStyle = this.getAccessStyle (operation);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object loader is really bound
         JavaSDM.ensure ( loader != null );
         // iterate to-many link templateDirs from this to fujaba__TmpObjectDirs
         dirs = new FHashSet ();
         fujaba__IterThisToFujaba__TmpObjectDirs = this.iteratorOfDir ();

         while ( fujaba__IterThisToFujaba__TmpObjectDirs.hasNext () )
         {
            try
            {
               fujaba__TmpObjectDirs = (URL) fujaba__IterThisToFujaba__TmpObjectDirs.next ();

               // check object fujaba__TmpObjectDirs is really bound
               JavaSDM.ensure ( fujaba__TmpObjectDirs != null );

               dirs.add (fujaba__TmpObjectDirs);
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         // iterate set
         fujaba__IterDirs = dirs.iterator ();
         while ( fujaba__IterDirs.hasNext () )
         {
            fujaba__TmpObjectDirs = (URL) fujaba__IterDirs.next ();
            // create link contexts from loader to fujaba__TmpObjectDirs
            loader.addToContext (fujaba__TmpObjectDirs);


         } // while
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object loader is really bound
         JavaSDM.ensure ( loader != null );
         // search to-one link generators from this to codeWritingEngine
         codeWritingEngine = this.getEngine ();

         // check object codeWritingEngine is really bound
         JavaSDM.ensure ( codeWritingEngine != null );

         // iterate to-many link templateDirs from codeWritingEngine to fujaba__TmpObjectDirs
         dirs = new FHashSet ();
         fujaba__IterCodeWritingEngineToFujaba__TmpObjectDirs = codeWritingEngine.iteratorOfDirs ();

         while ( fujaba__IterCodeWritingEngineToFujaba__TmpObjectDirs.hasNext () )
         {
            try
            {
               fujaba__TmpObjectDirs = (URL) fujaba__IterCodeWritingEngineToFujaba__TmpObjectDirs.next ();

               // check object fujaba__TmpObjectDirs is really bound
               JavaSDM.ensure ( fujaba__TmpObjectDirs != null );

               dirs.add (fujaba__TmpObjectDirs);
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }

         // iterate set
         fujaba__IterDirs = dirs.iterator ();
         while ( fujaba__IterDirs.hasNext () )
         {
            fujaba__TmpObjectDirs = (URL) fujaba__IterDirs.next ();
            // create link contexts from loader to fujaba__TmpObjectDirs
            loader.addToContext (fujaba__TmpObjectDirs);


         } // while
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object codeWritingEngine is really bound
         JavaSDM.ensure ( codeWritingEngine != null );
         // check object loader is really bound
         JavaSDM.ensure ( loader != null );
         // search to-one link codeWriter from codeWritingEngine to engine
         engine = codeWritingEngine.getEngine ();

         // check object engine is really bound
         JavaSDM.ensure ( engine != null );

         // iterate to-many link templateDirs from engine to fujaba__TmpObjectDirs
         dirs = new FHashSet ();
         fujaba__IterEngineToFujaba__TmpObjectDirs = engine.iteratorOfTemplateDirs ();

         while ( fujaba__IterEngineToFujaba__TmpObjectDirs.hasNext () )
         {
            try
            {
               fujaba__TmpObjectDirs = (URL) fujaba__IterEngineToFujaba__TmpObjectDirs.next ();

               // check object fujaba__TmpObjectDirs is really bound
               JavaSDM.ensure ( fujaba__TmpObjectDirs != null );

               dirs.add (fujaba__TmpObjectDirs);
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }

         // iterate set
         fujaba__IterDirs = dirs.iterator ();
         while ( fujaba__IterDirs.hasNext () )
         {
            fujaba__TmpObjectDirs = (URL) fujaba__IterDirs.next ();
            // create link contexts from loader to fujaba__TmpObjectDirs
            loader.addToContext (fujaba__TmpObjectDirs);


         } // while
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      String prefix = codeWritingEngine.getTargetName();
      prefix += "/" + ( accessStyle != null ? accessStyle : "default" ) + ":";
      // children
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         template = templateEngine.loadTemplate (prefix + getTemplateName());

         // check object template is really bound
         JavaSDM.ensure ( template != null );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }


      // exception
      catch( Exception e )
      {
         getEngine().error (e.toString(), null);
         e.printStackTrace ();

      }

      return template;
   }

   /**
    * <pre>
    *           0..1     responsibleFor     0..1
    * TemplateCodeWriter ------------------------> Class
    *           templateCodeWriter               responsible
    * </pre>
    */
   public static final String PROPERTY_RESPONSIBLE = "responsible";

   @Property( name = PROPERTY_RESPONSIBLE, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Class responsible;

   @Property( name = PROPERTY_RESPONSIBLE )
   public boolean setResponsible (Class value)
   {
      boolean changed = false;

      if (this.responsible != value)
      {
      
         Class oldValue = this.responsible;
         this.responsible = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_RESPONSIBLE )
   public TemplateCodeWriter withResponsible (Class value)
   {
      setResponsible (value);
      return this;
   }

   public Class getResponsible ()
   {
      return this.responsible;
   }

   public static final String PROPERTY_TEMPLATE_NAME = "templateName";

   @Property( name = PROPERTY_TEMPLATE_NAME, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String templateName;

   @Property( name = PROPERTY_TEMPLATE_NAME )
   public void setTemplateName (String value)
   {
      this.templateName = value;
   }

   public TemplateCodeWriter withTemplateName (String value)
   {
      setTemplateName (value);
      return this;
   }

   @Property( name = PROPERTY_TEMPLATE_NAME )
   public String getTemplateName ()
   {
      return this.templateName;
   }

   public void removeYou()
   {
      this.removeAllFromDir ();
      this.setResponsible (null);
      super.removeYou ();
   }
}


