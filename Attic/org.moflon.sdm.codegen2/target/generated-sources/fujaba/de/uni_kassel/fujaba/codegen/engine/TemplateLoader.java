/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.engine;

import org.apache.log4j.Category;
import org.apache.velocity.Template;
import org.apache.velocity.app.VelocityEngine;
import org.apache.velocity.context.Context;
import org.apache.velocity.runtime.RuntimeConstants;
import org.apache.velocity.tools.ToolManager;

import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.fujaba.codegen.velocity.CodeGenLogSystem;
import de.uni_kassel.fujaba.codegen.velocity.CodeGenResourceManager;
import de.uni_kassel.fujaba.codegen.velocity.URLResourceLoader;
import de.upb.tools.sdm.JavaSDM;
import de.upb.tools.sdm.JavaSDMException; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public class TemplateLoader
{


   public static final String PROPERTY_CATEGOR_Y_NAME = "CATEGORY_NAME";

   @Property( name = PROPERTY_CATEGOR_Y_NAME, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   public static final String CATEGORY_NAME = TemplateLoader.class.getName();


   public static final String PROPERTY_PROPERT_Y_KEY = "PROPERTY_KEY";

   @Property( name = PROPERTY_PROPERT_Y_KEY, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   public static final String PROPERTY_KEY = "templateLoader";


   public  TemplateLoader ()
   {
      boolean fujaba__Success = false;
      VelocityEngine ve = null;
      ToolManager manager = null;
      Context context = null;
      Category cat = null;

      Thread currentThread = Thread.currentThread();
      ClassLoader contextClassLoader = currentThread.getContextClassLoader();
      currentThread.setContextClassLoader(this.getClass().getClassLoader());
      try
      {
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // create object ve
         ve = new VelocityEngine ( );

         // create object manager
         manager = new ToolManager (false);

         // create link velocityEngine from this to ve
         this.setVelocityEngine (ve);

         // create link velocityEngine from manager to ve
         manager.setVelocityEngine (ve);

         // create link manager from this to manager
         this.setManager (manager);

         // collabStat call
         ve.setProperty( "file.resource.loader.class", "de.uni_kassel.fujaba.codegen.velocity.URLResourceLoader");
         // collabStat call
         ve.setProperty( "file.resource.loader.cache", Boolean.TRUE);
         // collabStat call
         ve.setProperty( "file.resource.loader.modificationCheckInterval", new Long(1));
         // collabStat call
         ve.setProperty( "file.resource.loader." + PROPERTY_KEY, this);
         // collabStat call
         ve.setProperty(RuntimeConstants.RESOURCE_MANAGER_CLASS, CodeGenResourceManager.class.getName());;
         // collabStat call
         ve.setProperty("resource.manager." + PROPERTY_KEY, this);;
         // collabStat call
         manager.configure("tools.xml");
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         context = manager.createContext();

         // check object context is really bound
         JavaSDM.ensure ( context != null );
         // create link context from this to context
         this.setContext (context);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // // initialize logging
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         cat = Category.getInstance( CATEGORY_NAME );

         // check object cat is really bound
         JavaSDM.ensure ( cat != null );
         // check object ve is really bound
         JavaSDM.ensure ( ve != null );
         // collabStat call
         ve.setProperty( VelocityEngine.RUNTIME_LOG_LOGSYSTEM_CLASS, "de.uni_kassel.fujaba.codegen.velocity.CodeGenLogSystem" /*"org.apache.velocity.runtime.log.SimpleLog4JLogSystem"*/ );
         // collabStat call
         ve.setProperty("runtime.log.logsystem.log4j.category", CATEGORY_NAME);
         // collabStat call
         ve.setProperty( VelocityEngine.RUNTIME_LOG_REFERENCE_LOG_INVALID, Boolean.FALSE);
         // collabStat call
         ve.setProperty("velocimacro.library", "");
         // collabStat call
         cat.debug ("Starting CodeGen2...");
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object ve is really bound
         JavaSDM.ensure ( ve != null );
         // collabStat call
         ve.init();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      }
      catch (Exception e)
      {
         e.printStackTrace();
         // getCodeWritingEngine().error (e.getMessage(), null);
      }
      finally
      {
         currentThread.setContextClassLoader(contextClassLoader);
      }
      return ;
   }

   /**
    * <pre>
    *           0..1     template loader     0..1
    * TemplateLoader ------------------------- CodeWritingEngine
    *           templateLoader               codeWritingEngine
    * </pre>
    */
   public static final String PROPERTY_CODE_WRITING_ENGINE = "codeWritingEngine";

   @Property( name = PROPERTY_CODE_WRITING_ENGINE, partner = CodeWritingEngine.PROPERTY_TEMPLATE_LOADER, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private CodeWritingEngine codeWritingEngine;

   @Property( name = PROPERTY_CODE_WRITING_ENGINE )
   public boolean setCodeWritingEngine (CodeWritingEngine value)
   {
      boolean changed = false;

      if (this.codeWritingEngine != value)
      {
      
         CodeWritingEngine oldValue = this.codeWritingEngine;
         TemplateLoader source = this;
         if (this.codeWritingEngine != null)
         {
            this.codeWritingEngine = null;
            oldValue.setTemplateLoader (null);
         }
         this.codeWritingEngine = value;

         if (value != null)
         {
            value.setTemplateLoader (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CODE_WRITING_ENGINE )
   public TemplateLoader withCodeWritingEngine (CodeWritingEngine value)
   {
      setCodeWritingEngine (value);
      return this;
   }

   public CodeWritingEngine getCodeWritingEngine ()
   {
      return this.codeWritingEngine;
   }

   /**
    * <pre>
    *           0..1     context     0..1
    * TemplateLoader ------------------------> Context
    *           templateEngine               context
    * </pre>
    */
   public static final String PROPERTY_CONTEXT = "context";

   @Property( name = PROPERTY_CONTEXT, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Context context;

   @Property( name = PROPERTY_CONTEXT )
   public boolean setContext (Context value)
   {
      boolean changed = false;

      if (this.context != value)
      {
      
         Context oldValue = this.context;
         this.context = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CONTEXT )
   public TemplateLoader withContext (Context value)
   {
      setContext (value);
      return this;
   }

   public Context getContext ()
   {
      return this.context;
   }

   public Template loadTemplate (String name )
   {
      boolean fujaba__Success = false;
      VelocityEngine ve = null;
      Template template = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // search to-one link velocityEngine from this to ve
         ve = this.getVelocityEngine ();

         // check object ve is really bound
         JavaSDM.ensure ( ve != null );


         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      try
      {
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         template = ve.getTemplate (name);

         // check object template is really bound
         JavaSDM.ensure ( template != null );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      }
      catch (Exception e)
      {
         getCodeWritingEngine().error (e.getMessage(), null);
      }
      return template;
   }

   /**
    * <pre>
    *           0..1     loader     0..1
    * TemplateLoader ------------------------- URLResourceLoader
    *           templateEngine               loader
    * </pre>
    */
   public static final String PROPERTY_LOADER = "loader";

   @Property( name = PROPERTY_LOADER, partner = URLResourceLoader.PROPERTY_TEMPLATE_ENGINE, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private URLResourceLoader loader;

   @Property( name = PROPERTY_LOADER )
   public boolean setLoader (URLResourceLoader value)
   {
      boolean changed = false;

      if (this.loader != value)
      {
      
         URLResourceLoader oldValue = this.loader;
         TemplateLoader source = this;
         if (this.loader != null)
         {
            this.loader = null;
            oldValue.setTemplateEngine (null);
         }
         this.loader = value;

         if (value != null)
         {
            value.setTemplateEngine (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_LOADER )
   public TemplateLoader withLoader (URLResourceLoader value)
   {
      setLoader (value);
      return this;
   }

   public URLResourceLoader getLoader ()
   {
      return this.loader;
   }

   /**
    * <pre>
    *           0..1     logSystem     0..1
    * TemplateLoader ------------------------- CodeGenLogSystem
    *           templateLoader               logSystem
    * </pre>
    */
   public static final String PROPERTY_LOG_SYSTEM = "logSystem";

   @Property( name = PROPERTY_LOG_SYSTEM, partner = CodeGenLogSystem.PROPERTY_TEMPLATE_LOADER, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private CodeGenLogSystem logSystem;

   @Property( name = PROPERTY_LOG_SYSTEM )
   public boolean setLogSystem (CodeGenLogSystem value)
   {
      boolean changed = false;

      if (this.logSystem != value)
      {
      
         CodeGenLogSystem oldValue = this.logSystem;
         TemplateLoader source = this;
         if (this.logSystem != null)
         {
            this.logSystem = null;
            oldValue.setTemplateLoader (null);
         }
         this.logSystem = value;

         if (value != null)
         {
            value.setTemplateLoader (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_LOG_SYSTEM )
   public TemplateLoader withLogSystem (CodeGenLogSystem value)
   {
      setLogSystem (value);
      return this;
   }

   public CodeGenLogSystem getLogSystem ()
   {
      return this.logSystem;
   }

   /**
    * <pre>
    *           0..1     manager     0..1
    * TemplateLoader ------------------------> ToolManager
    *           templateLoader               manager
    * </pre>
    */
   public static final String PROPERTY_MANAGER = "manager";

   @Property( name = PROPERTY_MANAGER, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private ToolManager manager;

   @Property( name = PROPERTY_MANAGER )
   public boolean setManager (ToolManager value)
   {
      boolean changed = false;

      if (this.manager != value)
      {
      
         ToolManager oldValue = this.manager;
         this.manager = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_MANAGER )
   public TemplateLoader withManager (ToolManager value)
   {
      setManager (value);
      return this;
   }

   public ToolManager getManager ()
   {
      return this.manager;
   }

   /**
    * <pre>
    *           0..1     velocityEngine     0..1
    * TemplateLoader ------------------------> VelocityEngine
    *           codeGenerationEngine               velocityEngine
    * </pre>
    */
   public static final String PROPERTY_VELOCITY_ENGINE = "velocityEngine";

   @Property( name = PROPERTY_VELOCITY_ENGINE, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private VelocityEngine velocityEngine;

   @Property( name = PROPERTY_VELOCITY_ENGINE )
   public boolean setVelocityEngine (VelocityEngine value)
   {
      boolean changed = false;

      if (this.velocityEngine != value)
      {
      
         VelocityEngine oldValue = this.velocityEngine;
         this.velocityEngine = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_VELOCITY_ENGINE )
   public TemplateLoader withVelocityEngine (VelocityEngine value)
   {
      setVelocityEngine (value);
      return this;
   }

   public VelocityEngine getVelocityEngine ()
   {
      return this.velocityEngine;
   }

   public void removeYou()
   {
      this.setCodeWritingEngine (null);
      this.setContext (null);
      this.setLoader (null);
      this.setLogSystem (null);
      this.setManager (null);
      this.setVelocityEngine (null);
   }
}


