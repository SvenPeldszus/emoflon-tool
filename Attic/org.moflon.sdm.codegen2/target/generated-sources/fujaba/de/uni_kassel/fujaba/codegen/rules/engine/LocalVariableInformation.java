/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.rules.engine;
import java.util.Collections;
import java.util.Iterator;
import java.util.Map;

import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.fujaba.codegen.engine.CodeWritingEngine;
import de.uni_kassel.fujaba.codegen.engine.Information;
import de.uni_paderborn.fujaba.metamodel.common.FElement;
import de.uni_paderborn.fujaba.metamodel.structure.FMethod;
import de.uni_paderborn.fujaba.metamodel.structure.FParam;
import de.uni_paderborn.fujaba.metamodel.structure.FType;
import de.uni_paderborn.fujaba.uml.behavior.UMLActivityDiagram;
import de.upb.tools.fca.FEmptyIterator;
import de.upb.tools.fca.FHashMap; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDM; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDMException;


public class LocalVariableInformation extends Information
{


   public String addLocalVariable (String name , FType type , FElement context )
   {

      return addLocalVariable (name, type, "null", context);
   }

   public String addLocalVariable (String name , FType type , String defaultValue , FElement context )
   {
      boolean fujaba__Success = false;
      LocalVariable var = null;
      CodeWritingEngine engine = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // search to-one link localVars from this to var
         var = this.getFromLocalVars (name);

         // check object var is really bound
         JavaSDM.ensure ( var != null );


         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // check object type is really bound
            JavaSDM.ensure ( type != null );
            // check object var is really bound
            JavaSDM.ensure ( var != null );
            // check link type from var to type
            JavaSDM.ensure (type.equals (var.getType ()));

            // attribute condition defaultValue == defaultValue
            JavaSDM.ensure ( JavaSDM.stringCompare ((String) var.getDefaultValue (), defaultValue) == 0 );

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         if ( fujaba__Success )
         {
            return name;

         }
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // search to-one link additionalInfo from this to engine
            engine = this.getEngine ();

            // check object engine is really bound
            JavaSDM.ensure ( engine != null );


            // collabStat call
            engine.warning ("Local variable \"" + name + "\" declared different", context);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         return name;

      }
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object type is really bound
         JavaSDM.ensure ( type != null );
         // create object var
         var = new LocalVariable ( );

         // assign attribute var
         var.setName (name);
         // assign attribute var
         var.setDefaultValue (defaultValue);
         // create link type from var to type
         var.setType (type);

         // create link localVars from var to this
         var.setLocalVariableInformation (this);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return name;
   }

   public String addLocalVariable (String name , String type , FElement context )
   {

      return addLocalVariable (name, type, "null", context);
   }

   public String addLocalVariable (String name , String type , String defaultValue , FElement context )
   {
      boolean fujaba__Success = false;
      LocalVariable var = null;
      CodeWritingEngine engine = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // search to-one link localVars from this to var
         var = this.getFromLocalVars (name);

         // check object var is really bound
         JavaSDM.ensure ( var != null );


         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // check object var is really bound
            JavaSDM.ensure ( var != null );
            // negative check for link type from var
            JavaSDM.ensure (var.getType () == null);
            // attribute condition defaultValue == defaultValue
            JavaSDM.ensure ( JavaSDM.stringCompare ((String) var.getDefaultValue (), defaultValue) == 0 );

            // attribute condition typeName == type
            JavaSDM.ensure ( JavaSDM.stringCompare ((String) var.getTypeName (), type) == 0 );

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         if ( fujaba__Success )
         {
            return name;

         }
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // search to-one link additionalInfo from this to engine
            engine = this.getEngine ();

            // check object engine is really bound
            JavaSDM.ensure ( engine != null );


            // collabStat call
            engine.warning ("Local variable \"" + name + "\" declared different", context);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         return name;

      }
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // create object var
         var = new LocalVariable ( );

         // assign attribute var
         var.setName (name);
         // assign attribute var
         var.setDefaultValue (defaultValue);
         // assign attribute var
         var.setTypeName (type);
         // create link localVars from var to this
         var.setLocalVariableInformation (this);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return name;
   }

   /**
    * <pre>
    *           0..1     localVars     0..1
    * LocalVariableInformation ------------------------- LocalVariable
    *           localVariableInformation               localVars
    * </pre>
    */
   public static final String PROPERTY_LOCAL_VARS = "localVars";

   @Property( name = PROPERTY_LOCAL_VARS, partner = LocalVariable.PROPERTY_LOCAL_VARIABLE_INFORMATION, kind = ReferenceHandler.ReferenceKind.QUALIFIED_TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashMap<String, LocalVariable> localVars;

   @Property( name = PROPERTY_LOCAL_VARS )
   public Map<String, ? extends LocalVariable> getLocalVars()
   {
      return ((this.localVars == null)
              ? Collections.EMPTY_MAP
              : Collections.unmodifiableMap(this.localVars));
   }

   @Property( name = PROPERTY_LOCAL_VARS )
   public boolean addToLocalVars (LocalVariable value)
   {
      return this.addToLocalVars (getKeyForLocalVars (value), value);
   }

   @Property( name = PROPERTY_LOCAL_VARS )
   public LocalVariableInformation withLocalVars (LocalVariable value)
   {
      addToLocalVars (value);
      return this;
   }

   public LocalVariableInformation withoutLocalVars (LocalVariable value)
   {
      removeFromLocalVars (value);
      return this;
   }


   public boolean removeFromLocalVars (LocalVariable value)
   {
      return removeFromLocalVars (getKeyForLocalVars (value), value);
   }

   @Property( name = PROPERTY_LOCAL_VARS )
   public void removeAllFromLocalVars (){
   
      Map.Entry entry;
      Iterator iter = entriesOfLocalVars ();
      while (iter.hasNext ())
      {
         entry = (Map.Entry) iter.next ();
         removeFromLocalVars ((String) entry.getKey (), (LocalVariable) entry.getValue ());
      }
   }

   @Property( name = PROPERTY_LOCAL_VARS )
   public boolean hasInLocalVars (LocalVariable value)
   {
      return (this.hasInLocalVars (this.getKeyForLocalVars (value), value));
   }

   @Property( name = PROPERTY_LOCAL_VARS )
   public Iterator<? extends LocalVariable> iteratorOfLocalVars ()
   {
      return ((this.localVars == null)
              ? FEmptyIterator.<LocalVariable>get ()
              : this.localVars.values ().iterator ());
   }

   @Property( name = PROPERTY_LOCAL_VARS )
   public int sizeOfLocalVars ()
   {
      return ((this.localVars == null)
              ? 0
              : this.localVars.size ());
   }

   @Property( name = PROPERTY_LOCAL_VARS )
   public boolean hasInLocalVars (String key, LocalVariable value)
   {
      return ((this.localVars != null) &&
              (value != null || this.localVars.containsKey (key)) && 
              (this.localVars.get (key) == value));
   }

   @Property( name = PROPERTY_LOCAL_VARS )
   public boolean hasKeyInLocalVars (String key)
   {
      return ((this.localVars != null) &&
              this.localVars.containsKey (key));
   }

   @Property( name = PROPERTY_LOCAL_VARS )
   public Iterator<String> keysOfLocalVars ()
   {
      return ((this.localVars == null)
              ? FEmptyIterator.<String>get ()
              : this.localVars.keySet ().iterator ());
   }

   @Property( name = PROPERTY_LOCAL_VARS )
   public Iterator entriesOfLocalVars ()
   {
      return ((this.localVars == null)
              ? FEmptyIterator.get ()
              : this.localVars.entrySet ().iterator ());
   }

   @Property( name = PROPERTY_LOCAL_VARS )
   protected boolean addToLocalVars (String key, LocalVariable value)
   {
      boolean changed = false;

      if (this.localVars == null)
      {
         this.localVars = new FHashMap<String, LocalVariable> ();
      }
   
      LocalVariable oldValue = (LocalVariable) this.localVars.put (key, value);
      if (oldValue != value)
      {
         if (oldValue != null)
         {
            oldValue.setLocalVariableInformation (null);
         }
         if (value != null)
         {
            value.setLocalVariableInformation (this);
         }
         changed = true;
      }
   
      return changed;
   }

   @Property( name = PROPERTY_LOCAL_VARS )
   protected boolean addToLocalVars (Map.Entry entry)
   {
      return addToLocalVars ((String) entry.getKey (), (LocalVariable) entry.getValue ());
   }

   @Property( name = PROPERTY_LOCAL_VARS )
   protected boolean removeFromLocalVars (String key, LocalVariable value)
   {
      boolean changed = false;

      if (this.localVars != null)
      {
         LocalVariable oldValue = (LocalVariable) this.localVars.get (key);
         if (oldValue == value && 
             (oldValue != null || this.localVars.containsKey (key)))
         {
         
            this.localVars.remove (key);
            if (value != null)
            {
               value.setLocalVariableInformation (null);
            }
            changed = true;
         
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_LOCAL_VARS )
   public boolean removeKeyFromLocalVars (String key)
   {
      boolean changed = false;

      if (this.localVars != null)
      {
         changed = this.localVars.containsKey (key);
         if (changed)
         {
         
            LocalVariable tmpValue = (LocalVariable) this.localVars.remove (key);
            if (tmpValue != null)
            {
               tmpValue.setLocalVariableInformation (null);
            }
         
         }
      }
      return changed;
   }
   @Property( name = PROPERTY_LOCAL_VARS )
   public LocalVariable getFromLocalVars (String key)
   {
      return ((this.localVars == null)
              ? null
              : (LocalVariable) this.localVars.get (key));
   }
   @Property( name = PROPERTY_LOCAL_VARS )
   public String getKeyForLocalVars (LocalVariable value)
   {
      return (value == null ? null : value.getName ());
   }

   @Property( name = PROPERTY_LOCAL_VARS )
   public void keyChangedInLocalVars (String oldKey, LocalVariable value)
   {
      if ((this.localVars != null) &&  
          (oldKey != getKeyForLocalVars (value)))
      {
         LocalVariable oldValue = (LocalVariable) this.localVars.get (oldKey);
         if (oldValue == value)
         {
            this.localVars.remove (oldKey);
            oldValue = (LocalVariable)this.localVars.put (this.getKeyForLocalVars (value), value);
            if (oldValue != null)
            {
               oldValue.setLocalVariableInformation (null);
            }
         }
      }
   }

   public void removeParamsFromList (UMLActivityDiagram diag )
   {
      boolean fujaba__Success = false;
      LocalVariable var = null;
      FType type = null;
      CodeWritingEngine engine = null;
      Iterator fujaba__IterMethodToParam = null;
      FParam param = null;
      FMethod method = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object diag is really bound
         JavaSDM.ensure ( diag != null );
         // search to-one link storyDiag from diag to method
         method = diag.getStoryMethod ();

         // check object method is really bound
         JavaSDM.ensure ( method != null );

         // iterate to-many link param from method to param
         fujaba__Success = false;
         fujaba__IterMethodToParam = method.iteratorOfParam ();

         while ( fujaba__IterMethodToParam.hasNext () )
         {
            try
            {
               param = (FParam) fujaba__IterMethodToParam.next ();

               // check object param is really bound
               JavaSDM.ensure ( param != null );
               // story pattern storypatternwiththis
               try 
               {
                  fujaba__Success = false; 

                  // search to-one link localVars from this to var
                  var = this.getFromLocalVars (param.getName());

                  // check object var is really bound
                  JavaSDM.ensure ( var != null );


                  fujaba__Success = true;
               }
               catch ( JavaSDMException fujaba__InternalException )
               {
                  fujaba__Success = false;
               }

               if ( fujaba__Success )
               {
                  // story pattern Successor of storypatternwiththis
                  try 
                  {
                     fujaba__Success = false; 

                     // check object var is really bound
                     JavaSDM.ensure ( var != null );
                     // check link localVars from var to this
                     JavaSDM.ensure (this.equals (var.getLocalVariableInformation ()));

                     // destroy link localVars from var to this
                     var.setLocalVariableInformation (null);
                     fujaba__Success = true;
                  }
                  catch ( JavaSDMException fujaba__InternalException )
                  {
                     fujaba__Success = false;
                  }

                  // story pattern storypatternwiththis
                  try 
                  {
                     fujaba__Success = false; 

                     // check object param is really bound
                     JavaSDM.ensure ( param != null );
                     // check object var is really bound
                     JavaSDM.ensure ( var != null );
                     // search to-one link type from var to type
                     type = var.getType ();

                     // check object type is really bound
                     JavaSDM.ensure ( type != null );

                     // check link paramType from param to type
                     JavaSDM.ensure (type.equals (param.getParamType ()));


                     fujaba__Success = true;
                  }
                  catch ( JavaSDMException fujaba__InternalException )
                  {
                     fujaba__Success = false;
                  }

                  if ( !( fujaba__Success ) )
                  {
                     // story pattern storypatternwiththis
                     try 
                     {
                        fujaba__Success = false; 

                        // search to-one link additionalInfo from this to engine
                        engine = this.getEngine ();

                        // check object engine is really bound
                        JavaSDM.ensure ( engine != null );


                        // collabStat call
                        engine.warning ("Local variable \"" + param.getName() + "\" declared different in parameter", diag);
                        fujaba__Success = true;
                     }
                     catch ( JavaSDMException fujaba__InternalException )
                     {
                        fujaba__Success = false;
                     }


                  }

               }

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   public void reset ()
   {
      boolean fujaba__Success = false;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         this.removeAllFromLocalVars();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

   }

   public void removeYou()
   {
      this.removeAllFromLocalVars ();
      super.removeYou ();
   }
}


