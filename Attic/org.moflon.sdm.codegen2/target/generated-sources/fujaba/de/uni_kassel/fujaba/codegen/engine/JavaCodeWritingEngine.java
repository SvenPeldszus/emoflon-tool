/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.engine;

import de.uni_kassel.fujaba.codegen.TemplateCodeWriter;
import de.uni_kassel.fujaba.codegen.classdiag.ASGElementCodeWriter;
import de.uni_kassel.fujaba.codegen.classdiag.ImportInformation;
import de.uni_kassel.fujaba.codegen.classdiag.InformationResetter;
import de.uni_kassel.fujaba.codegen.classdiag.ProjectWriter;
import de.uni_kassel.fujaba.codegen.classdiag.RepCodeWriter;
import de.uni_kassel.fujaba.codegen.dlr.writer.ASGElementInterfaceDLRCodeWriter;
import de.uni_kassel.fujaba.codegen.dlr.writer.FileDLRCodeWriter;
import de.uni_kassel.fujaba.codegen.dlr.writer.ProjectDLRCodeWriter;
import de.uni_kassel.fujaba.codegen.rules.AttributeAssignmentOperation;
import de.uni_kassel.fujaba.codegen.rules.CheckAttrExprPairOperation;
import de.uni_kassel.fujaba.codegen.rules.CheckBoundOperation;
import de.uni_kassel.fujaba.codegen.rules.CheckConstraintOperation;
import de.uni_kassel.fujaba.codegen.rules.CheckIsomorphismOperation;
import de.uni_kassel.fujaba.codegen.rules.CheckLinkOperation;
import de.uni_kassel.fujaba.codegen.rules.CollabStatOperation;
import de.uni_kassel.fujaba.codegen.rules.CreateLinkOperation;
import de.uni_kassel.fujaba.codegen.rules.CreateObjectOperation;
import de.uni_kassel.fujaba.codegen.rules.DestroyLinkOperation;
import de.uni_kassel.fujaba.codegen.rules.DestroyObjectOperation;
import de.uni_kassel.fujaba.codegen.rules.ExecuteStoryPatternOperation;
import de.uni_kassel.fujaba.codegen.rules.NegativeBlock;
import de.uni_kassel.fujaba.codegen.rules.ObjectAssignmentOperation;
import de.uni_kassel.fujaba.codegen.rules.OptionalBlock;
import de.uni_kassel.fujaba.codegen.rules.SearchMultiLinkOperation;
import de.uni_kassel.fujaba.codegen.rules.SearchOperation;
import de.uni_kassel.fujaba.codegen.rules.SetBlock;
import de.uni_kassel.fujaba.codegen.rules.SimpleNegativeCheckOperation;
import de.uni_kassel.fujaba.codegen.rules.engine.LocalVariableInformation;
import de.uni_kassel.fujaba.codegen.rules.writers.ASGElementInterfaceCodeWriter;
import de.uni_kassel.fujaba.codegen.rules.writers.BlockCodeWriter;
import de.uni_kassel.fujaba.codegen.rules.writers.CheckIsomorphismCodeWriter;
import de.uni_kassel.fujaba.codegen.rules.writers.LinkCodeWriter;
import de.uni_kassel.fujaba.codegen.rules.writers.OptionalBlockCodeWriter;
import de.uni_kassel.fujaba.codegen.rules.writers.SetBlockWriter;
import de.uni_kassel.fujaba.codegen.rules.writers.StoryPatternElementCodeWriter;
import de.uni_kassel.fujaba.codegen.sequencer.ExceptionFlow;
import de.uni_kassel.fujaba.codegen.sequencer.Rep;
import de.uni_kassel.fujaba.codegen.sequencer.Sel;
import de.uni_paderborn.fujaba.metamodel.common.FFile;
import de.uni_paderborn.fujaba.metamodel.common.FProject;
import de.uni_paderborn.fujaba.metamodel.structure.FAttr;
import de.uni_paderborn.fujaba.metamodel.structure.FClass;
import de.uni_paderborn.fujaba.metamodel.structure.FMethod;
import de.uni_paderborn.fujaba.metamodel.structure.FPackage;
import de.uni_paderborn.fujaba.metamodel.structure.FRole;
import de.uni_paderborn.fujaba.uml.behavior.UMLActivityDiagram;
import de.uni_paderborn.fujaba.uml.behavior.UMLComplexState;
import de.uni_paderborn.fujaba.uml.behavior.UMLNopActivity;
import de.uni_paderborn.fujaba.uml.behavior.UMLStartActivity;
import de.uni_paderborn.fujaba.uml.behavior.UMLStatechart;
import de.uni_paderborn.fujaba.uml.behavior.UMLStatementActivity;
import de.uni_paderborn.fujaba.uml.behavior.UMLStopActivity;
import de.uni_paderborn.fujaba.uml.behavior.UMLStoryActivity;
import de.uni_paderborn.fujaba.uml.behavior.UMLTransition;
import de.upb.tools.sdm.JavaSDM; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDMException;


public class JavaCodeWritingEngine extends CodeWritingEngine
{


   public  JavaCodeWritingEngine ()
   {

      super ("java");
   }

   public  JavaCodeWritingEngine (String targetName )
   {

      super (targetName);
   }

   protected void createActivityDiagWriters ()
   {
      boolean fujaba__Success = false;
      Class actDiag = null;
      InformationResetter localVarsResetterAD = null;
      Class exc = null;
      Class nop = null;
      Class rep = null;
      Class sel = null;
      Class start = null;
      Class statement = null;
      Class stop = null;
      Class storyAct = null;
      RepCodeWriter repCodeWriter = null;
      TemplateCodeWriter selCodeWriter = null;
      ASGElementCodeWriter stopCodeWriter = null;
      ASGElementCodeWriter actDiagCodeWriter = null;
      ASGElementCodeWriter storyActCodeWriter = null;
      ASGElementCodeWriter startCodeWriter = null;
      ASGElementCodeWriter statementCodeWriter = null;
      ASGElementCodeWriter nopCodeWriter = null;
      TemplateCodeWriter expCodeWriter = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         actDiag = UMLActivityDiagram.class;

         // check object actDiag is really bound
         JavaSDM.ensure ( actDiag != null );
         // create object localVarsResetterAD
         localVarsResetterAD = new InformationResetter ( );

         // assign attribute localVarsResetterAD
         localVarsResetterAD.setInformationType ("localVars");
         // create link responsibleFor from localVarsResetterAD to actDiag
         localVarsResetterAD.setResponsible (actDiag);

         // create link generators from localVarsResetterAD to this
         localVarsResetterAD.setEngine (this);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // // create activity diag code writers
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         exc = ExceptionFlow.class;

         // check object exc is really bound
         JavaSDM.ensure ( exc != null );
         nop = UMLNopActivity.class;

         // check object nop is really bound
         JavaSDM.ensure ( nop != null );
         rep = Rep.class;

         // check object rep is really bound
         JavaSDM.ensure ( rep != null );
         sel = Sel.class;

         // check object sel is really bound
         JavaSDM.ensure ( sel != null );
         start = UMLStartActivity.class;

         // check object start is really bound
         JavaSDM.ensure ( start != null );
         statement = UMLStatementActivity.class;

         // check object statement is really bound
         JavaSDM.ensure ( statement != null );
         stop = UMLStopActivity.class;

         // check object stop is really bound
         JavaSDM.ensure ( stop != null );
         storyAct = UMLStoryActivity.class;

         // check object storyAct is really bound
         JavaSDM.ensure ( storyAct != null );
         // check object actDiag is really bound
         JavaSDM.ensure ( actDiag != null );
         // check isomorphic binding between objects exc and actDiag
         JavaSDM.ensure ( !exc.equals (actDiag) );

         // check isomorphic binding between objects nop and actDiag
         JavaSDM.ensure ( !nop.equals (actDiag) );

         // check isomorphic binding between objects rep and actDiag
         JavaSDM.ensure ( !rep.equals (actDiag) );

         // check isomorphic binding between objects sel and actDiag
         JavaSDM.ensure ( !sel.equals (actDiag) );

         // check isomorphic binding between objects start and actDiag
         JavaSDM.ensure ( !start.equals (actDiag) );

         // check isomorphic binding between objects statement and actDiag
         JavaSDM.ensure ( !statement.equals (actDiag) );

         // check isomorphic binding between objects stop and actDiag
         JavaSDM.ensure ( !stop.equals (actDiag) );

         // check isomorphic binding between objects storyAct and actDiag
         JavaSDM.ensure ( !storyAct.equals (actDiag) );

         // check isomorphic binding between objects nop and exc
         JavaSDM.ensure ( !nop.equals (exc) );

         // check isomorphic binding between objects rep and exc
         JavaSDM.ensure ( !rep.equals (exc) );

         // check isomorphic binding between objects sel and exc
         JavaSDM.ensure ( !sel.equals (exc) );

         // check isomorphic binding between objects start and exc
         JavaSDM.ensure ( !start.equals (exc) );

         // check isomorphic binding between objects statement and exc
         JavaSDM.ensure ( !statement.equals (exc) );

         // check isomorphic binding between objects stop and exc
         JavaSDM.ensure ( !stop.equals (exc) );

         // check isomorphic binding between objects storyAct and exc
         JavaSDM.ensure ( !storyAct.equals (exc) );

         // check isomorphic binding between objects rep and nop
         JavaSDM.ensure ( !rep.equals (nop) );

         // check isomorphic binding between objects sel and nop
         JavaSDM.ensure ( !sel.equals (nop) );

         // check isomorphic binding between objects start and nop
         JavaSDM.ensure ( !start.equals (nop) );

         // check isomorphic binding between objects statement and nop
         JavaSDM.ensure ( !statement.equals (nop) );

         // check isomorphic binding between objects stop and nop
         JavaSDM.ensure ( !stop.equals (nop) );

         // check isomorphic binding between objects storyAct and nop
         JavaSDM.ensure ( !storyAct.equals (nop) );

         // check isomorphic binding between objects sel and rep
         JavaSDM.ensure ( !sel.equals (rep) );

         // check isomorphic binding between objects start and rep
         JavaSDM.ensure ( !start.equals (rep) );

         // check isomorphic binding between objects statement and rep
         JavaSDM.ensure ( !statement.equals (rep) );

         // check isomorphic binding between objects stop and rep
         JavaSDM.ensure ( !stop.equals (rep) );

         // check isomorphic binding between objects storyAct and rep
         JavaSDM.ensure ( !storyAct.equals (rep) );

         // check isomorphic binding between objects start and sel
         JavaSDM.ensure ( !start.equals (sel) );

         // check isomorphic binding between objects statement and sel
         JavaSDM.ensure ( !statement.equals (sel) );

         // check isomorphic binding between objects stop and sel
         JavaSDM.ensure ( !stop.equals (sel) );

         // check isomorphic binding between objects storyAct and sel
         JavaSDM.ensure ( !storyAct.equals (sel) );

         // check isomorphic binding between objects statement and start
         JavaSDM.ensure ( !statement.equals (start) );

         // check isomorphic binding between objects stop and start
         JavaSDM.ensure ( !stop.equals (start) );

         // check isomorphic binding between objects storyAct and start
         JavaSDM.ensure ( !storyAct.equals (start) );

         // check isomorphic binding between objects stop and statement
         JavaSDM.ensure ( !stop.equals (statement) );

         // check isomorphic binding between objects storyAct and statement
         JavaSDM.ensure ( !storyAct.equals (statement) );

         // check isomorphic binding between objects storyAct and stop
         JavaSDM.ensure ( !storyAct.equals (stop) );

         // create object repCodeWriter
         repCodeWriter = new RepCodeWriter ( );

         // create object selCodeWriter
         selCodeWriter = new TemplateCodeWriter ( );

         // create object stopCodeWriter
         stopCodeWriter = new ASGElementCodeWriter ( );

         // create object actDiagCodeWriter
         actDiagCodeWriter = new ASGElementCodeWriter ( );

         // create object storyActCodeWriter
         storyActCodeWriter = new ASGElementCodeWriter ( );

         // create object startCodeWriter
         startCodeWriter = new ASGElementCodeWriter ( );

         // create object statementCodeWriter
         statementCodeWriter = new ASGElementCodeWriter ( );

         // create object nopCodeWriter
         nopCodeWriter = new ASGElementCodeWriter ( );

         // create object expCodeWriter
         expCodeWriter = new TemplateCodeWriter ( );

         // assign attribute selCodeWriter
         selCodeWriter.setTemplateName ("activityDiag/sequencer/sel.vm");
         // assign attribute stopCodeWriter
         stopCodeWriter.setTemplateName ("activityDiag/activity/return.vm");
         // assign attribute repCodeWriter
         repCodeWriter.setTemplateName ("activityDiag/sequencer/rep.vm");
         // assign attribute expCodeWriter
         expCodeWriter.setTemplateName ("activityDiag/sequencer/exception.vm");
         // assign attribute storyActCodeWriter
         storyActCodeWriter.setTemplateName ("activityDiag/activity/storyActivity.vm");
         // assign attribute storyActCodeWriter
         storyActCodeWriter.setContext (null);
         // assign attribute statementCodeWriter
         statementCodeWriter.setTemplateName ("activityDiag/activity/statement.vm");
         // assign attribute statementCodeWriter
         statementCodeWriter.setContext (null);
         // assign attribute actDiagCodeWriter
         actDiagCodeWriter.setTemplateName ("activityDiag/activityDiag.vm");
         // create link generators from repCodeWriter to this
         repCodeWriter.setEngine (this);

         // create link generators from selCodeWriter to this
         selCodeWriter.setEngine (this);

         // create link generators from stopCodeWriter to this
         stopCodeWriter.setEngine (this);

         // create link generators from actDiagCodeWriter to this
         actDiagCodeWriter.setEngine (this);

         // create link generators from storyActCodeWriter to this
         storyActCodeWriter.setEngine (this);

         // create link generators from startCodeWriter to this
         startCodeWriter.setEngine (this);

         // create link generators from statementCodeWriter to this
         statementCodeWriter.setEngine (this);

         // create link generators from nopCodeWriter to this
         nopCodeWriter.setEngine (this);

         // create link generators from expCodeWriter to this
         expCodeWriter.setEngine (this);

         // create link responsibleFor from repCodeWriter to rep
         repCodeWriter.setResponsible (rep);

         // create link responsibleFor from selCodeWriter to sel
         selCodeWriter.setResponsible (sel);

         // create link responsibleFor from stopCodeWriter to stop
         stopCodeWriter.setResponsible (stop);

         // create link responsibleFor from actDiagCodeWriter to actDiag
         actDiagCodeWriter.setResponsible (actDiag);

         // create link responsibleFor from storyActCodeWriter to storyAct
         storyActCodeWriter.setResponsible (storyAct);

         // create link responsibleFor from startCodeWriter to start
         startCodeWriter.setResponsible (start);

         // create link responsibleFor from statementCodeWriter to statement
         statementCodeWriter.setResponsible (statement);

         // create link responsibleFor from nopCodeWriter to nop
         nopCodeWriter.setResponsible (nop);

         // create link responsibleFor from expCodeWriter to exc
         expCodeWriter.setResponsible (exc);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   protected void createClassDiagWriters ()
   {
      boolean fujaba__Success = false;
      Class fileClass = null;
      CodeToFileFromContextWriter fileFileWriter = null;
      Class umlClassClass = null;
      InformationResetter importsResetter = null;
      Class attrClass = null;
      Class packageClass = null;
      Class project = null;
      Class umlMethod = null;
      Class umlRole = null;
      ASGElementCodeWriter classCodeWriter = null;
      ASGElementCodeWriter attrCodeWriter = null;
      ASGElementCodeWriter methodCodeWriter = null;
      ASGElementCodeWriter roleCodeWriter = null;
      ASGElementCodeWriter roleRemoveYouCodeWriter = null;
      ASGElementCodeWriter fileCodeWriter = null;
      ProjectWriter projectCodeWriter = null;
      ASGElementCodeWriter packageWriter = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         fileClass = FFile.class;

         // check object fileClass is really bound
         JavaSDM.ensure ( fileClass != null );
         // create object fileFileWriter
         fileFileWriter = new CodeToFileFromContextWriter ( );

         // assign attribute fileFileWriter
         fileFileWriter.setExtender (".java");
         // assign attribute fileFileWriter
         fileFileWriter.setCreateFiles (false);
         // create link generators from fileFileWriter to this
         fileFileWriter.setEngine (this);

         // create link responsibleFor from fileFileWriter to fileClass
         fileFileWriter.setResponsible (fileClass);

         // collabStat call
         this.addToGenerators(1, fileFileWriter);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         umlClassClass = FClass.class;

         // check object umlClassClass is really bound
         JavaSDM.ensure ( umlClassClass != null );
         // create object importsResetter
         importsResetter = new InformationResetter ( );

         // assign attribute importsResetter
         importsResetter.setInformationType ("imports");
         // create link responsibleFor from importsResetter to umlClassClass
         importsResetter.setResponsible (umlClassClass);

         // create link generators from importsResetter to this
         importsResetter.setEngine (this);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // // create class diag code writers
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         attrClass = FAttr.class;

         // check object attrClass is really bound
         JavaSDM.ensure ( attrClass != null );
         packageClass = FPackage.class;

         // check object packageClass is really bound
         JavaSDM.ensure ( packageClass != null );
         project = FProject.class;

         // check object project is really bound
         JavaSDM.ensure ( project != null );
         umlMethod = FMethod.class;

         // check object umlMethod is really bound
         JavaSDM.ensure ( umlMethod != null );
         umlRole = FRole.class;

         // check object umlRole is really bound
         JavaSDM.ensure ( umlRole != null );
         // check object fileClass is really bound
         JavaSDM.ensure ( fileClass != null );
         // check object umlClassClass is really bound
         JavaSDM.ensure ( umlClassClass != null );
         // check isomorphic binding between objects fileClass and attrClass
         JavaSDM.ensure ( !fileClass.equals (attrClass) );

         // check isomorphic binding between objects packageClass and attrClass
         JavaSDM.ensure ( !packageClass.equals (attrClass) );

         // check isomorphic binding between objects project and attrClass
         JavaSDM.ensure ( !project.equals (attrClass) );

         // check isomorphic binding between objects umlClassClass and attrClass
         JavaSDM.ensure ( !umlClassClass.equals (attrClass) );

         // check isomorphic binding between objects umlMethod and attrClass
         JavaSDM.ensure ( !umlMethod.equals (attrClass) );

         // check isomorphic binding between objects umlRole and attrClass
         JavaSDM.ensure ( !umlRole.equals (attrClass) );

         // check isomorphic binding between objects packageClass and fileClass
         JavaSDM.ensure ( !packageClass.equals (fileClass) );

         // check isomorphic binding between objects project and fileClass
         JavaSDM.ensure ( !project.equals (fileClass) );

         // check isomorphic binding between objects umlClassClass and fileClass
         JavaSDM.ensure ( !umlClassClass.equals (fileClass) );

         // check isomorphic binding between objects umlMethod and fileClass
         JavaSDM.ensure ( !umlMethod.equals (fileClass) );

         // check isomorphic binding between objects umlRole and fileClass
         JavaSDM.ensure ( !umlRole.equals (fileClass) );

         // check isomorphic binding between objects project and packageClass
         JavaSDM.ensure ( !project.equals (packageClass) );

         // check isomorphic binding between objects umlClassClass and packageClass
         JavaSDM.ensure ( !umlClassClass.equals (packageClass) );

         // check isomorphic binding between objects umlMethod and packageClass
         JavaSDM.ensure ( !umlMethod.equals (packageClass) );

         // check isomorphic binding between objects umlRole and packageClass
         JavaSDM.ensure ( !umlRole.equals (packageClass) );

         // check isomorphic binding between objects umlClassClass and project
         JavaSDM.ensure ( !umlClassClass.equals (project) );

         // check isomorphic binding between objects umlMethod and project
         JavaSDM.ensure ( !umlMethod.equals (project) );

         // check isomorphic binding between objects umlRole and project
         JavaSDM.ensure ( !umlRole.equals (project) );

         // check isomorphic binding between objects umlMethod and umlClassClass
         JavaSDM.ensure ( !umlMethod.equals (umlClassClass) );

         // check isomorphic binding between objects umlRole and umlClassClass
         JavaSDM.ensure ( !umlRole.equals (umlClassClass) );

         // check isomorphic binding between objects umlRole and umlMethod
         JavaSDM.ensure ( !umlRole.equals (umlMethod) );

         // create object classCodeWriter
         classCodeWriter = new ASGElementCodeWriter ( );

         // create object attrCodeWriter
         attrCodeWriter = new ASGElementCodeWriter ( );

         // create object methodCodeWriter
         methodCodeWriter = new ASGElementCodeWriter ( );

         // create object roleCodeWriter
         roleCodeWriter = new ASGElementCodeWriter ( );

         // create object roleRemoveYouCodeWriter
         roleRemoveYouCodeWriter = new ASGElementCodeWriter ( );

         // create object fileCodeWriter
         fileCodeWriter = new ASGElementCodeWriter ( );

         // create object projectCodeWriter
         projectCodeWriter = new ProjectWriter ( );

         // create object packageWriter
         packageWriter = new ASGElementCodeWriter ( );

         // assign attribute attrCodeWriter
         attrCodeWriter.setTemplateName ("classDiag/attribute/primitive.vm");
         // assign attribute methodCodeWriter
         methodCodeWriter.setTemplateName ("classDiag/method/declaration.vm");
         // assign attribute roleCodeWriter
         roleCodeWriter.setTemplateName ("classDiag/assoc/declaration.vm");
         // assign attribute fileCodeWriter
         fileCodeWriter.setTemplateName ("classDiag/class/file.vm");
         // assign attribute roleRemoveYouCodeWriter
         roleRemoveYouCodeWriter.setTemplateName ("classDiag/assoc/removeYou.vm");
         // assign attribute roleRemoveYouCodeWriter
         roleRemoveYouCodeWriter.setContext ("removeYou");
         // assign attribute classCodeWriter
         classCodeWriter.setTemplateName ("classDiag/class/declaration.vm");
         // create link generators from classCodeWriter to this
         classCodeWriter.setEngine (this);

         // create link generators from attrCodeWriter to this
         attrCodeWriter.setEngine (this);

         // create link generators from methodCodeWriter to this
         methodCodeWriter.setEngine (this);

         // create link generators from roleCodeWriter to this
         roleCodeWriter.setEngine (this);

         // create link generators from roleRemoveYouCodeWriter to this
         roleRemoveYouCodeWriter.setEngine (this);

         // create link generators from fileCodeWriter to this
         fileCodeWriter.setEngine (this);

         // create link generators from projectCodeWriter to this
         projectCodeWriter.setEngine (this);

         // create link generators from packageWriter to this
         packageWriter.setEngine (this);

         // create link responsibleFor from classCodeWriter to umlClassClass
         classCodeWriter.setResponsible (umlClassClass);

         // create link responsibleFor from attrCodeWriter to attrClass
         attrCodeWriter.setResponsible (attrClass);

         // create link responsibleFor from methodCodeWriter to umlMethod
         methodCodeWriter.setResponsible (umlMethod);

         // create link responsibleFor from roleCodeWriter to umlRole
         roleCodeWriter.setResponsible (umlRole);

         // create link responsibleFor from roleRemoveYouCodeWriter to umlRole
         roleRemoveYouCodeWriter.setResponsible (umlRole);

         // create link responsibleFor from fileCodeWriter to fileClass
         fileCodeWriter.setResponsible (fileClass);

         // create link responsibleFor from projectCodeWriter to project
         projectCodeWriter.setResponsible (project);

         // create link responsibleFor from packageWriter to packageClass
         packageWriter.setResponsible (packageClass);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   protected void createDLRWriters ()
   {
      boolean fujaba__Success = false;
      FileDLRCodeWriter dlrfile = null;
      ProjectDLRCodeWriter dlrproject = null;
      ASGElementInterfaceDLRCodeWriter dlrasg = null;

      // // create dlr helper
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // create object dlrfile
         dlrfile = new FileDLRCodeWriter ( );

         // create object dlrproject
         dlrproject = new ProjectDLRCodeWriter ( );

         // assign attribute dlrfile
         dlrfile.setExtender (".java.smap");
         // assign attribute dlrfile
         dlrfile.setCreateFiles (false);
         // create link generators from dlrfile to this
         dlrfile.setEngine (this);

         // create link generators from dlrproject to this
         dlrproject.setEngine (this);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // // create dlr writer
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // create object dlrasg
         dlrasg = new ASGElementInterfaceDLRCodeWriter ( );

         // create link generators from dlrasg to this
         dlrasg.setEngine (this);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   protected void createStatechartWriters ()
   {
      boolean fujaba__Success = false;
      Class stateClass = null;
      InformationResetter localVarsResetterS = null;
      Class scClass = null;
      Class trClass = null;
      ASGElementCodeWriter scWriter = null;
      ASGElementCodeWriter stateWriter = null;
      ASGElementCodeWriter stateMWriter = null;
      ASGElementCodeWriter trWriter = null;
      ASGElementCodeWriter trMWriter = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         stateClass = UMLComplexState.class;

         // check object stateClass is really bound
         JavaSDM.ensure ( stateClass != null );
         // create object localVarsResetterS
         localVarsResetterS = new InformationResetter ( );

         // assign attribute localVarsResetterS
         localVarsResetterS.setInformationType ("localVars");
         // assign attribute localVarsResetterS
         localVarsResetterS.setContext ("methods");
         // create link generators from localVarsResetterS to this
         localVarsResetterS.setEngine (this);

         // create link responsibleFor from localVarsResetterS to stateClass
         localVarsResetterS.setResponsible (stateClass);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // // create statechart code writers
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         scClass = UMLStatechart.class;

         // check object scClass is really bound
         JavaSDM.ensure ( scClass != null );
         trClass = UMLTransition.class;

         // check object trClass is really bound
         JavaSDM.ensure ( trClass != null );
         // check object stateClass is really bound
         JavaSDM.ensure ( stateClass != null );
         // check isomorphic binding between objects stateClass and scClass
         JavaSDM.ensure ( !stateClass.equals (scClass) );

         // check isomorphic binding between objects trClass and scClass
         JavaSDM.ensure ( !trClass.equals (scClass) );

         // check isomorphic binding between objects trClass and stateClass
         JavaSDM.ensure ( !trClass.equals (stateClass) );

         // create object scWriter
         scWriter = new ASGElementCodeWriter ( );

         // create object stateWriter
         stateWriter = new ASGElementCodeWriter ( );

         // create object stateMWriter
         stateMWriter = new ASGElementCodeWriter ( );

         // create object trWriter
         trWriter = new ASGElementCodeWriter ( );

         // create object trMWriter
         trMWriter = new ASGElementCodeWriter ( );

         // assign attribute scWriter
         scWriter.setTemplateName ("statechart/statechart.vm");
         // assign attribute stateWriter
         stateWriter.setTemplateName ("statechart/state/complexState.vm");
         // assign attribute trWriter
         trWriter.setTemplateName ("statechart/transition/transition.vm");
         // assign attribute trWriter
         trWriter.setContext ("transitions");
         // assign attribute trMWriter
         trMWriter.setTemplateName ("statechart/transition/methods.vm");
         // assign attribute trMWriter
         trMWriter.setContext ("methods");
         // assign attribute stateMWriter
         stateMWriter.setTemplateName ("statechart/state/methods.vm");
         // assign attribute stateMWriter
         stateMWriter.setContext ("methods");
         // create link responsibleFor from scWriter to scClass
         scWriter.setResponsible (scClass);

         // create link responsibleFor from stateWriter to stateClass
         stateWriter.setResponsible (stateClass);

         // create link responsibleFor from stateMWriter to stateClass
         stateMWriter.setResponsible (stateClass);

         // create link responsibleFor from trWriter to trClass
         trWriter.setResponsible (trClass);

         // create link responsibleFor from trMWriter to trClass
         trMWriter.setResponsible (trClass);

         // create link generators from this to scWriter
         this.addToGenerators (scWriter);

         // create link generators from this to stateWriter
         this.addToGenerators (stateWriter);

         // create link generators from this to trWriter
         this.addToGenerators (trWriter);

         // create link generators from trMWriter to this
         trMWriter.setEngine (this);

         // create link generators from stateMWriter to this
         stateMWriter.setEngine (this);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   protected void createStoryPatternWriters ()
   {
      boolean fujaba__Success = false;
      Class ccClass = null;
      Class csClass = null;
      ASGElementInterfaceCodeWriter csWriter = null;
      ASGElementInterfaceCodeWriter ccWriter = null;
      ImportInformation imports = null;
      LocalVariableInformation localVars = null;
      Class msClass = null;
      Class nbClass = null;
      Class obClass = null;
      Class spClass = null;
      OptionalBlockCodeWriter obWriter = null;
      SetBlockWriter msWriter = null;
      StoryPatternElementCodeWriter spWriter = null;
      BlockCodeWriter nbWriter = null;
      Class aolClass = null;
      Class cbClass = null;
      Class ciClass = null;
      Class colClass = null;
      Class dolClass = null;
      CheckIsomorphismCodeWriter ciWriter = null;
      ASGElementInterfaceCodeWriter cbWriter = null;
      ASGElementInterfaceCodeWriter dolWriter = null;
      ASGElementInterfaceCodeWriter aolWriter = null;
      ASGElementInterfaceCodeWriter colWriter = null;
      Class smlClass = null;
      LinkCodeWriter mlWriter = null;
      Class clClass = null;
      Class cllClass = null;
      Class dllClass = null;
      Class slClass = null;
      Class snClass = null;
      LinkCodeWriter clWriter = null;
      LinkCodeWriter cllWriter = null;
      LinkCodeWriter dllWriter = null;
      LinkCodeWriter slWriter = null;
      LinkCodeWriter snWriter = null;
      Class aaClass = null;
      Class caClass = null;
      ASGElementInterfaceCodeWriter aaWriter = null;
      ASGElementInterfaceCodeWriter caWriter = null;

      // // create some story pattern code writers
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         ccClass = CheckConstraintOperation.class;

         // check object ccClass is really bound
         JavaSDM.ensure ( ccClass != null );
         csClass = CollabStatOperation.class;

         // check object csClass is really bound
         JavaSDM.ensure ( csClass != null );
         // check isomorphic binding between objects csClass and ccClass
         JavaSDM.ensure ( !csClass.equals (ccClass) );

         // create object csWriter
         csWriter = new ASGElementInterfaceCodeWriter ( );

         // create object ccWriter
         ccWriter = new ASGElementInterfaceCodeWriter ( );

         // create object imports
         imports = new ImportInformation ( );

         // create object localVars
         localVars = new LocalVariableInformation ( );

         // assign attribute imports
         imports.setType ("imports");
         // assign attribute localVars
         localVars.setType ("localVars");
         // assign attribute ccWriter
         ccWriter.setTemplateName ("storyPattern/statement/constraint.vm");
         // assign attribute csWriter
         csWriter.setTemplateName ("storyPattern/statement/collab.vm");
         // create link responsibleFor from csWriter to csClass
         csWriter.setResponsible (csClass);

         // create link responsibleFor from ccWriter to ccClass
         ccWriter.setResponsible (ccClass);

         // create link generators from ccWriter to this
         ccWriter.setEngine (this);

         // create link generators from csWriter to this
         csWriter.setEngine (this);

         // create link additionalInfo from this to imports
         this.addToInformation (imports);

         // create link additionalInfo from this to localVars
         this.addToInformation (localVars);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // // create story pattern block code writers
      // story pattern Successor of storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         msClass = SetBlock.class;

         // check object msClass is really bound
         JavaSDM.ensure ( msClass != null );
         nbClass = NegativeBlock.class;

         // check object nbClass is really bound
         JavaSDM.ensure ( nbClass != null );
         obClass = OptionalBlock.class;

         // check object obClass is really bound
         JavaSDM.ensure ( obClass != null );
         spClass = ExecuteStoryPatternOperation.class;

         // check object spClass is really bound
         JavaSDM.ensure ( spClass != null );
         // check isomorphic binding between objects nbClass and msClass
         JavaSDM.ensure ( !nbClass.equals (msClass) );

         // check isomorphic binding between objects obClass and msClass
         JavaSDM.ensure ( !obClass.equals (msClass) );

         // check isomorphic binding between objects spClass and msClass
         JavaSDM.ensure ( !spClass.equals (msClass) );

         // check isomorphic binding between objects obClass and nbClass
         JavaSDM.ensure ( !obClass.equals (nbClass) );

         // check isomorphic binding between objects spClass and nbClass
         JavaSDM.ensure ( !spClass.equals (nbClass) );

         // check isomorphic binding between objects spClass and obClass
         JavaSDM.ensure ( !spClass.equals (obClass) );

         // create object obWriter
         obWriter = new OptionalBlockCodeWriter ( );

         // create object msWriter
         msWriter = new SetBlockWriter ( );

         // create object spWriter
         spWriter = new StoryPatternElementCodeWriter ( );

         // create object nbWriter
         nbWriter = new BlockCodeWriter ( );

         // assign attribute obWriter
         obWriter.setTemplateName ("storyPattern/block/optional.vm");
         // assign attribute msWriter
         msWriter.setTemplateName ("storyPattern/block/set.vm");
         // assign attribute spWriter
         spWriter.setTemplateName ("storyPattern/block/storyPattern.vm");
         // assign attribute nbWriter
         nbWriter.setTemplateName ("storyPattern/block/negative.vm");
         // create link generators from this to obWriter
         this.addToGenerators (obWriter);

         // create link generators from this to msWriter
         this.addToGenerators (msWriter);

         // create link generators from spWriter to this
         spWriter.setEngine (this);

         // create link generators from nbWriter to this
         nbWriter.setEngine (this);

         // create link responsibleFor from obWriter to obClass
         obWriter.setResponsible (obClass);

         // create link responsibleFor from spWriter to spClass
         spWriter.setResponsible (spClass);

         // create link responsibleFor from nbWriter to nbClass
         nbWriter.setResponsible (nbClass);

         // create link responsibleFor from msWriter to msClass
         msWriter.setResponsible (msClass);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // // create story pattern object code writers
      // story pattern Successor of Successor of storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         aolClass = ObjectAssignmentOperation.class;

         // check object aolClass is really bound
         JavaSDM.ensure ( aolClass != null );
         cbClass = CheckBoundOperation.class;

         // check object cbClass is really bound
         JavaSDM.ensure ( cbClass != null );
         ciClass = CheckIsomorphismOperation.class;

         // check object ciClass is really bound
         JavaSDM.ensure ( ciClass != null );
         colClass = CreateObjectOperation.class;

         // check object colClass is really bound
         JavaSDM.ensure ( colClass != null );
         dolClass = DestroyObjectOperation.class;

         // check object dolClass is really bound
         JavaSDM.ensure ( dolClass != null );
         // check isomorphic binding between objects cbClass and aolClass
         JavaSDM.ensure ( !cbClass.equals (aolClass) );

         // check isomorphic binding between objects ciClass and aolClass
         JavaSDM.ensure ( !ciClass.equals (aolClass) );

         // check isomorphic binding between objects colClass and aolClass
         JavaSDM.ensure ( !colClass.equals (aolClass) );

         // check isomorphic binding between objects dolClass and aolClass
         JavaSDM.ensure ( !dolClass.equals (aolClass) );

         // check isomorphic binding between objects ciClass and cbClass
         JavaSDM.ensure ( !ciClass.equals (cbClass) );

         // check isomorphic binding between objects colClass and cbClass
         JavaSDM.ensure ( !colClass.equals (cbClass) );

         // check isomorphic binding between objects dolClass and cbClass
         JavaSDM.ensure ( !dolClass.equals (cbClass) );

         // check isomorphic binding between objects colClass and ciClass
         JavaSDM.ensure ( !colClass.equals (ciClass) );

         // check isomorphic binding between objects dolClass and ciClass
         JavaSDM.ensure ( !dolClass.equals (ciClass) );

         // check isomorphic binding between objects dolClass and colClass
         JavaSDM.ensure ( !dolClass.equals (colClass) );

         // create object ciWriter
         ciWriter = new CheckIsomorphismCodeWriter ( );

         // create object cbWriter
         cbWriter = new ASGElementInterfaceCodeWriter ( );

         // create object dolWriter
         dolWriter = new ASGElementInterfaceCodeWriter ( );

         // create object aolWriter
         aolWriter = new ASGElementInterfaceCodeWriter ( );

         // create object colWriter
         colWriter = new ASGElementInterfaceCodeWriter ( );

         // assign attribute ciWriter
         ciWriter.setTemplateName ("storyPattern/object/isomorphism.vm");
         // assign attribute cbWriter
         cbWriter.setTemplateName ("storyPattern/object/bound.vm");
         // assign attribute dolWriter
         dolWriter.setTemplateName ("storyPattern/object/delete.vm");
         // assign attribute colWriter
         colWriter.setTemplateName ("storyPattern/object/create.vm");
         // assign attribute aolWriter
         aolWriter.setTemplateName ("storyPattern/object/assign.vm");
         // create link generators from this to ciWriter
         this.addToGenerators (ciWriter);

         // create link generators from cbWriter to this
         cbWriter.setEngine (this);

         // create link generators from dolWriter to this
         dolWriter.setEngine (this);

         // create link generators from aolWriter to this
         aolWriter.setEngine (this);

         // create link generators from colWriter to this
         colWriter.setEngine (this);

         // create link responsibleFor from cbWriter to cbClass
         cbWriter.setResponsible (cbClass);

         // create link responsibleFor from dolWriter to dolClass
         dolWriter.setResponsible (dolClass);

         // create link responsibleFor from colWriter to colClass
         colWriter.setResponsible (colClass);

         // create link responsibleFor from aolWriter to aolClass
         aolWriter.setResponsible (aolClass);

         // create link responsibleFor from ciWriter to ciClass
         ciWriter.setResponsible (ciClass);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // // create story pattern multi link writer
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         smlClass = SearchMultiLinkOperation.class;

         // check object smlClass is really bound
         JavaSDM.ensure ( smlClass != null );
         // create object mlWriter
         mlWriter = new LinkCodeWriter ( );

         // assign attribute mlWriter
         mlWriter.setTemplateName ("storyPattern/link/searchMulti.vm");
         // create link responsibleFor from mlWriter to smlClass
         mlWriter.setResponsible (smlClass);

         // create link generators from mlWriter to this
         mlWriter.setEngine (this);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // // create story pattern link code writers
      // story pattern Successor of Successor of Successor of storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         clClass = CheckLinkOperation.class;

         // check object clClass is really bound
         JavaSDM.ensure ( clClass != null );
         cllClass = CreateLinkOperation.class;

         // check object cllClass is really bound
         JavaSDM.ensure ( cllClass != null );
         dllClass = DestroyLinkOperation.class;

         // check object dllClass is really bound
         JavaSDM.ensure ( dllClass != null );
         slClass = SearchOperation.class;

         // check object slClass is really bound
         JavaSDM.ensure ( slClass != null );
         snClass = SimpleNegativeCheckOperation.class;

         // check object snClass is really bound
         JavaSDM.ensure ( snClass != null );
         // check isomorphic binding between objects cllClass and clClass
         JavaSDM.ensure ( !cllClass.equals (clClass) );

         // check isomorphic binding between objects dllClass and clClass
         JavaSDM.ensure ( !dllClass.equals (clClass) );

         // check isomorphic binding between objects slClass and clClass
         JavaSDM.ensure ( !slClass.equals (clClass) );

         // check isomorphic binding between objects snClass and clClass
         JavaSDM.ensure ( !snClass.equals (clClass) );

         // check isomorphic binding between objects dllClass and cllClass
         JavaSDM.ensure ( !dllClass.equals (cllClass) );

         // check isomorphic binding between objects slClass and cllClass
         JavaSDM.ensure ( !slClass.equals (cllClass) );

         // check isomorphic binding between objects snClass and cllClass
         JavaSDM.ensure ( !snClass.equals (cllClass) );

         // check isomorphic binding between objects slClass and dllClass
         JavaSDM.ensure ( !slClass.equals (dllClass) );

         // check isomorphic binding between objects snClass and dllClass
         JavaSDM.ensure ( !snClass.equals (dllClass) );

         // check isomorphic binding between objects snClass and slClass
         JavaSDM.ensure ( !snClass.equals (slClass) );

         // create object clWriter
         clWriter = new LinkCodeWriter ( );

         // create object cllWriter
         cllWriter = new LinkCodeWriter ( );

         // create object dllWriter
         dllWriter = new LinkCodeWriter ( );

         // create object slWriter
         slWriter = new LinkCodeWriter ( );

         // create object snWriter
         snWriter = new LinkCodeWriter ( );

         // assign attribute slWriter
         slWriter.setTemplateName ("storyPattern/link/search.vm");
         // assign attribute clWriter
         clWriter.setTemplateName ("storyPattern/link/check.vm");
         // assign attribute dllWriter
         dllWriter.setTemplateName ("storyPattern/link/delete.vm");
         // assign attribute cllWriter
         cllWriter.setTemplateName ("storyPattern/link/create.vm");
         // assign attribute snWriter
         snWriter.setTemplateName ("storyPattern/link/simpleNegative.vm");
         // create link responsibleFor from snWriter to snClass
         snWriter.setResponsible (snClass);

         // create link generators from clWriter to this
         clWriter.setEngine (this);

         // create link generators from cllWriter to this
         cllWriter.setEngine (this);

         // create link generators from dllWriter to this
         dllWriter.setEngine (this);

         // create link generators from slWriter to this
         slWriter.setEngine (this);

         // create link generators from snWriter to this
         snWriter.setEngine (this);

         // create link responsibleFor from dllWriter to dllClass
         dllWriter.setResponsible (dllClass);

         // create link responsibleFor from cllWriter to cllClass
         cllWriter.setResponsible (cllClass);

         // create link responsibleFor from slWriter to slClass
         slWriter.setResponsible (slClass);

         // create link responsibleFor from clWriter to clClass
         clWriter.setResponsible (clClass);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // // create story pattern attr code writers
      // story pattern Successor of Successor of Successor of Successor of storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         aaClass = AttributeAssignmentOperation.class;

         // check object aaClass is really bound
         JavaSDM.ensure ( aaClass != null );
         caClass = CheckAttrExprPairOperation.class;

         // check object caClass is really bound
         JavaSDM.ensure ( caClass != null );
         // check isomorphic binding between objects caClass and aaClass
         JavaSDM.ensure ( !caClass.equals (aaClass) );

         // create object aaWriter
         aaWriter = new ASGElementInterfaceCodeWriter ( );

         // create object caWriter
         caWriter = new ASGElementInterfaceCodeWriter ( );

         // assign attribute aaWriter
         aaWriter.setTemplateName ("storyPattern/attribute/assign.vm");
         // assign attribute caWriter
         caWriter.setTemplateName ("storyPattern/attribute/check.vm");
         // create link responsibleFor from aaWriter to aaClass
         aaWriter.setResponsible (aaClass);

         // create link generators from aaWriter to this
         aaWriter.setEngine (this);

         // create link generators from caWriter to this
         caWriter.setEngine (this);

         // create link responsibleFor from caWriter to caClass
         caWriter.setResponsible (caClass);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   protected void initWriters ()
   {
      boolean fujaba__Success = false;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         this.createDLRWriters();
         // collabStat call
         this.createStatechartWriters();
         // collabStat call
         this.createStoryPatternWriters();
         // collabStat call
         this.createClassDiagWriters();
         // collabStat call
         this.createActivityDiagWriters();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

}


