/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.dlr;
import java.util.Collections;
import java.util.Iterator;
import java.util.Set;

import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.fujaba.codegen.rules.Token;
import de.upb.tools.fca.FEmptyIterator;
import de.upb.tools.fca.FHashSet; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public class DLRToken extends Token
{


   /*package*/  DLRToken ()
   {
   }

   public static final String PROPERTY_EN_D_TAG = "END_TAG";

   @Property( name = PROPERTY_EN_D_TAG, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   public static final String END_TAG = "end";


   public static final String PROPERTY_STAR_T_TAG = "START_TAG";

   @Property( name = PROPERTY_STAR_T_TAG, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   public static final String START_TAG = "start";


   public static final String PROPERTY_COMMENT = "comment";

   @Property( name = PROPERTY_COMMENT, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String comment;

   @Property( name = PROPERTY_COMMENT )
   public void setComment (String value)
   {
      this.comment = value;
   }

   public DLRToken withComment (String value)
   {
      setComment (value);
      return this;
   }

   @Property( name = PROPERTY_COMMENT )
   public String getComment ()
   {
      return this.comment;
   }

   public String createEndTag ()
   {

      if ( DLRTool.get().isIncludeDLR() )
      {
         return "/*" + END_TAG + " id=" + getId() + "*/";

      }
      return "";
   }

   public String createStartTag ()
   {

      if ( DLRTool.get().isIncludeDLR() )
      {
         return "/*" + START_TAG + " id=" + getId() + "*/";

      }
      return "";
   }

   /**
    * <pre>
    *           0..1     elements     0..n
    * DLRToken ------------------------- ElementReference
    *           token               elements
    * </pre>
    */
   public static final String PROPERTY_ELEMENTS = "elements";

   @Property( name = PROPERTY_ELEMENTS, partner = ElementReference.PROPERTY_TOKEN, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.COMPOSITION)
   private FHashSet<ElementReference> elements;

   @Property( name = PROPERTY_ELEMENTS )
   public Set<? extends ElementReference> getElements()
   {
      return ((this.elements == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.elements));
   }

   @Property( name = PROPERTY_ELEMENTS )
   public boolean addToElements (ElementReference value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.elements == null)
         {
            this.elements = new FHashSet<ElementReference> ();

         }
      
         changed = this.elements.add (value);
         if (changed)
         {
            value.setToken (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ELEMENTS )
   public DLRToken withElements (ElementReference value)
   {
      addToElements (value);
      return this;
   }

   public DLRToken withoutElements (ElementReference value)
   {
      removeFromElements (value);
      return this;
   }


   public boolean removeFromElements (ElementReference value)
   {
      boolean changed = false;

      if ((this.elements != null) && (value != null))
      {
      
         changed = this.elements.remove (value);
         if (changed)
         {
            value.setToken (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ELEMENTS )
   public void removeAllFromElements (){
   
      ElementReference tmpValue;
      Iterator<? extends ElementReference> iter = this.iteratorOfElements ();
      while (iter.hasNext ())
      {
         tmpValue = (ElementReference) iter.next ();
         this.removeFromElements (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_ELEMENTS )
   public boolean hasInElements (ElementReference value)
   {
      return ((this.elements != null) &&
              (value != null) &&
              this.elements.contains (value));
   }

   @Property( name = PROPERTY_ELEMENTS )
   public Iterator<? extends ElementReference> iteratorOfElements ()
   {
      return ((this.elements == null)
              ? FEmptyIterator.<ElementReference>get ()
              : this.elements.iterator ());
   }

   @Property( name = PROPERTY_ELEMENTS )
   public int sizeOfElements ()
   {
      return ((this.elements == null)
              ? 0
              : this.elements.size ());
   }

   public static final String PROPERTY_END_LINE = "endLine";

   @Property( name = PROPERTY_END_LINE, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private int endLine;

   @Property( name = PROPERTY_END_LINE )
   public void setEndLine (int value)
   {
      this.endLine = value;
   }

   public DLRToken withEndLine (int value)
   {
      setEndLine (value);
      return this;
   }

   @Property( name = PROPERTY_END_LINE )
   public int getEndLine ()
   {
      return this.endLine;
   }

   public static final String PROPERTY_ID = "id";

   @Property( name = PROPERTY_ID, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private long id;

   @Property( name = PROPERTY_ID )
   public void setId (long value)
   {
      this.id = value;
   }

   public DLRToken withId (long value)
   {
      setId (value);
      return this;
   }

   @Property( name = PROPERTY_ID )
   public long getId ()
   {
      return this.id;
   }

   public static final String PROPERTY_LENGTH = "length";

   @Property( name = PROPERTY_LENGTH, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private int length;

   @Property( name = PROPERTY_LENGTH )
   public void setLength (int value)
   {
      this.length = value;
   }

   public DLRToken withLength (int value)
   {
      setLength (value);
      return this;
   }

   @Property( name = PROPERTY_LENGTH )
   public int getLength ()
   {
      return this.length;
   }

   public static final String PROPERTY_OFFSET = "offset";

   @Property( name = PROPERTY_OFFSET, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private int offset;

   @Property( name = PROPERTY_OFFSET )
   public void setOffset (int value)
   {
      this.offset = value;
   }

   public DLRToken withOffset (int value)
   {
      setOffset (value);
      return this;
   }

   @Property( name = PROPERTY_OFFSET )
   public int getOffset ()
   {
      return this.offset;
   }

   public static final String PROPERTY_START_LINE = "startLine";

   @Property( name = PROPERTY_START_LINE, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private int startLine;

   @Property( name = PROPERTY_START_LINE )
   public void setStartLine (int value)
   {
      this.startLine = value;
   }

   public DLRToken withStartLine (int value)
   {
      setStartLine (value);
      return this;
   }

   @Property( name = PROPERTY_START_LINE )
   public int getStartLine ()
   {
      return this.startLine;
   }

   public void removeYou()
   {
      for (Iterator iterElements = this.iteratorOfElements (); iterElements.hasNext ();)
      {
         ((ElementReference)iterElements.next ()).removeYou ();
      }
      super.removeYou ();
   }
}


