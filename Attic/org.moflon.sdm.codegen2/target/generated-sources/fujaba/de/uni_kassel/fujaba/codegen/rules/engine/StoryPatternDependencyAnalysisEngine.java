/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.rules.engine;
import java.util.HashSet;
import java.util.Iterator;
import java.util.StringTokenizer;

import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.fujaba.codegen.engine.TokenCreationEngine;
import de.uni_kassel.fujaba.codegen.rules.AttributeAssignmentOperation;
import de.uni_kassel.fujaba.codegen.rules.CheckAttrExprPairOperation;
import de.uni_kassel.fujaba.codegen.rules.CheckConstraintOperation;
import de.uni_kassel.fujaba.codegen.rules.CheckIsomorphismOperation;
import de.uni_kassel.fujaba.codegen.rules.CheckLinkOperation;
import de.uni_kassel.fujaba.codegen.rules.CreateLinkOperation;
import de.uni_kassel.fujaba.codegen.rules.DestroyLinkOperation;
import de.uni_kassel.fujaba.codegen.rules.ExecuteStoryPatternOperation;
import de.uni_kassel.fujaba.codegen.rules.LinkLifecycleOperation;
import de.uni_kassel.fujaba.codegen.rules.ObjectSet;
import de.uni_kassel.fujaba.codegen.rules.SearchMultiLinkOperation;
import de.uni_kassel.fujaba.codegen.rules.SearchOperation;
import de.uni_kassel.fujaba.codegen.rules.Token;
import de.uni_kassel.fujaba.codegen.rules.UMLLinkRef;
import de.uni_kassel.fujaba.codegen.rules.UMLObjectRef;
import de.uni_paderborn.fujaba.metamodel.common.FConstraint;
import de.uni_paderborn.fujaba.metamodel.common.FElement;
import de.uni_paderborn.fujaba.metamodel.structure.FClass;
import de.uni_paderborn.fujaba.metamodel.structure.FRole;
import de.uni_paderborn.fujaba.uml.behavior.UMLAttrExprPair;
import de.uni_paderborn.fujaba.uml.behavior.UMLLink;
import de.uni_paderborn.fujaba.uml.behavior.UMLMultiLink;
import de.uni_paderborn.fujaba.uml.behavior.UMLObject;
import de.uni_paderborn.fujaba.uml.behavior.UMLPath;
import de.uni_paderborn.fujaba.uml.behavior.UMLStoryPattern;
import de.upb.tools.sdm.JavaSDM; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDMException;


public class StoryPatternDependencyAnalysisEngine extends TokenCreationEngine
{


   public CheckLinkOperation createCheckOperation (UMLObjectRef objectRef , UMLLinkRef linkRef , UMLObject secondObject )
   {
      boolean fujaba__Success = false;
      ObjectSet set = null;
      UMLLink link = null;
      UMLObject object = null;
      UMLObjectRef secondObjectRef = null;
      CheckLinkOperation check = null;

      // // don't search over 'create' and optional links, search for unbound objects only, don't search through optional, negative or created objects
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object linkRef is really bound
         JavaSDM.ensure ( linkRef != null );
         // check object objectRef is really bound
         JavaSDM.ensure ( objectRef != null );
         // search to-one link objects from this to set
         set = this.getObjects ();

         // check object set is really bound
         JavaSDM.ensure ( set != null );


         // search to-one link ref from linkRef to link
         link = linkRef.getRef ();

         // check object link is really bound
         JavaSDM.ensure ( link != null );


         // search to-one link ref from objectRef to object
         object = objectRef.getRef ();

         // check object object is really bound
         JavaSDM.ensure ( object != null );


         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return null;

      }
      // story pattern create
      try 
      {
         fujaba__Success = false; 

         secondObjectRef = set.getOrCreateObjectRef(secondObject);

         // check object secondObjectRef is really bound
         JavaSDM.ensure ( secondObjectRef != null );
         // check object linkRef is really bound
         JavaSDM.ensure ( linkRef != null );
         // check object objectRef is really bound
         JavaSDM.ensure ( objectRef != null );
         // create object check
         check = new CheckLinkOperation ( );

         // create link subject from check to objectRef
         check.setSubject (objectRef);

         // create link needs from check to objectRef
         check.addToNeeds (objectRef);

         // create link link from check to linkRef
         check.setLink (linkRef);

         // create link needs from check to secondObjectRef
         check.addToNeeds (secondObjectRef);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return check;

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         this.internalError( "Create operation failed!", null );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return null;
   }

   public void createIsomorphismCheck (UMLObjectRef objectRef , UMLObject secondObject )
   {
      boolean fujaba__Success = false;
      ObjectSet set = null;
      ExecuteStoryPatternOperation result = null;
      FClass cls = null;
      UMLObject object = null;
      FClass secondClass = null;
      Iterator fujaba__IterClsToSuperClass = null;
      Object _TmpObject = null;
      FClass superClass = null;
      Iterator fujaba__IterSecondClassToSuperClass = null;
      UMLObjectRef secondObjectRef = null;
      Iterator fujaba__IterSecondObjectRefToExistingIsoCheck = null;
      CheckIsomorphismOperation existingIsoCheck = null;
      CheckIsomorphismOperation isoCheck = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object secondObject is really bound
         JavaSDM.ensure ( secondObject != null );
         // attribute condition type == UMLObject.NEGATIVE
         JavaSDM.ensure ( secondObject.getType () == UMLObject.NEGATIVE );

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return ;

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // search to-one link objects from this to set
         set = this.getObjects ();

         // check object set is really bound
         JavaSDM.ensure ( set != null );


         // search to-one link result from this to result
         result = this.getResult ();

         // check object result is really bound
         JavaSDM.ensure ( result != null );


         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // collabStat call
            this.internalError("result or set not found", pattern);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         return ;

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object objectRef is really bound
         JavaSDM.ensure ( objectRef != null );
         // search to-one link ref from objectRef to object
         object = objectRef.getRef ();

         // check object object is really bound
         JavaSDM.ensure ( object != null );

         // search to-one link instanceOf from object to cls
         cls = object.getInstanceOf ();

         // check object cls is really bound
         JavaSDM.ensure ( cls != null );



         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // collabStat call
            this.error("Object has no class.", object);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         return ;

      }
      if ( object.isOptional() && secondObject.isOptional() )
      {
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // collabStat call
            this.warning ("Skipping isomorphism check for object " + object.getObjectName() + " and " + secondObject.getObjectName() + " cause they are both optional/set. Please insert maybe clause to avoid this warning.", object);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         return ;

      }
      // story pattern Successor of 
      try 
      {
         fujaba__Success = false; 

         // check object secondObject is really bound
         JavaSDM.ensure ( secondObject != null );
         // search to-one link instanceOf from secondObject to secondClass
         secondClass = secondObject.getInstanceOf ();

         // check object secondClass is really bound
         JavaSDM.ensure ( secondClass != null );


         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // collabStat call
            this.error("Object has no class.", secondObject);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         return ;

      }
      if ( !( cls.equals(secondClass) ) )
      {
         // story pattern check subclass
         try 
         {
            fujaba__Success = false; 

            // check object cls is really bound
            JavaSDM.ensure ( cls != null );
            // iterate to-many link $link.InstanceOf.Name from cls to superClass
            fujaba__Success = false;
            fujaba__IterClsToSuperClass = new de.uni_kassel.sdm.Path (cls, "(revSubclass.superclass)*");
            while ( !(fujaba__Success) && fujaba__IterClsToSuperClass.hasNext () )
            {
               try
               {
                  _TmpObject =  fujaba__IterClsToSuperClass.next ();

                  // ensure correct type and really bound of object superClass
                  JavaSDM.ensure ( _TmpObject instanceof FClass );
                  superClass = (FClass) _TmpObject;

                  // check isomorphic binding between objects superClass and cls
                  JavaSDM.ensure ( !superClass.equals (cls) );

                  // constraint secondClass.equals( superClass )
                  JavaSDM.ensure ( secondClass.equals( superClass ) );

                  fujaba__Success = true;
               }
               catch ( JavaSDMException fujaba__InternalException )
               {
                  fujaba__Success = false;
               }
            }
            JavaSDM.ensure (fujaba__Success);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         if ( !( fujaba__Success ) )
         {
            // story pattern check superclass
            try 
            {
               fujaba__Success = false; 

               // check object secondClass is really bound
               JavaSDM.ensure ( secondClass != null );
               // iterate to-many link $link.InstanceOf.Name from secondClass to superClass
               fujaba__Success = false;
               fujaba__IterSecondClassToSuperClass = new de.uni_kassel.sdm.Path (secondClass, "(revSubclass.superclass)*");
               while ( !(fujaba__Success) && fujaba__IterSecondClassToSuperClass.hasNext () )
               {
                  try
                  {
                     _TmpObject =  fujaba__IterSecondClassToSuperClass.next ();

                     // ensure correct type and really bound of object superClass
                     JavaSDM.ensure ( _TmpObject instanceof FClass );
                     superClass = (FClass) _TmpObject;

                     // check isomorphic binding between objects superClass and secondClass
                     JavaSDM.ensure ( !superClass.equals (secondClass) );

                     // constraint cls.equals( superClass )
                     JavaSDM.ensure ( cls.equals( superClass ) );

                     fujaba__Success = true;
                  }
                  catch ( JavaSDMException fujaba__InternalException )
                  {
                     fujaba__Success = false;
                  }
               }
               JavaSDM.ensure (fujaba__Success);
               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }

            if ( !( fujaba__Success ) )
            {
               return ;

            }

         }

      }
      // // todo: replace this with a NAC
      // story pattern check existing
      try 
      {
         fujaba__Success = false; 

         secondObjectRef = set.getOrCreateObjectRef(secondObject);

         // check object secondObjectRef is really bound
         JavaSDM.ensure ( secondObjectRef != null );
         // check object objectRef is really bound
         JavaSDM.ensure ( objectRef != null );
         // check object result is really bound
         JavaSDM.ensure ( result != null );
         // check isomorphic binding between objects secondObjectRef and objectRef
         JavaSDM.ensure ( !secondObjectRef.equals (objectRef) );

         // iterate to-many link needs from secondObjectRef to existingIsoCheck
         fujaba__Success = false;
         fujaba__IterSecondObjectRefToExistingIsoCheck = secondObjectRef.iteratorOfDependentOperations ();

         while ( !(fujaba__Success) && fujaba__IterSecondObjectRefToExistingIsoCheck.hasNext () )
         {
            try
            {
               _TmpObject =  fujaba__IterSecondObjectRefToExistingIsoCheck.next ();

               // ensure correct type and really bound of object existingIsoCheck
               JavaSDM.ensure ( _TmpObject instanceof CheckIsomorphismOperation );
               existingIsoCheck = (CheckIsomorphismOperation) _TmpObject;

               // check link operations from existingIsoCheck to result
               JavaSDM.ensure (result.equals (existingIsoCheck.getStoryPatternOperation ()));

               // check link needs from existingIsoCheck to objectRef
               JavaSDM.ensure (existingIsoCheck.hasInNeeds (objectRef));


               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return ;

      }
      // story pattern Successor of Successor of 
      try 
      {
         fujaba__Success = false; 

         // check object objectRef is really bound
         JavaSDM.ensure ( objectRef != null );
         // check object result is really bound
         JavaSDM.ensure ( result != null );
         // check object secondObjectRef is really bound
         JavaSDM.ensure ( secondObjectRef != null );
         // check isomorphic binding between objects secondObjectRef and objectRef
         JavaSDM.ensure ( !secondObjectRef.equals (objectRef) );

         // create object isoCheck
         isoCheck = new CheckIsomorphismOperation ( );

         // create link needs from isoCheck to secondObjectRef
         isoCheck.addToNeeds (secondObjectRef);

         // create link needs from objectRef to isoCheck
         objectRef.addToDependentOperations (isoCheck);

         // create link operations from result to isoCheck
         result.addToOperations (isoCheck);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   public void createOperations (UMLLink link , UMLObjectRef objectRef , UMLObject secondObject , ObjectSet set )
   {
      boolean fujaba__Success = false;
      UMLLinkRef linkRef = null;
      UMLObject object = null;
      ExecuteStoryPatternOperation result = null;
      Object _TmpObject = null;
      UMLPath path = null;
      FRole searchStartRole = null;
      UMLObjectRef secondObjectRef = null;
      FRole partnerRole = null;
      CheckLinkOperation check = null;
      SearchOperation search = null;
      Iterator fujaba__IterResultToAnyLinkLifecycleOp = null;
      LinkLifecycleOperation anyLinkLifecycleOp = null;
      CreateLinkOperation createLink = null;
      DestroyLinkOperation destroyLink = null;

      // story pattern resolve
      try 
      {
         fujaba__Success = false; 

         linkRef = set.getOrCreateLinkRef(link);

         // check object linkRef is really bound
         JavaSDM.ensure ( linkRef != null );
         // check object objectRef is really bound
         JavaSDM.ensure ( objectRef != null );
         // search to-one link ref from objectRef to object
         object = objectRef.getRef ();

         // check object object is really bound
         JavaSDM.ensure ( object != null );


         // search to-one link result from this to result
         result = this.getResult ();

         // check object result is really bound
         JavaSDM.ensure ( result != null );


         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // collabStat call
            this.internalError("No assigned object/link/result",link);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         return ;

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         _TmpObject = link;

         // ensure correct type and really bound of object path
         JavaSDM.ensure ( _TmpObject instanceof UMLPath );
         path = (UMLPath) _TmpObject;

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         // // path is only traversable in one direction
         // story pattern 
         try 
         {
            fujaba__Success = false; 

            // check object object is really bound
            JavaSDM.ensure ( object != null );
            // check object path is really bound
            JavaSDM.ensure ( path != null );
            // check object secondObject is really bound
            JavaSDM.ensure ( secondObject != null );
            // check isomorphic binding between objects secondObject and object
            JavaSDM.ensure ( !secondObject.equals (object) );

            // check link source from path to secondObject
            JavaSDM.ensure (secondObject.equals (path.getSource ()));

            // check link target from path to object
            JavaSDM.ensure (object.equals (path.getTarget ()));

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         if ( !( fujaba__Success ) )
         {
            return ;

         }

      }
      else
      {
         // // check if REF assoc in wrong direction
         // story pattern check ref
         try 
         {
            fujaba__Success = false; 

            searchStartRole = link.getCorrespondingRole(secondObject);

            // check object searchStartRole is really bound
            JavaSDM.ensure ( searchStartRole != null );
            secondObjectRef = set.getOrCreateObjectRef(secondObject);

            // check object secondObjectRef is really bound
            JavaSDM.ensure ( secondObjectRef != null );
            // check object link is really bound
            JavaSDM.ensure ( link != null );
            // search to-one link partnerRole from searchStartRole to partnerRole
            partnerRole = searchStartRole.getPartnerRole ();

            // check object partnerRole is really bound
            JavaSDM.ensure ( partnerRole != null );

            // check isomorphic binding between objects searchStartRole and partnerRole
            JavaSDM.ensure ( !searchStartRole.equals (partnerRole) );

            // constraint (searchStartRole.getAdornment () != FRole.REFERENCE) || (partnerRole.getAdornment () == FRole.REFERENCE)
            JavaSDM.ensure ( (searchStartRole.getAdornment () != FRole.REFERENCE) || (partnerRole.getAdornment () == FRole.REFERENCE) );

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         if ( !( fujaba__Success ) )
         {
            return ;

         }

      }
      // // don't search over 'create' and optional links, search for unbound objects only, don't search through optional, negative, sets or created objects
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object link is really bound
         JavaSDM.ensure ( link != null );
         // check object secondObject is really bound
         JavaSDM.ensure ( secondObject != null );
         // constraint ((object.getModifier() & UMLObject.CREATE) == 0) || (object.getType() == UMLObject.OPTIONAL) || (object.getType() == UMLObject.NEGATIVE)
         JavaSDM.ensure ( ((object.getModifier() & UMLObject.CREATE) == 0) || (object.getType() == UMLObject.OPTIONAL) || (object.getType() == UMLObject.NEGATIVE) );
         // constraint (link.getType() == UMLLink.NEGATIVE) || ((link.getModifier() & UMLLink.CREATE) == 0) ^ ((link.getType() == UMLLink.OPTIONAL))
         JavaSDM.ensure ( (link.getType() == UMLLink.NEGATIVE) || ((link.getModifier() & UMLLink.CREATE) == 0) ^ ((link.getType() == UMLLink.OPTIONAL)) );
         // constraint (secondObject.getModifier() & UMLObject.CREATE) == 0
         JavaSDM.ensure ( (secondObject.getModifier() & UMLObject.CREATE) == 0 );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         // story pattern 
         try 
         {
            fujaba__Success = false; 

            check = createCheckOperation( objectRef, set.getOrCreateLinkRef(link), secondObject  );

            search = createSearchOperation( objectRef, set.getOrCreateLinkRef(link), secondObject, result  );

            // check object result is really bound
            JavaSDM.ensure ( result != null );
            // check optional
            if (check != null && search != null)
            {
               // create link supersedes from check to search
               check.setSupersedes (search);

            }// check optional
            if (search != null)
            {
               // create link operations from result to search
               result.addToOperations (search);

            }// check optional
            if (check != null)
            {
               // create link operations from result to check
               result.addToOperations (check);

            }   fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         if ( !( fujaba__Success ) )
         {
            internalError("creation of check/search ops failed!",link);

         }

      }
      // story pattern create/destroy links
      try 
      {
         fujaba__Success = false; 

         // check object objectRef is really bound
         JavaSDM.ensure ( objectRef != null );
         // check object result is really bound
         JavaSDM.ensure ( result != null );
         // check object secondObjectRef is really bound
         JavaSDM.ensure ( secondObjectRef != null );
         // iterate to-many link children from result to anyLinkLifecycleOp
         fujaba__Success = false;
         fujaba__IterResultToAnyLinkLifecycleOp = result.iteratorOfChildren ();

         while ( !(fujaba__Success) && fujaba__IterResultToAnyLinkLifecycleOp.hasNext () )
         {
            try
            {
               _TmpObject =  fujaba__IterResultToAnyLinkLifecycleOp.next ();

               // ensure correct type and really bound of object anyLinkLifecycleOp
               JavaSDM.ensure ( _TmpObject instanceof LinkLifecycleOperation );
               anyLinkLifecycleOp = (LinkLifecycleOperation) _TmpObject;

               // check link needs from objectRef to anyLinkLifecycleOp
               JavaSDM.ensure (objectRef.hasInDependentOperations (anyLinkLifecycleOp));

               // check link needs from secondObjectRef to anyLinkLifecycleOp
               JavaSDM.ensure (secondObjectRef.hasInDependentOperations (anyLinkLifecycleOp));


               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return ;

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object partnerRole is really bound
         JavaSDM.ensure ( partnerRole != null );
         // attribute condition readOnly == true
         JavaSDM.ensure ( partnerRole.isReadOnly () == true );

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return ;

      }
      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // check object linkRef is really bound
         JavaSDM.ensure ( linkRef != null );
         // check object objectRef is really bound
         JavaSDM.ensure ( objectRef != null );
         // check object result is really bound
         JavaSDM.ensure ( result != null );
         // check object secondObjectRef is really bound
         JavaSDM.ensure ( secondObjectRef != null );
         // constraint (link.getModifier() & UMLLink.CREATE) != 0 || (object.getModifier() & UMLObject.CREATE) != 0 || (secondObject.getModifier() & UMLObject.CREATE) != 0
         JavaSDM.ensure ( (link.getModifier() & UMLLink.CREATE) != 0 || (object.getModifier() & UMLObject.CREATE) != 0 || (secondObject.getModifier() & UMLObject.CREATE) != 0 );
         // create object createLink
         createLink = new CreateLinkOperation ( );

         // create link subject from objectRef to createLink
         objectRef.addToSubjectOf (createLink);

         // create link needs from objectRef to createLink
         objectRef.addToDependentOperations (createLink);

         // create link needs from secondObjectRef to createLink
         secondObjectRef.addToDependentOperations (createLink);

         // create link link from linkRef to createLink
         linkRef.addToLinkTo (createLink);

         // create link operations from result to createLink
         result.addToOperations (createLink);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object linkRef is really bound
         JavaSDM.ensure ( linkRef != null );
         // check object objectRef is really bound
         JavaSDM.ensure ( objectRef != null );
         // check object result is really bound
         JavaSDM.ensure ( result != null );
         // check object secondObjectRef is really bound
         JavaSDM.ensure ( secondObjectRef != null );
         // constraint (link.getModifier() & UMLLink.DELETE) != 0
         JavaSDM.ensure ( (link.getModifier() & UMLLink.DELETE) != 0 );
         // create object destroyLink
         destroyLink = new DestroyLinkOperation ( );

         // create link subject from objectRef to destroyLink
         objectRef.addToSubjectOf (destroyLink);

         // create link link from linkRef to destroyLink
         linkRef.addToLinkTo (destroyLink);

         // create link needs from secondObjectRef to destroyLink
         secondObjectRef.addToDependentOperations (destroyLink);

         // create link needs from objectRef to destroyLink
         objectRef.addToDependentOperations (destroyLink);

         // create link operations from result to destroyLink
         result.addToOperations (destroyLink);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   public SearchOperation createSearchOperation (UMLObjectRef objectRef , UMLLinkRef linkRef , UMLObject secondObject , ExecuteStoryPatternOperation result )
   {
      boolean fujaba__Success = false;
      ObjectSet set = null;
      UMLLink link = null;
      UMLObject object = null;
      UMLObjectRef secondObjectRef = null;
      SearchOperation search = null;
      UMLObject target = null;
      UMLLink targetLink = null;
      UMLMultiLink multi = null;
      UMLObjectRef targetRef = null;
      SearchMultiLinkOperation multiOp = null;
      UMLObject source = null;
      UMLLink sourceLink = null;
      UMLObjectRef sourceRef = null;

      // // don't search over 'create' and optional links, search for unbound objects only, don't search through optional, negative or created objects
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object linkRef is really bound
         JavaSDM.ensure ( linkRef != null );
         // check object objectRef is really bound
         JavaSDM.ensure ( objectRef != null );
         // check object secondObject is really bound
         JavaSDM.ensure ( secondObject != null );
         // search to-one link objects from this to set
         set = this.getObjects ();

         // check object set is really bound
         JavaSDM.ensure ( set != null );


         // attribute condition type == UMLObject.NORM
         JavaSDM.ensure ( secondObject.getType () == UMLObject.NORM );

         // search to-one link ref from linkRef to link
         link = linkRef.getRef ();

         // check object link is really bound
         JavaSDM.ensure ( link != null );

         // attribute condition type != UMLLink.NEGATIVE
         JavaSDM.ensure ( link.getType () != UMLLink.NEGATIVE );


         // search to-one link ref from objectRef to object
         object = objectRef.getRef ();

         // check object object is really bound
         JavaSDM.ensure ( object != null );

         // check isomorphic binding between objects secondObject and object
         JavaSDM.ensure ( !secondObject.equals (object) );

         // attribute condition bound == false
         JavaSDM.ensure ( object.isBound () == false );


         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return null;

      }
      // story pattern create
      try 
      {
         fujaba__Success = false; 

         secondObjectRef = set.getOrCreateObjectRef(secondObject);

         // check object secondObjectRef is really bound
         JavaSDM.ensure ( secondObjectRef != null );
         // check object linkRef is really bound
         JavaSDM.ensure ( linkRef != null );
         // check object objectRef is really bound
         JavaSDM.ensure ( objectRef != null );
         // check isomorphic binding between objects secondObjectRef and objectRef
         JavaSDM.ensure ( !secondObjectRef.equals (objectRef) );

         // create object search
         search = new SearchOperation ( );

         // create link link from search to linkRef
         search.setLink (linkRef);

         // create link needs from search to secondObjectRef
         search.addToNeeds (secondObjectRef);

         // create link subject from search to objectRef
         search.setSubject (objectRef);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         // story pattern 
         try 
         {
            fujaba__Success = false; 

            // collabStat call
            this.internalError( "Create operation failed!", link );
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         return null;

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object link is really bound
         JavaSDM.ensure ( link != null );
         // check object object is really bound
         JavaSDM.ensure ( object != null );
         // check object secondObject is really bound
         JavaSDM.ensure ( secondObject != null );
         // check isomorphic binding between objects secondObject and object
         JavaSDM.ensure ( !secondObject.equals (object) );

         // search to-one link sourceLink from link to multi
         multi = link.getRevSourceLink ();

         // check object multi is really bound
         JavaSDM.ensure ( multi != null );

         // check link containerObject from multi to secondObject
         JavaSDM.ensure (secondObject.equals (multi.getContainerObject ()));

         // search to-one link targetLink from multi to targetLink
         targetLink = multi.getTargetLink ();

         // check object targetLink is really bound
         JavaSDM.ensure ( targetLink != null );

         // check isomorphic binding between objects targetLink and link
         JavaSDM.ensure ( !targetLink.equals (link) );

         // search to-one link targetObject from multi to target
         target = multi.getTargetObject ();

         // check object target is really bound
         JavaSDM.ensure ( target != null );

         // check isomorphic binding between objects target and object
         JavaSDM.ensure ( !target.equals (object) );

         // check isomorphic binding between objects target and secondObject
         JavaSDM.ensure ( !target.equals (secondObject) );

         // constraint (target.getModifier() & UMLObject.CREATE) == 0
         JavaSDM.ensure ( (target.getModifier() & UMLObject.CREATE) == 0 );
         // constraint (targetLink.getType() == UMLLink.NEGATIVE) || ((targetLink.getModifier() & UMLLink.CREATE) == 0) ^ ((targetLink.getType() == UMLLink.OPTIONAL))
         JavaSDM.ensure ( (targetLink.getType() == UMLLink.NEGATIVE) || ((targetLink.getModifier() & UMLLink.CREATE) == 0) ^ ((targetLink.getType() == UMLLink.OPTIONAL)) );



         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         // story pattern successor
         try 
         {
            fujaba__Success = false; 

            targetRef = set.getOrCreateObjectRef(target);

            // check object targetRef is really bound
            JavaSDM.ensure ( targetRef != null );
            // check object linkRef is really bound
            JavaSDM.ensure ( linkRef != null );
            // check object multi is really bound
            JavaSDM.ensure ( multi != null );
            // check object objectRef is really bound
            JavaSDM.ensure ( objectRef != null );
            // check object result is really bound
            JavaSDM.ensure ( result != null );
            // check object secondObjectRef is really bound
            JavaSDM.ensure ( secondObjectRef != null );
            // check isomorphic binding between objects secondObjectRef and objectRef
            JavaSDM.ensure ( !secondObjectRef.equals (objectRef) );

            // check isomorphic binding between objects targetRef and objectRef
            JavaSDM.ensure ( !targetRef.equals (objectRef) );

            // check isomorphic binding between objects targetRef and secondObjectRef
            JavaSDM.ensure ( !targetRef.equals (secondObjectRef) );

            // create object multiOp
            multiOp = new SearchMultiLinkOperation ( );

            // assign attribute multiOp
            multiOp.setType (SearchMultiLinkOperation.PREVIOUS);
            // create link multiLink from multiOp to multi
            multiOp.setMultiLink (multi);

            // create link subject from multiOp to objectRef
            multiOp.setSubject (objectRef);

            // create link link from multiOp to linkRef
            multiOp.setLink (linkRef);

            // create link needs from multiOp to targetRef
            multiOp.addToNeeds (targetRef);

            // create link needs from multiOp to secondObjectRef
            multiOp.addToNeeds (secondObjectRef);

            // create link operations from result to multiOp
            result.addToOperations (multiOp);

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }


      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object link is really bound
         JavaSDM.ensure ( link != null );
         // check object object is really bound
         JavaSDM.ensure ( object != null );
         // check object secondObject is really bound
         JavaSDM.ensure ( secondObject != null );
         // check isomorphic binding between objects secondObject and object
         JavaSDM.ensure ( !secondObject.equals (object) );

         // search to-one link targetLink from link to multi
         multi = link.getRevTargetLink ();

         // check object multi is really bound
         JavaSDM.ensure ( multi != null );

         // check link containerObject from multi to secondObject
         JavaSDM.ensure (secondObject.equals (multi.getContainerObject ()));

         // search to-one link sourceLink from multi to sourceLink
         sourceLink = multi.getSourceLink ();

         // check object sourceLink is really bound
         JavaSDM.ensure ( sourceLink != null );

         // check isomorphic binding between objects sourceLink and link
         JavaSDM.ensure ( !sourceLink.equals (link) );

         // search to-one link sourceObject from multi to source
         source = multi.getSourceObject ();

         // check object source is really bound
         JavaSDM.ensure ( source != null );

         // check isomorphic binding between objects source and object
         JavaSDM.ensure ( !source.equals (object) );

         // check isomorphic binding between objects source and secondObject
         JavaSDM.ensure ( !source.equals (secondObject) );

         // constraint (source.getModifier() & UMLObject.CREATE) == 0
         JavaSDM.ensure ( (source.getModifier() & UMLObject.CREATE) == 0 );
         // constraint (sourceLink.getType() == UMLLink.NEGATIVE) || ((sourceLink.getModifier() & UMLLink.CREATE) == 0) ^ ((sourceLink.getType() == UMLLink.OPTIONAL))
         JavaSDM.ensure ( (sourceLink.getType() == UMLLink.NEGATIVE) || ((sourceLink.getModifier() & UMLLink.CREATE) == 0) ^ ((sourceLink.getType() == UMLLink.OPTIONAL)) );



         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         // story pattern successor
         try 
         {
            fujaba__Success = false; 

            sourceRef = set.getOrCreateObjectRef(source);

            // check object sourceRef is really bound
            JavaSDM.ensure ( sourceRef != null );
            // check object linkRef is really bound
            JavaSDM.ensure ( linkRef != null );
            // check object multi is really bound
            JavaSDM.ensure ( multi != null );
            // check object objectRef is really bound
            JavaSDM.ensure ( objectRef != null );
            // check object result is really bound
            JavaSDM.ensure ( result != null );
            // check object secondObjectRef is really bound
            JavaSDM.ensure ( secondObjectRef != null );
            // check isomorphic binding between objects secondObjectRef and objectRef
            JavaSDM.ensure ( !secondObjectRef.equals (objectRef) );

            // check isomorphic binding between objects sourceRef and objectRef
            JavaSDM.ensure ( !sourceRef.equals (objectRef) );

            // check isomorphic binding between objects sourceRef and secondObjectRef
            JavaSDM.ensure ( !sourceRef.equals (secondObjectRef) );

            // create object multiOp
            multiOp = new SearchMultiLinkOperation ( );

            // assign attribute multiOp
            multiOp.setType (SearchMultiLinkOperation.NEXT);
            // create link multiLink from multiOp to multi
            multiOp.setMultiLink (multi);

            // create link subject from multiOp to objectRef
            multiOp.setSubject (objectRef);

            // create link link from multiOp to linkRef
            multiOp.setLink (linkRef);

            // create link needs from multiOp to sourceRef
            multiOp.addToNeeds (sourceRef);

            // create link needs from multiOp to secondObjectRef
            multiOp.addToNeeds (secondObjectRef);

            // create link operations from result to multiOp
            result.addToOperations (multiOp);

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }


      }
      return search;
   }

   public Token createToken (FElement element )
   {
      boolean fujaba__Success = false;
      Object _TmpObject = null;
      UMLStoryPattern storyPattern = null;
      ObjectSet set = null;
      ExecuteStoryPatternOperation result = null;

      // story pattern Successor of storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         _TmpObject = element;

         // ensure correct type and really bound of object storyPattern
         JavaSDM.ensure ( _TmpObject instanceof UMLStoryPattern );
         storyPattern = (UMLStoryPattern) _TmpObject;

         // create link pattern from this to storyPattern
         this.setPattern (storyPattern);

         // collabStat call
         this.perform();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // collabStat call
            this.internalError("createToken called without story pattern!", element);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         return null;

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object storyPattern is really bound
         JavaSDM.ensure ( storyPattern != null );
         // search to-one link objects from this to set
         set = this.getObjects ();

         // check object set is really bound
         JavaSDM.ensure ( set != null );


         // search to-one link result from this to result
         result = this.getResult ();

         // check object result is really bound
         JavaSDM.ensure ( result != null );


         // destroy link objects from this to set
         this.setObjects (null);
         // create link storyPattern from result to storyPattern
         result.setStoryPattern (storyPattern);

         // create link objects from result to set
         result.setObjects (set);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         // story pattern 
         try 
         {
            fujaba__Success = false; 

            // collabStat call
            this.internalError("DependencyAnalysis did not create a result operation!", storyPattern);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         return null;

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object result is really bound
         JavaSDM.ensure ( result != null );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return result;

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         this.internalError("Result unbound!", storyPattern);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return null;
   }

   public boolean isResponsible (FElement element )
   {
      boolean fujaba__Success = false;
      Object _TmpObject = null;
      UMLStoryPattern pattern = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         _TmpObject = element;

         // ensure correct type and really bound of object pattern
         JavaSDM.ensure ( _TmpObject instanceof UMLStoryPattern );
         pattern = (UMLStoryPattern) _TmpObject;

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return true;

      }
      return false;
   }

   /**
    * <pre>
    *           0..1     objects     0..1
    * StoryPatternDependencyAnalysisEngine ------------------------> ObjectSet
    *           dependencyAnalysisEngine               objects
    * </pre>
    */
   public static final String PROPERTY_OBJECTS = "objects";

   @Property( name = PROPERTY_OBJECTS, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private ObjectSet objects;

   @Property( name = PROPERTY_OBJECTS )
   public boolean setObjects (ObjectSet value)
   {
      boolean changed = false;

      if (this.objects != value)
      {
      
         ObjectSet oldValue = this.objects;
         this.objects = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_OBJECTS )
   public StoryPatternDependencyAnalysisEngine withObjects (ObjectSet value)
   {
      setObjects (value);
      return this;
   }

   public ObjectSet getObjects ()
   {
      return this.objects;
   }

   /**
    * <pre>
    *           0..1     pattern     0..1
    * StoryPatternDependencyAnalysisEngine ------------------------> UMLStoryPattern
    *           dependencyAnalysisEngine               pattern
    * </pre>
    */
   public static final String PROPERTY_PATTERN = "pattern";

   @Property( name = PROPERTY_PATTERN, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private UMLStoryPattern pattern;

   @Property( name = PROPERTY_PATTERN )
   public boolean setPattern (UMLStoryPattern value)
   {
      boolean changed = false;

      if (this.pattern != value)
      {
      
         UMLStoryPattern oldValue = this.pattern;
         this.pattern = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PATTERN )
   public StoryPatternDependencyAnalysisEngine withPattern (UMLStoryPattern value)
   {
      setPattern (value);
      return this;
   }

   public UMLStoryPattern getPattern ()
   {
      return this.pattern;
   }

   public void perform ()
   {
      boolean fujaba__Success = false;
      UMLStoryPattern pattern = null;
      ObjectSet set = null;
      ExecuteStoryPatternOperation result = null;
      UMLObjectRef objectRef = null;
      UMLObject secondObject = null;
      Iterator fujaba__IterObjectToLink = null;
      UMLLink link = null;
      CheckAttrExprPairOperation checkAttr = null;
      Iterator fujaba__IterObjectToAttrExprPair = null;
      UMLAttrExprPair attrExprPair = null;
      AttributeAssignmentOperation assignAttr = null;
      Iterator fujaba__IterPatternToSecondObject = null;
      Iterator fujaba__IterPatternToObject = null;
      UMLObject object = null;
      String text = null;
      CheckConstraintOperation checkConstraint = null;
      StringTokenizer tokens = null;
      HashSet maybeObjects = null;
      String objectName = null;
      Iterator fujaba__IterPatternToMaybeObject = null;
      UMLObject maybeObject = null;
      UMLObjectRef maybeObjectRef = null;
      Iterator fujaba__IterResultToCiop = null;
      Object _TmpObject = null;
      CheckIsomorphismOperation ciop = null;
      Iterator fujaba__IterMaybeObjectsToObj2Ref = null;
      UMLObjectRef obj2Ref = null;
      Iterator fujaba__IterMaybeObjectsToObj1Ref = null;
      UMLObjectRef obj1Ref = null;
      Iterator fujaba__IterPatternToConstraint = null;
      FConstraint constraint = null;

      // // invoke state chart
      // invoke state chart

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         // = this.myFReactive.process();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // // create object set
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // search to-one link pattern from this to pattern
         pattern = this.getPattern ();

         // check object pattern is really bound
         JavaSDM.ensure ( pattern != null );


         // create object set
         set = new ObjectSet ( );

         // create object result
         result = new ExecuteStoryPatternOperation ( );

         // create link objects from this to set
         this.setObjects (set);

         // create link result from this to result
         this.setResult (result);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         // // fill object set
         // story pattern Successor of storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // check object pattern is really bound
            JavaSDM.ensure ( pattern != null );
            // check object set is really bound
            JavaSDM.ensure ( set != null );
            // iterate to-many link objects from pattern to object
            fujaba__Success = false;
            fujaba__IterPatternToObject = pattern.iteratorOfObjects ();

            while ( fujaba__IterPatternToObject.hasNext () )
            {
               try
               {
                  object = (UMLObject) fujaba__IterPatternToObject.next ();

                  // check object object is really bound
                  JavaSDM.ensure ( object != null );
                  // attribute condition objectName != "super"
                  JavaSDM.ensure ( JavaSDM.stringCompare ((String) object.getObjectName (), "super") != 0 );

                  // story pattern 
                  try 
                  {
                     fujaba__Success = false; 

                     objectRef = set.getOrCreateObjectRef(object);

                     // check object objectRef is really bound
                     JavaSDM.ensure ( objectRef != null );
                     fujaba__Success = true;
                  }
                  catch ( JavaSDMException fujaba__InternalException )
                  {
                     fujaba__Success = false;
                  }

                  // story pattern storypatternwiththis
                  try 
                  {
                     fujaba__Success = false; 

                     // check object object is really bound
                     JavaSDM.ensure ( object != null );
                     // iterate to-many link source from object to link
                     fujaba__Success = false;
                     fujaba__IterObjectToLink = object.iteratorOfRevSource ();

                     while ( fujaba__IterObjectToLink.hasNext () )
                     {
                        try
                        {
                           link = (UMLLink) fujaba__IterObjectToLink.next ();

                           // check object link is really bound
                           JavaSDM.ensure ( link != null );
                           // search to-one link target from link to secondObject
                           secondObject = link.getTarget ();

                           // check object secondObject is really bound
                           JavaSDM.ensure ( secondObject != null );

                           // story pattern 
                           try 
                           {
                              fujaba__Success = false; 

                              // collabStat call
                              this.createOperations( link, objectRef, secondObject, set );
                              fujaba__Success = true;
                           }
                           catch ( JavaSDMException fujaba__InternalException )
                           {
                              fujaba__Success = false;
                           }



                           fujaba__Success = true;
                        }
                        catch ( JavaSDMException fujaba__InternalException )
                        {
                           fujaba__Success = false;
                        }
                     }
                     JavaSDM.ensure (fujaba__Success);
                     fujaba__Success = true;
                  }
                  catch ( JavaSDMException fujaba__InternalException )
                  {
                     fujaba__Success = false;
                  }

                  // story pattern Successor of storypatternwiththis
                  try 
                  {
                     fujaba__Success = false; 

                     // check object object is really bound
                     JavaSDM.ensure ( object != null );
                     // iterate to-many link target from object to link
                     fujaba__Success = false;
                     fujaba__IterObjectToLink = object.iteratorOfRevTarget ();

                     while ( fujaba__IterObjectToLink.hasNext () )
                     {
                        try
                        {
                           link = (UMLLink) fujaba__IterObjectToLink.next ();

                           // check object link is really bound
                           JavaSDM.ensure ( link != null );
                           // search to-one link source from link to secondObject
                           secondObject = link.getSource ();

                           // check object secondObject is really bound
                           JavaSDM.ensure ( secondObject != null );

                           // story pattern storypatternwiththis
                           try 
                           {
                              fujaba__Success = false; 

                              // collabStat call
                              this.createOperations( link, objectRef, secondObject, set );
                              fujaba__Success = true;
                           }
                           catch ( JavaSDMException fujaba__InternalException )
                           {
                              fujaba__Success = false;
                           }



                           fujaba__Success = true;
                        }
                        catch ( JavaSDMException fujaba__InternalException )
                        {
                           fujaba__Success = false;
                        }
                     }
                     JavaSDM.ensure (fujaba__Success);
                     fujaba__Success = true;
                  }
                  catch ( JavaSDMException fujaba__InternalException )
                  {
                     fujaba__Success = false;
                  }

                  // // create attr check, todo: parse expression
                  // story pattern 
                  try 
                  {
                     fujaba__Success = false; 

                     objectRef = set.getOrCreateObjectRef(object);

                     // check object objectRef is really bound
                     JavaSDM.ensure ( objectRef != null );
                     // check object object is really bound
                     JavaSDM.ensure ( object != null );
                     // check object result is really bound
                     JavaSDM.ensure ( result != null );
                     // iterate to-many link attrExprPairs from object to attrExprPair
                     fujaba__Success = false;
                     fujaba__IterObjectToAttrExprPair = object.iteratorOfAttrs ();

                     while ( fujaba__IterObjectToAttrExprPair.hasNext () )
                     {
                        try
                        {
                           attrExprPair = (UMLAttrExprPair) fujaba__IterObjectToAttrExprPair.next ();

                           // check object attrExprPair is really bound
                           JavaSDM.ensure ( attrExprPair != null );
                           // attribute condition qualifier != UMLAttrExprPair.POST
                           JavaSDM.ensure ( attrExprPair.getQualifier () != UMLAttrExprPair.POST );

                           // create object checkAttr
                           checkAttr = new CheckAttrExprPairOperation ( );

                           // create link element from checkAttr to attrExprPair
                           checkAttr.setElement (attrExprPair);

                           // create link subject from checkAttr to objectRef
                           checkAttr.setSubject (objectRef);

                           // create link needs from checkAttr to objectRef
                           checkAttr.addToNeeds (objectRef);

                           // create link operations from result to checkAttr
                           result.addToOperations (checkAttr);


                           fujaba__Success = true;
                        }
                        catch ( JavaSDMException fujaba__InternalException )
                        {
                           fujaba__Success = false;
                        }
                     }
                     JavaSDM.ensure (fujaba__Success);
                     fujaba__Success = true;
                  }
                  catch ( JavaSDMException fujaba__InternalException )
                  {
                     fujaba__Success = false;
                  }

                  // // create attr check, todo: parse expression
                  // story pattern 
                  try 
                  {
                     fujaba__Success = false; 

                     objectRef = set.getOrCreateObjectRef(object);

                     // check object objectRef is really bound
                     JavaSDM.ensure ( objectRef != null );
                     // check object object is really bound
                     JavaSDM.ensure ( object != null );
                     // check object result is really bound
                     JavaSDM.ensure ( result != null );
                     // iterate to-many link attrExprPairs from object to attrExprPair
                     fujaba__Success = false;
                     fujaba__IterObjectToAttrExprPair = object.iteratorOfAttrs ();

                     while ( fujaba__IterObjectToAttrExprPair.hasNext () )
                     {
                        try
                        {
                           attrExprPair = (UMLAttrExprPair) fujaba__IterObjectToAttrExprPair.next ();

                           // check object attrExprPair is really bound
                           JavaSDM.ensure ( attrExprPair != null );
                           // attribute condition qualifier == UMLAttrExprPair.POST
                           JavaSDM.ensure ( attrExprPair.getQualifier () == UMLAttrExprPair.POST );

                           // create object assignAttr
                           assignAttr = new AttributeAssignmentOperation ( );

                           // create link element from assignAttr to attrExprPair
                           assignAttr.setElement (attrExprPair);

                           // create link subject from objectRef to assignAttr
                           objectRef.addToSubjectOf (assignAttr);

                           // create link needs from objectRef to assignAttr
                           objectRef.addToDependentOperations (assignAttr);

                           // create link operations from result to assignAttr
                           result.addToOperations (assignAttr);


                           fujaba__Success = true;
                        }
                        catch ( JavaSDMException fujaba__InternalException )
                        {
                           fujaba__Success = false;
                        }
                     }
                     JavaSDM.ensure (fujaba__Success);
                     fujaba__Success = true;
                  }
                  catch ( JavaSDMException fujaba__InternalException )
                  {
                     fujaba__Success = false;
                  }

                  // // create isomorphism checks
                  // story pattern // create isomorphism checks
                  try 
                  {
                     fujaba__Success = false; 

                     // check object object is really bound
                     JavaSDM.ensure ( object != null );
                     // check object objectRef is really bound
                     JavaSDM.ensure ( objectRef != null );
                     // check object pattern is really bound
                     JavaSDM.ensure ( pattern != null );
                     // iterate to-many link objects from pattern to secondObject
                     fujaba__Success = false;
                     fujaba__IterPatternToSecondObject = pattern.iteratorOfObjects ();

                     while ( fujaba__IterPatternToSecondObject.hasNext () )
                     {
                        try
                        {
                           secondObject = (UMLObject) fujaba__IterPatternToSecondObject.next ();

                           // check object secondObject is really bound
                           JavaSDM.ensure ( secondObject != null );
                           // check isomorphic binding between objects secondObject and object
                           JavaSDM.ensure ( !secondObject.equals (object) );

                           // constraint ((object.getModifier() & UMLObject.CREATE) == 0) || (object.getType() == UMLObject.OPTIONAL) || (object.getType() == UMLObject.NEGATIVE)
                           JavaSDM.ensure ( ((object.getModifier() & UMLObject.CREATE) == 0) || (object.getType() == UMLObject.OPTIONAL) || (object.getType() == UMLObject.NEGATIVE) );
                           // constraint (secondObject.getModifier() & UMLObject.CREATE) == 0
                           JavaSDM.ensure ( (secondObject.getModifier() & UMLObject.CREATE) == 0 );
                           // story pattern 
                           try 
                           {
                              fujaba__Success = false; 

                              // collabStat call
                              this.createIsomorphismCheck( objectRef, secondObject );
                              fujaba__Success = true;
                           }
                           catch ( JavaSDMException fujaba__InternalException )
                           {
                              fujaba__Success = false;
                           }


                           fujaba__Success = true;
                        }
                        catch ( JavaSDMException fujaba__InternalException )
                        {
                           fujaba__Success = false;
                        }
                     }
                     JavaSDM.ensure (fujaba__Success);
                     fujaba__Success = true;
                  }
                  catch ( JavaSDMException fujaba__InternalException )
                  {
                     fujaba__Success = false;
                  }


                  fujaba__Success = true;
               }
               catch ( JavaSDMException fujaba__InternalException )
               {
                  fujaba__Success = false;
               }
            }
            JavaSDM.ensure (fujaba__Success);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         // // create constraint check, todo: parse expression
         // story pattern 
         try 
         {
            fujaba__Success = false; 

            // check object pattern is really bound
            JavaSDM.ensure ( pattern != null );
            // iterate to-many link constraints from pattern to constraint
            fujaba__Success = false;
            fujaba__IterPatternToConstraint = pattern.iteratorOfConstraints ();

            while ( fujaba__IterPatternToConstraint.hasNext () )
            {
               try
               {
                  constraint = (FConstraint) fujaba__IterPatternToConstraint.next ();

                  // check object constraint is really bound
                  JavaSDM.ensure ( constraint != null );
                  // collabStat call
                  text = constraint.getText().trim();
                  // story pattern successor
                  try 
                  {
                     fujaba__Success = false; 

                     // constraint text.toLowerCase().startsWith ("maybe")
                     JavaSDM.ensure ( text.toLowerCase().startsWith ("maybe") );
                     fujaba__Success = true;
                  }
                  catch ( JavaSDMException fujaba__InternalException )
                  {
                     fujaba__Success = false;
                  }

                  if ( fujaba__Success )
                  {
                     // story pattern storypatternwiththis
                     try 
                     {
                        fujaba__Success = false; 

                        tokens = new StringTokenizer (text.substring(5).trim(), "=");

                        // check object tokens is really bound
                        JavaSDM.ensure ( tokens != null );
                        // create object maybeObjects
                        maybeObjects = new HashSet ( );

                        fujaba__Success = true;
                     }
                     catch ( JavaSDMException fujaba__InternalException )
                     {
                        fujaba__Success = false;
                     }

                     while ( tokens.hasMoreTokens() )
                     {
                        // story pattern 
                        try 
                        {
                           fujaba__Success = false; 

                           // check object tokens is really bound
                           JavaSDM.ensure ( tokens != null );
                           // collabStat call
                           objectName = tokens.nextToken().trim();
                           fujaba__Success = true;
                        }
                        catch ( JavaSDMException fujaba__InternalException )
                        {
                           fujaba__Success = false;
                        }

                        // story pattern storypatternwiththis
                        try 
                        {
                           fujaba__Success = false; 

                           // check object pattern is really bound
                           JavaSDM.ensure ( pattern != null );
                           // iterate to-many link objects from pattern to maybeObject
                           fujaba__Success = false;
                           fujaba__IterPatternToMaybeObject = pattern.iteratorOfObjects ();

                           while ( !(fujaba__Success) && fujaba__IterPatternToMaybeObject.hasNext () )
                           {
                              try
                              {
                                 maybeObject = (UMLObject) fujaba__IterPatternToMaybeObject.next ();

                                 // check object maybeObject is really bound
                                 JavaSDM.ensure ( maybeObject != null );
                                 // attribute condition objectName == objectName
                                 JavaSDM.ensure ( JavaSDM.stringCompare ((String) maybeObject.getObjectName (), objectName) == 0 );


                                 fujaba__Success = true;
                              }
                              catch ( JavaSDMException fujaba__InternalException )
                              {
                                 fujaba__Success = false;
                              }
                           }
                           JavaSDM.ensure (fujaba__Success);
                           fujaba__Success = true;
                        }
                        catch ( JavaSDMException fujaba__InternalException )
                        {
                           fujaba__Success = false;
                        }

                        // story pattern 
                        try 
                        {
                           fujaba__Success = false; 

                           maybeObjectRef = set.getOrCreateObjectRef (maybeObject);

                           // check object maybeObjectRef is really bound
                           JavaSDM.ensure ( maybeObjectRef != null );
                           // check object maybeObjects is really bound
                           JavaSDM.ensure ( maybeObjects != null );
                           // create link contains from maybeObjects to maybeObjectRef
                           maybeObjects.add (maybeObjectRef);

                           fujaba__Success = true;
                        }
                        catch ( JavaSDMException fujaba__InternalException )
                        {
                           fujaba__Success = false;
                        }


                     }
                     // story pattern storypatternwiththis
                     try 
                     {
                        fujaba__Success = false; 

                        // check object maybeObjects is really bound
                        JavaSDM.ensure ( maybeObjects != null );
                        // check object result is really bound
                        JavaSDM.ensure ( result != null );
                        // iterate to-many link contains from maybeObjects to obj1Ref
                        fujaba__Success = false;
                        fujaba__IterMaybeObjectsToObj1Ref = maybeObjects.iterator ();

                        while ( fujaba__IterMaybeObjectsToObj1Ref.hasNext () )
                        {
                           try
                           {
                              _TmpObject =  fujaba__IterMaybeObjectsToObj1Ref.next ();

                              // ensure correct type and really bound of object obj1Ref
                              JavaSDM.ensure ( _TmpObject instanceof UMLObjectRef );
                              obj1Ref = (UMLObjectRef) _TmpObject;

                              // iterate to-many link contains from maybeObjects to obj2Ref
                              fujaba__Success = false;
                              fujaba__IterMaybeObjectsToObj2Ref = maybeObjects.iterator ();

                              while ( fujaba__IterMaybeObjectsToObj2Ref.hasNext () )
                              {
                                 try
                                 {
                                    _TmpObject =  fujaba__IterMaybeObjectsToObj2Ref.next ();

                                    // ensure correct type and really bound of object obj2Ref
                                    JavaSDM.ensure ( _TmpObject instanceof UMLObjectRef );
                                    obj2Ref = (UMLObjectRef) _TmpObject;

                                    // check isomorphic binding between objects obj2Ref and obj1Ref
                                    JavaSDM.ensure ( !obj2Ref.equals (obj1Ref) );

                                    // iterate to-many link operations from result to ciop
                                    fujaba__Success = false;
                                    fujaba__IterResultToCiop = result.iteratorOfOperations ();

                                    while ( fujaba__IterResultToCiop.hasNext () )
                                    {
                                       try
                                       {
                                          _TmpObject =  fujaba__IterResultToCiop.next ();

                                          // ensure correct type and really bound of object ciop
                                          JavaSDM.ensure ( _TmpObject instanceof CheckIsomorphismOperation );
                                          ciop = (CheckIsomorphismOperation) _TmpObject;

                                          // check link needs from ciop to obj1Ref
                                          JavaSDM.ensure (ciop.hasInNeeds (obj1Ref));

                                          // check link needs from ciop to obj2Ref
                                          JavaSDM.ensure (ciop.hasInNeeds (obj2Ref));

                                          // delete object ciop
                                          ciop.removeYou ();


                                          fujaba__Success = true;
                                       }
                                       catch ( JavaSDMException fujaba__InternalException )
                                       {
                                          fujaba__Success = false;
                                       }
                                    }
                                    JavaSDM.ensure (fujaba__Success);

                                    fujaba__Success = true;
                                 }
                                 catch ( JavaSDMException fujaba__InternalException )
                                 {
                                    fujaba__Success = false;
                                 }
                              }
                              JavaSDM.ensure (fujaba__Success);

                              fujaba__Success = true;
                           }
                           catch ( JavaSDMException fujaba__InternalException )
                           {
                              fujaba__Success = false;
                           }
                        }
                        JavaSDM.ensure (fujaba__Success);
                        fujaba__Success = true;
                     }
                     catch ( JavaSDMException fujaba__InternalException )
                     {
                        fujaba__Success = false;
                     }


                  }
                  else
                  {
                     // story pattern storypatternwiththis
                     try 
                     {
                        fujaba__Success = false; 

                        // check object constraint is really bound
                        JavaSDM.ensure ( constraint != null );
                        // check object result is really bound
                        JavaSDM.ensure ( result != null );
                        // create object checkConstraint
                        checkConstraint = new CheckConstraintOperation ( );

                        // create link element from checkConstraint to constraint
                        checkConstraint.setElement (constraint);

                        // create link operations from checkConstraint to result
                        checkConstraint.setStoryPatternOperation (result);

                        fujaba__Success = true;
                     }
                     catch ( JavaSDMException fujaba__InternalException )
                     {
                        fujaba__Success = false;
                     }


                  }

                  fujaba__Success = true;
               }
               catch ( JavaSDMException fujaba__InternalException )
               {
                  fujaba__Success = false;
               }
            }
            JavaSDM.ensure (fujaba__Success);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         return ;

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         this.internalError( "Story pattern not assigned.", null );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   /**
    * <pre>
    *           0..1     result     0..1
    * StoryPatternDependencyAnalysisEngine ------------------------> ExecuteStoryPatternOperation
    *           dependencyAnalysisEngine               result
    * </pre>
    */
   public static final String PROPERTY_RESULT = "result";

   @Property( name = PROPERTY_RESULT, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private ExecuteStoryPatternOperation result;

   @Property( name = PROPERTY_RESULT )
   public boolean setResult (ExecuteStoryPatternOperation value)
   {
      boolean changed = false;

      if (this.result != value)
      {
      
         ExecuteStoryPatternOperation oldValue = this.result;
         this.result = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_RESULT )
   public StoryPatternDependencyAnalysisEngine withResult (ExecuteStoryPatternOperation value)
   {
      setResult (value);
      return this;
   }

   public ExecuteStoryPatternOperation getResult ()
   {
      return this.result;
   }

   public void removeYou()
   {
      this.setObjects (null);
      this.setPattern (null);
      this.setResult (null);
      super.removeYou ();
   }
}


