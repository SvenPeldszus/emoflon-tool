/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.classdiag;
import java.util.Collections;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.fujaba.codegen.engine.Information;
import de.upb.tools.fca.FEmptyIterator;
import de.upb.tools.fca.FHashMap;
import de.upb.tools.fca.FHashSet; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDMException; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public class ImportInformation extends Information
{


   /**
    * <pre>
    *           0..1     imports     0..n
    * ImportInformation ------------------------> String
    *           importInformation               imports
    * </pre>
    */
   public static final String PROPERTY_IMPORTS = "imports";

   @Property( name = PROPERTY_IMPORTS, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashSet<String> imports;

   @Property( name = PROPERTY_IMPORTS )
   public Set<? extends String> getImports()
   {
      return ((this.imports == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.imports));
   }

   @Property( name = PROPERTY_IMPORTS )
   public boolean addToImports (String value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.imports == null)
         {
            this.imports = new FHashSet<String> ();

         }
      
         changed = this.imports.add (value);
      
      }
      return changed;
   }

   @Property( name = PROPERTY_IMPORTS )
   public ImportInformation withImports (String value)
   {
      addToImports (value);
      return this;
   }

   public ImportInformation withoutImports (String value)
   {
      removeFromImports (value);
      return this;
   }


   public boolean removeFromImports (String value)
   {
      boolean changed = false;

      if ((this.imports != null) && (value != null))
      {
      
         changed = this.imports.remove (value);
      
      }
      return changed;
   }

   @Property( name = PROPERTY_IMPORTS )
   public void removeAllFromImports (){
      if (this.imports != null && this.imports.size () > 0)
      {
      
         this.imports.clear();
      
      }
   }

   @Property( name = PROPERTY_IMPORTS )
   public boolean hasInImports (String value)
   {
      return ((this.imports != null) &&
              (value != null) &&
              this.imports.contains (value));
   }

   @Property( name = PROPERTY_IMPORTS )
   public Iterator<? extends String> iteratorOfImports ()
   {
      return ((this.imports == null)
              ? FEmptyIterator.<String>get ()
              : this.imports.iterator ());
   }

   @Property( name = PROPERTY_IMPORTS )
   public int sizeOfImports ()
   {
      return ((this.imports == null)
              ? 0
              : this.imports.size ());
   }

   /**
    * <pre>
    *           0..1     longNames     0..1
    * ImportInformation ------------------------> String
    *           importInformation1               longNames
    * </pre>
    */
   public static final String PROPERTY_LONG_NAMES = "longNames";

   @Property( name = PROPERTY_LONG_NAMES, kind = ReferenceHandler.ReferenceKind.QUALIFIED_TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashMap<String, String> longNames;

   @Property( name = PROPERTY_LONG_NAMES )

   public boolean removeFromLongNames (String value)
   {
      boolean changed = false;

      if (this.longNames != null)
      {
         Iterator iter = this.entriesOfLongNames ();
         Map.Entry entry;
         while (iter.hasNext ())
         {
            entry = (Map.Entry) iter.next ();
            if (entry.getValue () == value)
            {
            
               if (this.removeFromLongNames ((String) entry.getKey (), value))
               {
                  changed = true;
               }
            
            }
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_LONG_NAMES )
   public void removeAllFromLongNames (){
      if (this.longNames != null && this.longNames.size () > 0)
      {
      
         this.longNames.clear();
      
      }
   }

   @Property( name = PROPERTY_LONG_NAMES )
   public boolean hasInLongNames (String value)
   {
      return ((this.longNames != null) &&
              this.longNames.containsValue (value));
   }

   @Property( name = PROPERTY_LONG_NAMES )
   public Iterator<? extends String> iteratorOfLongNames ()
   {
      return ((this.longNames == null)
              ? FEmptyIterator.<String>get ()
              : this.longNames.values ().iterator ());
   }

   @Property( name = PROPERTY_LONG_NAMES )
   public int sizeOfLongNames ()
   {
      return ((this.longNames == null)
              ? 0
              : this.longNames.size ());
   }

   @Property( name = PROPERTY_LONG_NAMES )
   public boolean hasInLongNames (String key, String value)
   {
      return ((this.longNames != null) &&
              (value != null || this.longNames.containsKey (key)) && 
              (this.longNames.get (key) == value));
   }

   @Property( name = PROPERTY_LONG_NAMES )
   public boolean hasKeyInLongNames (String key)
   {
      return ((this.longNames != null) &&
              this.longNames.containsKey (key));
   }

   @Property( name = PROPERTY_LONG_NAMES )
   public Iterator<String> keysOfLongNames ()
   {
      return ((this.longNames == null)
              ? FEmptyIterator.<String>get ()
              : this.longNames.keySet ().iterator ());
   }

   @Property( name = PROPERTY_LONG_NAMES )
   public Iterator entriesOfLongNames ()
   {
      return ((this.longNames == null)
              ? FEmptyIterator.get ()
              : this.longNames.entrySet ().iterator ());
   }

   @Property( name = PROPERTY_LONG_NAMES )
   public boolean addToLongNames (String key, String value)
   {
      boolean changed = false;

      if (this.longNames == null)
      {
         this.longNames = new FHashMap<String, String> ();
      }
   
      String oldValue = (String) this.longNames.put (key, value);
      if (oldValue != value)
      {
         changed = true;
      }
   
      return changed;
   }

   @Property( name = PROPERTY_LONG_NAMES )
   public boolean addToLongNames (Map.Entry entry)
   {
      return addToLongNames ((String) entry.getKey (), (String) entry.getValue ());
   }

   @Property( name = PROPERTY_LONG_NAMES )
   public boolean removeFromLongNames (String key, String value)
   {
      boolean changed = false;

      if (this.longNames != null)
      {
         String oldValue = (String) this.longNames.get (key);
         if (oldValue == value && 
             (oldValue != null || this.longNames.containsKey (key)))
         {
         
            this.longNames.remove (key);
            changed = true;
         
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_LONG_NAMES )
   public boolean removeKeyFromLongNames (String key)
   {
      boolean changed = false;

      if (this.longNames != null)
      {
         changed = this.longNames.containsKey (key);
         if (changed)
         {
         
            String tmpValue = (String) this.longNames.remove (key);
         
         }
      }
      return changed;
   }
   @Property( name = PROPERTY_LONG_NAMES )
   public String getFromLongNames (String key)
   {
      return ((this.longNames == null)
              ? null
              : (String) this.longNames.get (key));
   }

   public void reset ()
   {
      boolean fujaba__Success = false;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         this.removeAllFromImports();
         // collabStat call
         this.removeAllFromLongNames();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

   }

   public String shortName (String longName )
   {

      if ( !( longName==null ) )
      {
         int lastDot = longName.lastIndexOf('.');
         if ( lastDot >= 0 && lastDot < longName.length()-1 )
         {
            String shortName = longName.substring(lastDot+1);
            String existingLongName = getFromLongNames (shortName);
            if ( existingLongName==null )
            {
               addToLongNames (shortName, longName);
               addToImports (longName);
               return shortName;

            }
            if ( !( existingLongName.equals(longName) ) )
            {
               return longName;

            }
            return shortName;

         }

      }
      return longName;
   }

   public void removeYou()
   {
      this.removeAllFromImports ();
      this.removeAllFromLongNames ();
      super.removeYou ();
   }
}


