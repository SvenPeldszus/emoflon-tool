/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.engine;

import java.io.File;
import java.net.URI;
import java.net.URL;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;

import de.fujaba.preferences.PreferencesManager;
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.fujaba.codegen.rules.Token;
import de.uni_paderborn.fujaba.metamodel.common.FElement;
import de.uni_paderborn.fujaba.metamodel.common.FProject;
import de.upb.tools.fca.FEmptyIterator;
import de.upb.tools.fca.FEmptyListIterator;
import de.upb.tools.fca.FHashSet;
import de.upb.tools.fca.FLinkedList; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDM; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDMException;


public class TokenMutatorTemplateEngine extends Engine
{


   public static final String PROPERTY_PROJEC_T_TEMPLAT_E_DIRS = "PROJECT_TEMPLATE_DIRS";

   @Property( name = PROPERTY_PROJEC_T_TEMPLAT_E_DIRS, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   public static final String PROJECT_TEMPLATE_DIRS = "de.fujaba.codegen.templates";


   protected void addTemplateDirsFor (FElement element )
   {
      boolean fujaba__Success = false;
      List templateDirs = null;
      Iterator fujaba__IterTemplateDirsToTemplateDir = null;
      Object _TmpObject = null;
      URL templateDir = null;

      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         templateDirs = getTemplateDirsFor(element);

         // check object templateDirs is really bound
         JavaSDM.ensure ( templateDirs != null );
         // iterate to-many link contains from templateDirs to templateDir
         fujaba__Success = false;
         fujaba__IterTemplateDirsToTemplateDir = templateDirs.iterator ();

         while ( fujaba__IterTemplateDirsToTemplateDir.hasNext () )
         {
            try
            {
               _TmpObject =  fujaba__IterTemplateDirsToTemplateDir.next ();

               // ensure correct type and really bound of object templateDir
               JavaSDM.ensure ( _TmpObject instanceof URL );
               templateDir = (URL) _TmpObject;

               // create link templateDirs from this to templateDir
               this.addToTemplateDirs (templateDir);


               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   /**
    * <pre>
    *           0..1     codeWriter     0..n
    * TokenMutatorTemplateEngine ------------------------- CodeWritingEngine
    *           engine               codeWriter
    * </pre>
    */
   public static final String PROPERTY_CODE_WRITER = "codeWriter";

   @Property( name = PROPERTY_CODE_WRITER, partner = CodeWritingEngine.PROPERTY_ENGINE, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FLinkedList<CodeWritingEngine> codeWriter;

   @Property( name = PROPERTY_CODE_WRITER )
   public List<? extends CodeWritingEngine> getCodeWriter()
   {
      return ((this.codeWriter == null)
              ? Collections.EMPTY_LIST
              : Collections.unmodifiableList(this.codeWriter));
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public boolean addToCodeWriter (CodeWritingEngine value)
   {
      boolean changed = false;

      if (value != null && !this.hasInCodeWriter (value))
      {
         if (this.codeWriter == null)
         {
            this.codeWriter = new FLinkedList<CodeWritingEngine> ();

         }
      
         changed = this.codeWriter.add (value);
         if (changed)
         {
            value.setEngine (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public TokenMutatorTemplateEngine withCodeWriter (CodeWritingEngine value)
   {
      addToCodeWriter (value);
      return this;
   }

   public TokenMutatorTemplateEngine withoutCodeWriter (CodeWritingEngine value)
   {
      removeFromCodeWriter (value);
      return this;
   }


   public boolean removeFromCodeWriter (CodeWritingEngine value)
   {
      boolean changed = false;

      if ((this.codeWriter != null) && (value != null))
      {
      
         changed = this.codeWriter.remove (value);
         if (changed)
         {
            value.setEngine (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public void removeAllFromCodeWriter (){
   
      CodeWritingEngine tmpValue;
      Iterator<? extends CodeWritingEngine> iter = this.iteratorOfCodeWriter ();
      while (iter.hasNext ())
      {
         tmpValue = (CodeWritingEngine) iter.next ();
         this.removeFromCodeWriter (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public boolean hasInCodeWriter (CodeWritingEngine value)
   {
      return ((this.codeWriter != null) &&
              (value != null) &&
              this.codeWriter.contains (value));
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public ListIterator<? extends CodeWritingEngine> iteratorOfCodeWriter ()
   {
      return ((this.codeWriter == null)
              ? FEmptyListIterator.<CodeWritingEngine>get ()
              : this.codeWriter.listIterator());
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public int sizeOfCodeWriter ()
   {
      return ((this.codeWriter == null)
              ? 0
              : this.codeWriter.size ());
   }
   @Property( name = PROPERTY_CODE_WRITER )
   public CodeWritingEngine getFirstOfCodeWriter ()
   {
      if (codeWriter == null)
      {
         return null;
      }
      else
      {
         if (codeWriter.size() == 0) 	 
         { 	 
            return null; 	 
         }
         return (CodeWritingEngine) codeWriter.getFirst ();
      }
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public CodeWritingEngine getLastOfCodeWriter ()
   {
      if (codeWriter == null)
      {
         return null;
      }
      else
      {
         if (codeWriter.size() == 0) 	 
         { 	 
            return null; 	 
         }
         return (CodeWritingEngine) codeWriter.getLast ();
      }
   }
   @Property( name = PROPERTY_CODE_WRITER )
   public CodeWritingEngine getFromCodeWriter ( int index )
   {
      if (index >= 0 && index < sizeOfCodeWriter ())
      {
         return (CodeWritingEngine) this.codeWriter.get (index);
      }
      else
      {
         throw new IllegalArgumentException ("getCodeWriterAt(" + index + ")" );
      }
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public int indexOfCodeWriter ( CodeWritingEngine value )
   {
      return ((this.codeWriter == null)
              ? -1
              : this.codeWriter.indexOf (value));
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public int indexOfCodeWriter ( CodeWritingEngine value, int index )
   {
      return ((this.codeWriter == null)
   	       ? -1
   	       : this.codeWriter.indexOf (value, index));
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public int lastIndexOfCodeWriter ( CodeWritingEngine value )
   {
      return ((this.codeWriter == null)
               ? -1
               : this.codeWriter.lastIndexOf (value));
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public int lastIndexOfCodeWriter ( CodeWritingEngine value, int index )
   {
      return ((this.codeWriter == null)
               ? -1
               : this.codeWriter.lastIndexOf (value, index));
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public boolean isBeforeOfCodeWriter ( CodeWritingEngine leftObject, CodeWritingEngine rightObject)
   {
      if (codeWriter == null)
      {
         return false;
      }
      else
      {
         return codeWriter.isBefore (leftObject, rightObject);
      }
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public boolean isAfterOfCodeWriter ( CodeWritingEngine leftObject, CodeWritingEngine rightObject)
   {
      if (codeWriter == null)
      {
         return false;
      }
      else
      {
         return codeWriter.isAfter (leftObject, rightObject);
      }
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public CodeWritingEngine getNextOfCodeWriter ( CodeWritingEngine object )
   {
      if (codeWriter == null)
      {
         return null;
      }
      else
      {
         return (CodeWritingEngine) codeWriter.getNextOf (object);
      }
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public CodeWritingEngine getNextOfCodeWriter ( CodeWritingEngine object, int index)
   {
      if (codeWriter == null)
      {
         return null;
      }
      else
      {
         return (CodeWritingEngine) codeWriter.getNextOf (object, index);
      }
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public CodeWritingEngine getPreviousOfCodeWriter ( CodeWritingEngine object)
   {
      if (codeWriter == null)
      {
         return null;
      }
      else
      {
         return (CodeWritingEngine) codeWriter.getPreviousOf (object);
      }
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public CodeWritingEngine getPreviousOfCodeWriter ( CodeWritingEngine object, int index )
   {
      if (codeWriter == null)
      {
         return null;
      }
      else
      {
         return (CodeWritingEngine) codeWriter.getPreviousOf (object, index);
      }
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public boolean addAfterOfCodeWriter ( CodeWritingEngine refObject, CodeWritingEngine value)
   {
      boolean changed = false;
      if (codeWriter != null)
      {
         int index = codeWriter.indexOf (refObject);
         changed = addToCodeWriter (index+1, value);
      }
      return changed;
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public boolean addBeforeOfCodeWriter ( CodeWritingEngine refObject, CodeWritingEngine value)
   {
      boolean changed = false;
      if (codeWriter != null)
      {
         int index = codeWriter.indexOf (refObject);
         changed = addToCodeWriter (index, value);
      }
      return changed;
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public boolean addToCodeWriter (int index, CodeWritingEngine value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.codeWriter == null)
         {
            this.codeWriter = new FLinkedList<CodeWritingEngine> (); // or FTreeSet () or FLinkedList ()
         }
         int oldIndex = this.indexOfCodeWriter (value);
         if (oldIndex != index)
         {
            try
            {
            
               if (oldIndex > -1)
               {
                  codeWriter.remove (oldIndex);
               }
               codeWriter.add (index, value);
               if (oldIndex < 0)
               {
                  value.setEngine (this);
               }
               changed = true;
            
            }
            catch (IndexOutOfBoundsException ex)
            {
               return false;
            }
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public boolean setInCodeWriter (int index, CodeWritingEngine value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.codeWriter == null)
         {
            this.codeWriter = new FLinkedList<CodeWritingEngine> (); // or FTreeSet () or FLinkedList ()
         }
         int oldIndex = this.indexOfCodeWriter (value);
         if (oldIndex != index)
         {
            try
            {
            
               CodeWritingEngine oldValue = (CodeWritingEngine)this.codeWriter.set (index, value);
               if (oldIndex > -1)
               {
                  this.codeWriter.remove (oldIndex);
               }
               if (oldValue != value)
               {
                  if (oldValue != null)
                  {
                     oldValue.setEngine (null);
                  }
                  if (oldIndex < 0)
                  {
                     value.setEngine (this);
                  }
                  changed = true;
               }
            
            }
            catch (IndexOutOfBoundsException ex)
            {
               return false;
            }
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public boolean removeFromCodeWriter (int index)
   {
      boolean changed = false;

      if (this.codeWriter != null && (index >= 0 && index < this.codeWriter.size ()))
      {
      
         CodeWritingEngine tmpValue = (CodeWritingEngine) this.codeWriter.remove (index);
         if (tmpValue != null)
         {
            tmpValue.setEngine (null);
            changed = true;
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public boolean removeFromCodeWriter (int index, CodeWritingEngine value)
   {
      boolean changed = false;

      if ((this.codeWriter != null) && (value != null) && 
          (index >= 0 && index < this.codeWriter.size ()))
      {
         CodeWritingEngine oldValue = (CodeWritingEngine) this.codeWriter.get (index);
         if (oldValue == value)
         {
         
            changed = this.removeFromCodeWriter (index);
         
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public ListIterator<? extends CodeWritingEngine> iteratorOfCodeWriter ( CodeWritingEngine  lowerBound )
   {
      ListIterator<CodeWritingEngine> result = FEmptyListIterator.<CodeWritingEngine>get ();

      if (codeWriter != null && lowerBound != null)
      {
         int index = codeWriter.indexOf (lowerBound) + 1;
         result = codeWriter.listIterator (index);
      }
      else if (codeWriter != null && lowerBound == null)
      {
         result = codeWriter.listIterator (0);
      }

      return result;
   }

   @Property( name = PROPERTY_CODE_WRITER )
   public ListIterator<? extends CodeWritingEngine> iteratorOfCodeWriter (int index)
   {
      return ((this.codeWriter == null)
              ? FEmptyListIterator.<CodeWritingEngine>get ()
              : this.codeWriter.listIterator (Math.max(0,Math.min(index,this.codeWriter.size ()))));
   }

   public Map generateCode (FElement element )
   {
      boolean fujaba__Success = false;
      Token token = null;
      HashMap map = null;
      Iterator fujaba__IterThisToCodeWriter = null;
      CodeWritingEngine codeWriter = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         token = generateTokenTree (element);

         // check object token is really bound
         JavaSDM.ensure ( token != null );
         // create object map
         map = new HashMap ( );

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return null;

      }
      addTemplateDirsFor(element);
      try
      {
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object map is really bound
         JavaSDM.ensure ( map != null );
         // iterate to-many link codeWriter from this to codeWriter
         fujaba__Success = false;
         fujaba__IterThisToCodeWriter = this.iteratorOfCodeWriter ();

         while ( fujaba__IterThisToCodeWriter.hasNext () )
         {
            try
            {
               codeWriter = (CodeWritingEngine) fujaba__IterThisToCodeWriter.next ();

               // check object codeWriter is really bound
               JavaSDM.ensure ( codeWriter != null );
               // collabStat call
               map.put (codeWriter.getTargetName(), codeWriter.generateCode (token));

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      }
      finally
      {
         removeTemplateDirsFor(element);
      }
      return map;
   }

   public String generateCode (FElement element , String targetName )
   {
      boolean fujaba__Success = false;
      Token token = null;
      Iterator fujaba__IterThisToCodeWriter = null;
      CodeWritingEngine codeWriter = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         token = generateTokenTree (element);

         // check object token is really bound
         JavaSDM.ensure ( token != null );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return null;

      }
      if ( targetName != null )
      {
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // iterate to-many link codeWriter from this to codeWriter
            fujaba__Success = false;
            fujaba__IterThisToCodeWriter = this.iteratorOfCodeWriter ();

            while ( !(fujaba__Success) && fujaba__IterThisToCodeWriter.hasNext () )
            {
               try
               {
                  codeWriter = (CodeWritingEngine) fujaba__IterThisToCodeWriter.next ();

                  // check object codeWriter is really bound
                  JavaSDM.ensure ( codeWriter != null );
                  // attribute condition targetName == targetName
                  JavaSDM.ensure ( JavaSDM.stringCompare ((String) codeWriter.getTargetName (), targetName) == 0 );


                  fujaba__Success = true;
               }
               catch ( JavaSDMException fujaba__InternalException )
               {
                  fujaba__Success = false;
               }
            }
            JavaSDM.ensure (fujaba__Success);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }


      }
      else
      {
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // iterate to-many link codeWriter from this to codeWriter
            fujaba__Success = false;
            fujaba__IterThisToCodeWriter = this.iteratorOfCodeWriter ();

            while ( !(fujaba__Success) && fujaba__IterThisToCodeWriter.hasNext () )
            {
               try
               {
                  codeWriter = (CodeWritingEngine) fujaba__IterThisToCodeWriter.next ();

                  // check object codeWriter is really bound
                  JavaSDM.ensure ( codeWriter != null );

                  fujaba__Success = true;
               }
               catch ( JavaSDMException fujaba__InternalException )
               {
                  fujaba__Success = false;
               }
            }
            JavaSDM.ensure (fujaba__Success);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }


      }
      addTemplateDirsFor(element);
      String code;
      try
      {
         code = codeWriter.generateCode(token);
      }
      finally
      {
         removeTemplateDirsFor(element);
      }
      return code;
   }

   private Token generateTokenTree (FElement element )
   {
      boolean fujaba__Success = false;
      TokenCreationEngine tokenEngine = null;
      Token token = null;
      Iterator fujaba__IterThisToMutator = null;
      TokenTreeMutatorEngine mutator = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         tokenEngine = getEngineFor (element);

         // check object tokenEngine is really bound
         JavaSDM.ensure ( tokenEngine != null );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         // story pattern 
         try 
         {
            fujaba__Success = false; 

            // collabStat call
            this.error ("No engine found for element of type " + element.getClass().getName() + ".", element);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         return null;

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         token = tokenEngine.createToken (element);

         // check object token is really bound
         JavaSDM.ensure ( token != null );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return null;

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // iterate to-many link treeMutators from this to mutator
         fujaba__Success = false;
         fujaba__IterThisToMutator = this.iteratorOfTreeMutators ();

         while ( fujaba__IterThisToMutator.hasNext () )
         {
            try
            {
               mutator = (TokenTreeMutatorEngine) fujaba__IterThisToMutator.next ();

               // check object mutator is really bound
               JavaSDM.ensure ( mutator != null );
               // collabStat call
               this.mutateTree (mutator, token);

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return token;
   }

   public TokenCreationEngine getEngineFor (FElement element )
   {
      boolean fujaba__Success = false;
      Iterator fujaba__IterThisToEngine = null;
      TokenCreationEngine engine = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // iterate to-many link tokenCreators from this to engine
         fujaba__Success = false;
         fujaba__IterThisToEngine = this.iteratorOfTokenCreators ();

         while ( !(fujaba__Success) && fujaba__IterThisToEngine.hasNext () )
         {
            try
            {
               engine = (TokenCreationEngine) fujaba__IterThisToEngine.next ();

               // check object engine is really bound
               JavaSDM.ensure ( engine != null );
               // constraint engine.isResponsible (element)
               JavaSDM.ensure ( engine.isResponsible (element) );

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return engine;

      }
      return null;
   }

   public TokenCreationEngine getEngineFor (FElement element , TokenCreationEngine prev )
   {
      boolean fujaba__Success = false;
      Iterator fujaba__IterThisToEngine = null;
      TokenCreationEngine engine = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object prev is really bound
         JavaSDM.ensure ( prev != null );
         // check link tokenCreators from this to prev
         JavaSDM.ensure (this.hasInTokenCreators (prev));

         // search multilink UMLMultiLink[{...}]
         // iterate to-many link tokenCreators from this to engine
         fujaba__Success = false;
         fujaba__IterThisToEngine = this.iteratorOfTokenCreators (prev);

         while ( !(fujaba__Success) && fujaba__IterThisToEngine.hasNext () )
         {
            try
            {
               engine = (TokenCreationEngine) fujaba__IterThisToEngine.next ();

               // check object engine is really bound
               JavaSDM.ensure ( engine != null );
               // check isomorphic binding between objects prev and engine
               JavaSDM.ensure ( !prev.equals (engine) );

               // constraint engine.isResponsible (element)
               JavaSDM.ensure ( engine.isResponsible (element) );

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return engine;

      }
      return null;
   }

   protected List getTemplateDirsFor (FElement element )
   {
      boolean fujaba__Success = false;
      LinkedList templateDirs = null;

      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // create object templateDirs
         templateDirs = new LinkedList ( );

         // collabStat call
         getTemplateDirsFor(element, templateDirs);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return templateDirs;
   }

   protected void getTemplateDirsFor (FElement element , List templateDirs )
   {
      boolean fujaba__Success = false;
      Object _TmpObject = null;
      FProject project = null;
      String pathes = null;
      StringTokenizer tokens = null;
      String pathStr = null;
      URL templatePath = null;
      Iterator fujaba__IterProjectToDependency = null;
      FProject dependency = null;

      // story pattern storypatternwithparams
      try 
      {
         fujaba__Success = false; 

         _TmpObject = element;

         // ensure correct type and really bound of object project
         JavaSDM.ensure ( _TmpObject instanceof FProject );
         project = (FProject) _TmpObject;

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         // story pattern storypatternwithparams
         try 
         {
            fujaba__Success = false; 

            // check object element is really bound
            JavaSDM.ensure ( element != null );
            // search to-one link project from element to project
            project = element.getProject ();

            // check object project is really bound
            JavaSDM.ensure ( project != null );

            // check isomorphic binding between objects project and element
            JavaSDM.ensure ( !project.equals (element) );


            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }


      }
      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         pathes = project.getFromProperties(PROJECT_TEMPLATE_DIRS);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( pathes != null )
      {
         // story pattern successor
         try 
         {
            fujaba__Success = false; 

            // create object tokens
            tokens = new StringTokenizer(pathes, ",;");

            // collabStat call
            pathStr = null;
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         URI projectUri = null;
         while ( tokens.hasMoreTokens() )
         {
            try {
            pathStr=tokens.nextToken();
            if (projectUri == null)
            {
            projectUri = new File(PreferencesManager.getPreferencesProxy().getExportFolder (project)).toURI();
            }
            URI uri = projectUri.resolve(pathStr);
            // story pattern storypatternwiththis
            try 
            {
               fujaba__Success = false; 

               // check object templateDirs is really bound
               JavaSDM.ensure ( templateDirs != null );
               // create object templatePath
               templatePath = uri.toURL();

               // create link contains from templateDirs to templatePath
               templateDirs.add (templatePath);

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }

            } catch (Exception e)
            {
            error("Invalid template path: "+pathStr, project);
            }

         }

      }
      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // check object project is really bound
         JavaSDM.ensure ( project != null );
         // iterate to-many link requires from project to dependency
         fujaba__Success = false;
         fujaba__IterProjectToDependency = project.iteratorOfRequires ();

         while ( fujaba__IterProjectToDependency.hasNext () )
         {
            try
            {
               dependency = (FProject) fujaba__IterProjectToDependency.next ();

               // check object dependency is really bound
               JavaSDM.ensure ( dependency != null );
               // check isomorphic binding between objects project and dependency
               JavaSDM.ensure ( !project.equals (dependency) );

               // collabStat call
               getTemplateDirsFor(dependency, templateDirs);

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   public void mutateTree (TokenTreeMutatorEngine mutator , Token token )
   {
      boolean fujaba__Success = false;
      boolean continueChildren = false;
      Iterator fujaba__IterTokenToChild = null;
      Token child = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object mutator is really bound
         JavaSDM.ensure ( mutator != null );
         // collabStat call
         continueChildren = mutator.mutateTree (token);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( continueChildren ) )
      {
         return ;

      }
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object token is really bound
         JavaSDM.ensure ( token != null );
         // iterate to-many link children from token to child
         fujaba__Success = false;
         fujaba__IterTokenToChild = token.iteratorOfChildren ();

         while ( fujaba__IterTokenToChild.hasNext () )
         {
            try
            {
               child = (Token) fujaba__IterTokenToChild.next ();

               // check object child is really bound
               JavaSDM.ensure ( child != null );
               // check isomorphic binding between objects token and child
               JavaSDM.ensure ( !token.equals (child) );

               // collabStat call
               this.mutateTree (mutator, child);

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   protected void removeTemplateDirsFor (FElement element )
   {
      boolean fujaba__Success = false;
      List templateDirs = null;
      Iterator fujaba__IterThisToUrl = null;
      URL url = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         templateDirs = getTemplateDirsFor(element);

         // check object templateDirs is really bound
         JavaSDM.ensure ( templateDirs != null );
         // iterate to-many link templateDirs from this to url
         fujaba__Success = false;
         fujaba__IterThisToUrl = this.iteratorOfTemplateDirs ();

         while ( fujaba__IterThisToUrl.hasNext () )
         {
            try
            {
               url = (URL) fujaba__IterThisToUrl.next ();

               // check object url is really bound
               JavaSDM.ensure ( url != null );
               // check link contains from templateDirs to url
               JavaSDM.ensure (templateDirs.contains (url));

               // destroy link templateDirs from this to url
               this.removeFromTemplateDirs (url);

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   /**
    * <pre>
    *           0..1     templateDirs     0..n
    * TokenMutatorTemplateEngine ------------------------> URL
    *           tokenMutatorTemplateEngine               templateDirs
    * </pre>
    */
   public static final String PROPERTY_TEMPLATE_DIRS = "templateDirs";

   @Property( name = PROPERTY_TEMPLATE_DIRS, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FLinkedList<URL> templateDirs;

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public List<? extends URL> getTemplateDirs()
   {
      return ((this.templateDirs == null)
              ? Collections.EMPTY_LIST
              : Collections.unmodifiableList(this.templateDirs));
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public boolean addToTemplateDirs (URL value)
   {
      boolean changed = false;

      if (value != null && !this.hasInTemplateDirs (value))
      {
         if (this.templateDirs == null)
         {
            this.templateDirs = new FLinkedList<URL> ();

         }
      
         changed = this.templateDirs.add (value);
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public TokenMutatorTemplateEngine withTemplateDirs (URL value)
   {
      addToTemplateDirs (value);
      return this;
   }

   public TokenMutatorTemplateEngine withoutTemplateDirs (URL value)
   {
      removeFromTemplateDirs (value);
      return this;
   }


   public boolean removeFromTemplateDirs (URL value)
   {
      boolean changed = false;

      if ((this.templateDirs != null) && (value != null))
      {
      
         changed = this.templateDirs.remove (value);
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public void removeAllFromTemplateDirs (){
      if (this.templateDirs != null && this.templateDirs.size () > 0)
      {
      
         this.templateDirs.clear();
      
      }
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public boolean hasInTemplateDirs (URL value)
   {
      return ((this.templateDirs != null) &&
              (value != null) &&
              this.templateDirs.contains (value));
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public ListIterator<? extends URL> iteratorOfTemplateDirs ()
   {
      return ((this.templateDirs == null)
              ? FEmptyListIterator.<URL>get ()
              : this.templateDirs.listIterator());
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public int sizeOfTemplateDirs ()
   {
      return ((this.templateDirs == null)
              ? 0
              : this.templateDirs.size ());
   }
   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public URL getFirstOfTemplateDirs ()
   {
      if (templateDirs == null)
      {
         return null;
      }
      else
      {
         if (templateDirs.size() == 0) 	 
         { 	 
            return null; 	 
         }
         return (URL) templateDirs.getFirst ();
      }
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public URL getLastOfTemplateDirs ()
   {
      if (templateDirs == null)
      {
         return null;
      }
      else
      {
         if (templateDirs.size() == 0) 	 
         { 	 
            return null; 	 
         }
         return (URL) templateDirs.getLast ();
      }
   }
   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public URL getFromTemplateDirs ( int index )
   {
      if (index >= 0 && index < sizeOfTemplateDirs ())
      {
         return (URL) this.templateDirs.get (index);
      }
      else
      {
         throw new IllegalArgumentException ("getTemplateDirsAt(" + index + ")" );
      }
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public int indexOfTemplateDirs ( URL value )
   {
      return ((this.templateDirs == null)
              ? -1
              : this.templateDirs.indexOf (value));
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public int indexOfTemplateDirs ( URL value, int index )
   {
      return ((this.templateDirs == null)
   	       ? -1
   	       : this.templateDirs.indexOf (value, index));
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public int lastIndexOfTemplateDirs ( URL value )
   {
      return ((this.templateDirs == null)
               ? -1
               : this.templateDirs.lastIndexOf (value));
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public int lastIndexOfTemplateDirs ( URL value, int index )
   {
      return ((this.templateDirs == null)
               ? -1
               : this.templateDirs.lastIndexOf (value, index));
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public boolean isBeforeOfTemplateDirs ( URL leftObject, URL rightObject)
   {
      if (templateDirs == null)
      {
         return false;
      }
      else
      {
         return templateDirs.isBefore (leftObject, rightObject);
      }
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public boolean isAfterOfTemplateDirs ( URL leftObject, URL rightObject)
   {
      if (templateDirs == null)
      {
         return false;
      }
      else
      {
         return templateDirs.isAfter (leftObject, rightObject);
      }
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public URL getNextOfTemplateDirs ( URL object )
   {
      if (templateDirs == null)
      {
         return null;
      }
      else
      {
         return (URL) templateDirs.getNextOf (object);
      }
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public URL getNextOfTemplateDirs ( URL object, int index)
   {
      if (templateDirs == null)
      {
         return null;
      }
      else
      {
         return (URL) templateDirs.getNextOf (object, index);
      }
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public URL getPreviousOfTemplateDirs ( URL object)
   {
      if (templateDirs == null)
      {
         return null;
      }
      else
      {
         return (URL) templateDirs.getPreviousOf (object);
      }
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public URL getPreviousOfTemplateDirs ( URL object, int index )
   {
      if (templateDirs == null)
      {
         return null;
      }
      else
      {
         return (URL) templateDirs.getPreviousOf (object, index);
      }
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public boolean addAfterOfTemplateDirs ( URL refObject, URL value)
   {
      boolean changed = false;
      if (templateDirs != null)
      {
         int index = templateDirs.indexOf (refObject);
         changed = addToTemplateDirs (index+1, value);
      }
      return changed;
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public boolean addBeforeOfTemplateDirs ( URL refObject, URL value)
   {
      boolean changed = false;
      if (templateDirs != null)
      {
         int index = templateDirs.indexOf (refObject);
         changed = addToTemplateDirs (index, value);
      }
      return changed;
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public boolean addToTemplateDirs (int index, URL value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.templateDirs == null)
         {
            this.templateDirs = new FLinkedList<URL> (); // or FTreeSet () or FLinkedList ()
         }
         int oldIndex = this.indexOfTemplateDirs (value);
         if (oldIndex != index)
         {
            try
            {
            
               if (oldIndex > -1)
               {
                  templateDirs.remove (oldIndex);
               }
               templateDirs.add (index, value);
               changed = true;
            
            }
            catch (IndexOutOfBoundsException ex)
            {
               return false;
            }
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public boolean setInTemplateDirs (int index, URL value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.templateDirs == null)
         {
            this.templateDirs = new FLinkedList<URL> (); // or FTreeSet () or FLinkedList ()
         }
         int oldIndex = this.indexOfTemplateDirs (value);
         if (oldIndex != index)
         {
            try
            {
            
               URL oldValue = (URL)this.templateDirs.set (index, value);
               if (oldIndex > -1)
               {
                  this.templateDirs.remove (oldIndex);
               }
               if (oldValue != value)
               {
                  changed = true;
               }
            
            }
            catch (IndexOutOfBoundsException ex)
            {
               return false;
            }
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public boolean removeFromTemplateDirs (int index)
   {
      boolean changed = false;

      if (this.templateDirs != null && (index >= 0 && index < this.templateDirs.size ()))
      {
      
         URL tmpValue = (URL) this.templateDirs.remove (index);
         if (tmpValue != null)
         {
            changed = true;
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public boolean removeFromTemplateDirs (int index, URL value)
   {
      boolean changed = false;

      if ((this.templateDirs != null) && (value != null) && 
          (index >= 0 && index < this.templateDirs.size ()))
      {
         URL oldValue = (URL) this.templateDirs.get (index);
         if (oldValue == value)
         {
         
            changed = this.removeFromTemplateDirs (index);
         
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public ListIterator<? extends URL> iteratorOfTemplateDirs ( URL  lowerBound )
   {
      ListIterator<URL> result = FEmptyListIterator.<URL>get ();

      if (templateDirs != null && lowerBound != null)
      {
         int index = templateDirs.indexOf (lowerBound) + 1;
         result = templateDirs.listIterator (index);
      }
      else if (templateDirs != null && lowerBound == null)
      {
         result = templateDirs.listIterator (0);
      }

      return result;
   }

   @Property( name = PROPERTY_TEMPLATE_DIRS )
   public ListIterator<? extends URL> iteratorOfTemplateDirs (int index)
   {
      return ((this.templateDirs == null)
              ? FEmptyListIterator.<URL>get ()
              : this.templateDirs.listIterator (Math.max(0,Math.min(index,this.templateDirs.size ()))));
   }

   /**
    * <pre>
    *           0..1     tokenCreators     0..n
    * TokenMutatorTemplateEngine ------------------------- TokenCreationEngine
    *           engine               tokenCreators
    * </pre>
    */
   public static final String PROPERTY_TOKEN_CREATORS = "tokenCreators";

   @Property( name = PROPERTY_TOKEN_CREATORS, partner = TokenCreationEngine.PROPERTY_ENGINE, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FLinkedList<TokenCreationEngine> tokenCreators;

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public List<? extends TokenCreationEngine> getTokenCreators()
   {
      return ((this.tokenCreators == null)
              ? Collections.EMPTY_LIST
              : Collections.unmodifiableList(this.tokenCreators));
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public boolean addToTokenCreators (TokenCreationEngine value)
   {
      boolean changed = false;

      if (value != null && !this.hasInTokenCreators (value))
      {
         if (this.tokenCreators == null)
         {
            this.tokenCreators = new FLinkedList<TokenCreationEngine> ();

         }
      
         changed = this.tokenCreators.add (value);
         if (changed)
         {
            value.setEngine (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public TokenMutatorTemplateEngine withTokenCreators (TokenCreationEngine value)
   {
      addToTokenCreators (value);
      return this;
   }

   public TokenMutatorTemplateEngine withoutTokenCreators (TokenCreationEngine value)
   {
      removeFromTokenCreators (value);
      return this;
   }


   public boolean removeFromTokenCreators (TokenCreationEngine value)
   {
      boolean changed = false;

      if ((this.tokenCreators != null) && (value != null))
      {
      
         changed = this.tokenCreators.remove (value);
         if (changed)
         {
            value.setEngine (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public void removeAllFromTokenCreators (){
   
      TokenCreationEngine tmpValue;
      Iterator<? extends TokenCreationEngine> iter = this.iteratorOfTokenCreators ();
      while (iter.hasNext ())
      {
         tmpValue = (TokenCreationEngine) iter.next ();
         this.removeFromTokenCreators (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public boolean hasInTokenCreators (TokenCreationEngine value)
   {
      return ((this.tokenCreators != null) &&
              (value != null) &&
              this.tokenCreators.contains (value));
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public ListIterator<? extends TokenCreationEngine> iteratorOfTokenCreators ()
   {
      return ((this.tokenCreators == null)
              ? FEmptyListIterator.<TokenCreationEngine>get ()
              : this.tokenCreators.listIterator());
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public int sizeOfTokenCreators ()
   {
      return ((this.tokenCreators == null)
              ? 0
              : this.tokenCreators.size ());
   }
   @Property( name = PROPERTY_TOKEN_CREATORS )
   public TokenCreationEngine getFirstOfTokenCreators ()
   {
      if (tokenCreators == null)
      {
         return null;
      }
      else
      {
         if (tokenCreators.size() == 0) 	 
         { 	 
            return null; 	 
         }
         return (TokenCreationEngine) tokenCreators.getFirst ();
      }
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public TokenCreationEngine getLastOfTokenCreators ()
   {
      if (tokenCreators == null)
      {
         return null;
      }
      else
      {
         if (tokenCreators.size() == 0) 	 
         { 	 
            return null; 	 
         }
         return (TokenCreationEngine) tokenCreators.getLast ();
      }
   }
   @Property( name = PROPERTY_TOKEN_CREATORS )
   public TokenCreationEngine getFromTokenCreators ( int index )
   {
      if (index >= 0 && index < sizeOfTokenCreators ())
      {
         return (TokenCreationEngine) this.tokenCreators.get (index);
      }
      else
      {
         throw new IllegalArgumentException ("getTokenCreatorsAt(" + index + ")" );
      }
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public int indexOfTokenCreators ( TokenCreationEngine value )
   {
      return ((this.tokenCreators == null)
              ? -1
              : this.tokenCreators.indexOf (value));
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public int indexOfTokenCreators ( TokenCreationEngine value, int index )
   {
      return ((this.tokenCreators == null)
   	       ? -1
   	       : this.tokenCreators.indexOf (value, index));
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public int lastIndexOfTokenCreators ( TokenCreationEngine value )
   {
      return ((this.tokenCreators == null)
               ? -1
               : this.tokenCreators.lastIndexOf (value));
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public int lastIndexOfTokenCreators ( TokenCreationEngine value, int index )
   {
      return ((this.tokenCreators == null)
               ? -1
               : this.tokenCreators.lastIndexOf (value, index));
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public boolean isBeforeOfTokenCreators ( TokenCreationEngine leftObject, TokenCreationEngine rightObject)
   {
      if (tokenCreators == null)
      {
         return false;
      }
      else
      {
         return tokenCreators.isBefore (leftObject, rightObject);
      }
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public boolean isAfterOfTokenCreators ( TokenCreationEngine leftObject, TokenCreationEngine rightObject)
   {
      if (tokenCreators == null)
      {
         return false;
      }
      else
      {
         return tokenCreators.isAfter (leftObject, rightObject);
      }
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public TokenCreationEngine getNextOfTokenCreators ( TokenCreationEngine object )
   {
      if (tokenCreators == null)
      {
         return null;
      }
      else
      {
         return (TokenCreationEngine) tokenCreators.getNextOf (object);
      }
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public TokenCreationEngine getNextOfTokenCreators ( TokenCreationEngine object, int index)
   {
      if (tokenCreators == null)
      {
         return null;
      }
      else
      {
         return (TokenCreationEngine) tokenCreators.getNextOf (object, index);
      }
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public TokenCreationEngine getPreviousOfTokenCreators ( TokenCreationEngine object)
   {
      if (tokenCreators == null)
      {
         return null;
      }
      else
      {
         return (TokenCreationEngine) tokenCreators.getPreviousOf (object);
      }
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public TokenCreationEngine getPreviousOfTokenCreators ( TokenCreationEngine object, int index )
   {
      if (tokenCreators == null)
      {
         return null;
      }
      else
      {
         return (TokenCreationEngine) tokenCreators.getPreviousOf (object, index);
      }
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public boolean addAfterOfTokenCreators ( TokenCreationEngine refObject, TokenCreationEngine value)
   {
      boolean changed = false;
      if (tokenCreators != null)
      {
         int index = tokenCreators.indexOf (refObject);
         changed = addToTokenCreators (index+1, value);
      }
      return changed;
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public boolean addBeforeOfTokenCreators ( TokenCreationEngine refObject, TokenCreationEngine value)
   {
      boolean changed = false;
      if (tokenCreators != null)
      {
         int index = tokenCreators.indexOf (refObject);
         changed = addToTokenCreators (index, value);
      }
      return changed;
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public boolean addToTokenCreators (int index, TokenCreationEngine value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.tokenCreators == null)
         {
            this.tokenCreators = new FLinkedList<TokenCreationEngine> (); // or FTreeSet () or FLinkedList ()
         }
         int oldIndex = this.indexOfTokenCreators (value);
         if (oldIndex != index)
         {
            try
            {
            
               if (oldIndex > -1)
               {
                  tokenCreators.remove (oldIndex);
               }
               tokenCreators.add (index, value);
               if (oldIndex < 0)
               {
                  value.setEngine (this);
               }
               changed = true;
            
            }
            catch (IndexOutOfBoundsException ex)
            {
               return false;
            }
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public boolean setInTokenCreators (int index, TokenCreationEngine value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.tokenCreators == null)
         {
            this.tokenCreators = new FLinkedList<TokenCreationEngine> (); // or FTreeSet () or FLinkedList ()
         }
         int oldIndex = this.indexOfTokenCreators (value);
         if (oldIndex != index)
         {
            try
            {
            
               TokenCreationEngine oldValue = (TokenCreationEngine)this.tokenCreators.set (index, value);
               if (oldIndex > -1)
               {
                  this.tokenCreators.remove (oldIndex);
               }
               if (oldValue != value)
               {
                  if (oldValue != null)
                  {
                     oldValue.setEngine (null);
                  }
                  if (oldIndex < 0)
                  {
                     value.setEngine (this);
                  }
                  changed = true;
               }
            
            }
            catch (IndexOutOfBoundsException ex)
            {
               return false;
            }
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public boolean removeFromTokenCreators (int index)
   {
      boolean changed = false;

      if (this.tokenCreators != null && (index >= 0 && index < this.tokenCreators.size ()))
      {
      
         TokenCreationEngine tmpValue = (TokenCreationEngine) this.tokenCreators.remove (index);
         if (tmpValue != null)
         {
            tmpValue.setEngine (null);
            changed = true;
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public boolean removeFromTokenCreators (int index, TokenCreationEngine value)
   {
      boolean changed = false;

      if ((this.tokenCreators != null) && (value != null) && 
          (index >= 0 && index < this.tokenCreators.size ()))
      {
         TokenCreationEngine oldValue = (TokenCreationEngine) this.tokenCreators.get (index);
         if (oldValue == value)
         {
         
            changed = this.removeFromTokenCreators (index);
         
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public ListIterator<? extends TokenCreationEngine> iteratorOfTokenCreators ( TokenCreationEngine  lowerBound )
   {
      ListIterator<TokenCreationEngine> result = FEmptyListIterator.<TokenCreationEngine>get ();

      if (tokenCreators != null && lowerBound != null)
      {
         int index = tokenCreators.indexOf (lowerBound) + 1;
         result = tokenCreators.listIterator (index);
      }
      else if (tokenCreators != null && lowerBound == null)
      {
         result = tokenCreators.listIterator (0);
      }

      return result;
   }

   @Property( name = PROPERTY_TOKEN_CREATORS )
   public ListIterator<? extends TokenCreationEngine> iteratorOfTokenCreators (int index)
   {
      return ((this.tokenCreators == null)
              ? FEmptyListIterator.<TokenCreationEngine>get ()
              : this.tokenCreators.listIterator (Math.max(0,Math.min(index,this.tokenCreators.size ()))));
   }

   /**
    * <pre>
    *           0..1     treeMutators     0..n
    * TokenMutatorTemplateEngine ------------------------- TokenTreeMutatorEngine
    *           engine               treeMutators
    * </pre>
    */
   public static final String PROPERTY_TREE_MUTATORS = "treeMutators";

   @Property( name = PROPERTY_TREE_MUTATORS, partner = TokenTreeMutatorEngine.PROPERTY_ENGINE, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashSet<TokenTreeMutatorEngine> treeMutators;

   @Property( name = PROPERTY_TREE_MUTATORS )
   public Set<? extends TokenTreeMutatorEngine> getTreeMutators()
   {
      return ((this.treeMutators == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.treeMutators));
   }

   @Property( name = PROPERTY_TREE_MUTATORS )
   public boolean addToTreeMutators (TokenTreeMutatorEngine value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.treeMutators == null)
         {
            this.treeMutators = new FHashSet<TokenTreeMutatorEngine> ();

         }
      
         changed = this.treeMutators.add (value);
         if (changed)
         {
            value.setEngine (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TREE_MUTATORS )
   public TokenMutatorTemplateEngine withTreeMutators (TokenTreeMutatorEngine value)
   {
      addToTreeMutators (value);
      return this;
   }

   public TokenMutatorTemplateEngine withoutTreeMutators (TokenTreeMutatorEngine value)
   {
      removeFromTreeMutators (value);
      return this;
   }


   public boolean removeFromTreeMutators (TokenTreeMutatorEngine value)
   {
      boolean changed = false;

      if ((this.treeMutators != null) && (value != null))
      {
      
         changed = this.treeMutators.remove (value);
         if (changed)
         {
            value.setEngine (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TREE_MUTATORS )
   public void removeAllFromTreeMutators (){
   
      TokenTreeMutatorEngine tmpValue;
      Iterator<? extends TokenTreeMutatorEngine> iter = this.iteratorOfTreeMutators ();
      while (iter.hasNext ())
      {
         tmpValue = (TokenTreeMutatorEngine) iter.next ();
         this.removeFromTreeMutators (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_TREE_MUTATORS )
   public boolean hasInTreeMutators (TokenTreeMutatorEngine value)
   {
      return ((this.treeMutators != null) &&
              (value != null) &&
              this.treeMutators.contains (value));
   }

   @Property( name = PROPERTY_TREE_MUTATORS )
   public Iterator<? extends TokenTreeMutatorEngine> iteratorOfTreeMutators ()
   {
      return ((this.treeMutators == null)
              ? FEmptyIterator.<TokenTreeMutatorEngine>get ()
              : this.treeMutators.iterator ());
   }

   @Property( name = PROPERTY_TREE_MUTATORS )
   public int sizeOfTreeMutators ()
   {
      return ((this.treeMutators == null)
              ? 0
              : this.treeMutators.size ());
   }

   public void removeYou()
   {
      this.removeAllFromCodeWriter ();
      this.removeAllFromTemplateDirs ();
      this.removeAllFromTokenCreators ();
      this.removeAllFromTreeMutators ();
      super.removeYou ();
   }
}


