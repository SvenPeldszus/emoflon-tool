/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.dlr;
import java.util.Iterator;
import java.util.Map;

import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_paderborn.fujaba.metamodel.common.FElement;
import de.uni_paderborn.fujaba.metamodel.common.FProject;
import de.upb.tools.fca.FEmptyIterator;
import de.upb.tools.fca.FHashMap; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDM; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDMException;


public class DLRTool
{


   private  DLRTool ()
   {
   }

   public static final String PROPERTY_EXPORTDLR = "exportDLR";

   @Property( name = PROPERTY_EXPORTDLR, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private boolean exportDLR = false;

   @Property( name = PROPERTY_EXPORTDLR )
   public void setExportDLR (boolean value)
   {
      this.exportDLR = value;
   }

   public DLRTool withExportDLR (boolean value)
   {
      setExportDLR (value);
      return this;
   }

   @Property( name = PROPERTY_EXPORTDLR )
   public boolean isExportDLR ()
   {
      return this.exportDLR;
   }

   public DLRToken findTokenByLine (FProject project , String file , int line )
   {
      boolean fujaba__Success = false;
      DLRToken token = null;
      DLRToken current = null;
      Iterator fujaba__IterCurrentToChild = null;
      Object _TmpObject = null;
      DLRToken child = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         token = findToken( project , file);

         // check object token is really bound
         JavaSDM.ensure ( token != null );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return null;

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         current = token;

         // check object current is really bound
         JavaSDM.ensure ( current != null );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      while( true )
      {
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // check object current is really bound
            JavaSDM.ensure ( current != null );
            // iterate to-many link children from current to child
            fujaba__Success = false;
            fujaba__IterCurrentToChild = current.iteratorOfChildren ();

            while ( !(fujaba__Success) && fujaba__IterCurrentToChild.hasNext () )
            {
               try
               {
                  _TmpObject =  fujaba__IterCurrentToChild.next ();

                  // ensure correct type and really bound of object child
                  JavaSDM.ensure ( _TmpObject instanceof DLRToken );
                  child = (DLRToken) _TmpObject;

                  // check isomorphic binding between objects current and child
                  JavaSDM.ensure ( !current.equals (child) );

                  // attribute condition endLine >= line
                  JavaSDM.ensure ( child.getEndLine () >= line );

                  // attribute condition startLine <= line
                  JavaSDM.ensure ( child.getStartLine () <= line );


                  fujaba__Success = true;
               }
               catch ( JavaSDMException fujaba__InternalException )
               {
                  fujaba__Success = false;
               }
            }
            JavaSDM.ensure (fujaba__Success);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }



      	// loop termination check 
      	if ( !( fujaba__Success ) )
      	{
      		break;
      	}
	
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            current = child;

            // check object current is really bound
            JavaSDM.ensure ( current != null );
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }


      }
      return current;
   }

   public DLRToken findTokenByOffset (FProject project , String file , int offset )
   {
      boolean fujaba__Success = false;
      DLRToken token = null;
      DLRToken current = null;
      Iterator fujaba__IterCurrentToChild = null;
      Object _TmpObject = null;
      DLRToken child = null;

      // story pattern 
      try 
      {
         fujaba__Success = false; 

         token = findToken( project , file);

         // check object token is really bound
         JavaSDM.ensure ( token != null );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return null;

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         current = token;

         // check object current is really bound
         JavaSDM.ensure ( current != null );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      while( true )
      {
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // check object current is really bound
            JavaSDM.ensure ( current != null );
            // iterate to-many link children from current to child
            fujaba__Success = false;
            fujaba__IterCurrentToChild = current.iteratorOfChildren ();

            while ( !(fujaba__Success) && fujaba__IterCurrentToChild.hasNext () )
            {
               try
               {
                  _TmpObject =  fujaba__IterCurrentToChild.next ();

                  // ensure correct type and really bound of object child
                  JavaSDM.ensure ( _TmpObject instanceof DLRToken );
                  child = (DLRToken) _TmpObject;

                  // check isomorphic binding between objects current and child
                  JavaSDM.ensure ( !current.equals (child) );

                  // attribute condition offset <= offset
                  JavaSDM.ensure ( child.getOffset () <= offset );

                  // constraint offset < child.getOffset() + child.getLength()
                  JavaSDM.ensure ( offset < child.getOffset() + child.getLength() );

                  fujaba__Success = true;
               }
               catch ( JavaSDMException fujaba__InternalException )
               {
                  fujaba__Success = false;
               }
            }
            JavaSDM.ensure (fujaba__Success);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }



      	// loop termination check 
      	if ( !( fujaba__Success ) )
      	{
      		break;
      	}
	
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            current = child;

            // check object current is really bound
            JavaSDM.ensure ( current != null );
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }


      }
      return current;
   }

   public DLRToken findToken (FElement elem )
   {
      boolean fujaba__Success = false;
      DLRToken token = null;
      Iterator fujaba__IterProjToRef = null;
      ElementReference ref = null;
      DLRProjectToken proj = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // search to-one link projects from this to proj
         proj = this.getFromProjects (elem.getProject());

         // check object proj is really bound
         JavaSDM.ensure ( proj != null );

         // iterate to-many link elementsRefs from proj to ref
         fujaba__Success = false;
         fujaba__IterProjToRef = proj.iteratorOfElementReference (elem);

         while ( !(fujaba__Success) && fujaba__IterProjToRef.hasNext () )
         {
            try
            {
               ref = (ElementReference) fujaba__IterProjToRef.next ();

               // check object ref is really bound
               JavaSDM.ensure ( ref != null );
               // search to-one link elements from ref to token
               token = ref.getToken ();

               // check object token is really bound
               JavaSDM.ensure ( token != null );

               // check isomorphic binding between objects token and proj
               JavaSDM.ensure ( !token.equals (proj) );



               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return token;

      }
      return null;
   }

   public DLRToken findToken (FProject project , String file )
   {
      boolean fujaba__Success = false;
      Iterator fujaba__IterProjTokenToFileToken = null;
      Object _TmpObject = null;
      DLRFileToken fileToken = null;
      DLRProjectToken projToken = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // search to-one link projects from this to projToken
         projToken = this.getFromProjects (project);

         // check object projToken is really bound
         JavaSDM.ensure ( projToken != null );

         // iterate to-many link children from projToken to fileToken
         fujaba__Success = false;
         fujaba__IterProjTokenToFileToken = projToken.iteratorOfChildren ();

         while ( !(fujaba__Success) && fujaba__IterProjTokenToFileToken.hasNext () )
         {
            try
            {
               _TmpObject =  fujaba__IterProjTokenToFileToken.next ();

               // ensure correct type and really bound of object fileToken
               JavaSDM.ensure ( _TmpObject instanceof DLRFileToken );
               fileToken = (DLRFileToken) _TmpObject;

               // constraint JavaSDM.stringEquals(file, fileToken.getFullFileName())
               JavaSDM.ensure ( JavaSDM.stringEquals(file, fileToken.getFullFileName()) );

               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return null;

      }
      return fileToken;
   }

   public static final String PROPERTY_GENERATESMAP = "generateSMAP";

   @Property( name = PROPERTY_GENERATESMAP, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private boolean generateSMAP = false;

   @Property( name = PROPERTY_GENERATESMAP )
   public void setGenerateSMAP (boolean value)
   {
      this.generateSMAP = value;
   }

   public DLRTool withGenerateSMAP (boolean value)
   {
      setGenerateSMAP (value);
      return this;
   }

   @Property( name = PROPERTY_GENERATESMAP )
   public boolean isGenerateSMAP ()
   {
      return this.generateSMAP;
   }

   public FElement getElementForID (long id , FProject proj )
   {
      boolean fujaba__Success = false;
      FElement elem = null;
      Iterator fujaba__IterTokenToRef = null;
      ElementReference ref = null;
      DLRToken token = null;
      DLRProjectToken projToken = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // search to-one link projects from this to projToken
         projToken = this.getFromProjects (proj);

         // check object projToken is really bound
         JavaSDM.ensure ( projToken != null );

         // search to-one link tokenByID from projToken to token
         token = projToken.getFromTokenByID (id);

         // check object token is really bound
         JavaSDM.ensure ( token != null );

         // check isomorphic binding between objects token and projToken
         JavaSDM.ensure ( !token.equals (projToken) );

         // iterate to-many link elements from token to ref
         fujaba__Success = false;
         fujaba__IterTokenToRef = token.iteratorOfElements ();

         while ( !(fujaba__Success) && fujaba__IterTokenToRef.hasNext () )
         {
            try
            {
               ref = (ElementReference) fujaba__IterTokenToRef.next ();

               // check object ref is really bound
               JavaSDM.ensure ( ref != null );
               // search to-one link element from ref to elem
               elem = ref.getElement ();

               // check object elem is really bound
               JavaSDM.ensure ( elem != null );



               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);


         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return elem;
   }

   public long getIDForElement (FElement elem )
   {
      boolean fujaba__Success = false;
      DLRToken token = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         token = findToken (elem);

         // check object token is really bound
         JavaSDM.ensure ( token != null );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return token.getId();

      }
      return -1;
   }

   public static DLRTool get ()
   {
      boolean fujaba__Success = false;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object instance is really bound
         JavaSDM.ensure ( instance != null );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return instance;

      }
      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         instance = new DLRTool();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return instance;
   }

   public static final String PROPERTY_INCLUDEDLR = "includeDLR";

   @Property( name = PROPERTY_INCLUDEDLR, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private boolean includeDLR = false;

   @Property( name = PROPERTY_INCLUDEDLR )
   public void setIncludeDLR (boolean value)
   {
      this.includeDLR = value;
   }

   public DLRTool withIncludeDLR (boolean value)
   {
      setIncludeDLR (value);
      return this;
   }

   @Property( name = PROPERTY_INCLUDEDLR )
   public boolean isIncludeDLR ()
   {
      return this.includeDLR;
   }

   public static final String PROPERTY_INSTANCE = "instance";

   @Property( name = PROPERTY_INSTANCE, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   public static DLRTool instance;


   /**
    * <pre>
    *           0..1     projects     0..1
    * DLRTool ------------------------> DLRProjectToken
    *           dLRTool               projects
    * </pre>
    */
   public static final String PROPERTY_PROJECTS = "projects";

   @Property( name = PROPERTY_PROJECTS, kind = ReferenceHandler.ReferenceKind.QUALIFIED_TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashMap<FProject, DLRProjectToken> projects;

   @Property( name = PROPERTY_PROJECTS )

   public boolean removeFromProjects (DLRProjectToken value)
   {
      boolean changed = false;

      if (this.projects != null)
      {
         Iterator iter = this.entriesOfProjects ();
         Map.Entry entry;
         while (iter.hasNext ())
         {
            entry = (Map.Entry) iter.next ();
            if (entry.getValue () == value)
            {
            
               if (this.removeFromProjects ((FProject) entry.getKey (), value))
               {
                  changed = true;
               }
            
            }
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_PROJECTS )
   public void removeAllFromProjects (){
      if (this.projects != null && this.projects.size () > 0)
      {
      
         this.projects.clear();
      
      }
   }

   @Property( name = PROPERTY_PROJECTS )
   public boolean hasInProjects (DLRProjectToken value)
   {
      return ((this.projects != null) &&
              this.projects.containsValue (value));
   }

   @Property( name = PROPERTY_PROJECTS )
   public Iterator<? extends DLRProjectToken> iteratorOfProjects ()
   {
      return ((this.projects == null)
              ? FEmptyIterator.<DLRProjectToken>get ()
              : this.projects.values ().iterator ());
   }

   @Property( name = PROPERTY_PROJECTS )
   public int sizeOfProjects ()
   {
      return ((this.projects == null)
              ? 0
              : this.projects.size ());
   }

   @Property( name = PROPERTY_PROJECTS )
   public boolean hasInProjects (FProject key, DLRProjectToken value)
   {
      return ((this.projects != null) &&
              (value != null || this.projects.containsKey (key)) && 
              (this.projects.get (key) == value));
   }

   @Property( name = PROPERTY_PROJECTS )
   public boolean hasKeyInProjects (FProject key)
   {
      return ((this.projects != null) &&
              this.projects.containsKey (key));
   }

   @Property( name = PROPERTY_PROJECTS )
   public Iterator<FProject> keysOfProjects ()
   {
      return ((this.projects == null)
              ? FEmptyIterator.<FProject>get ()
              : this.projects.keySet ().iterator ());
   }

   @Property( name = PROPERTY_PROJECTS )
   public Iterator entriesOfProjects ()
   {
      return ((this.projects == null)
              ? FEmptyIterator.get ()
              : this.projects.entrySet ().iterator ());
   }

   @Property( name = PROPERTY_PROJECTS )
   public boolean addToProjects (FProject key, DLRProjectToken value)
   {
      boolean changed = false;

      if (this.projects == null)
      {
         this.projects = new FHashMap<FProject, DLRProjectToken> ();
      }
   
      DLRProjectToken oldValue = (DLRProjectToken) this.projects.put (key, value);
      if (oldValue != value)
      {
         changed = true;
      }
   
      return changed;
   }

   @Property( name = PROPERTY_PROJECTS )
   public boolean addToProjects (Map.Entry entry)
   {
      return addToProjects ((FProject) entry.getKey (), (DLRProjectToken) entry.getValue ());
   }

   @Property( name = PROPERTY_PROJECTS )
   public boolean removeFromProjects (FProject key, DLRProjectToken value)
   {
      boolean changed = false;

      if (this.projects != null)
      {
         DLRProjectToken oldValue = (DLRProjectToken) this.projects.get (key);
         if (oldValue == value && 
             (oldValue != null || this.projects.containsKey (key)))
         {
         
            this.projects.remove (key);
            changed = true;
         
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_PROJECTS )
   public boolean removeKeyFromProjects (FProject key)
   {
      boolean changed = false;

      if (this.projects != null)
      {
         changed = this.projects.containsKey (key);
         if (changed)
         {
         
            DLRProjectToken tmpValue = (DLRProjectToken) this.projects.remove (key);
         
         }
      }
      return changed;
   }
   @Property( name = PROPERTY_PROJECTS )
   public DLRProjectToken getFromProjects (FProject key)
   {
      return ((this.projects == null)
              ? null
              : (DLRProjectToken) this.projects.get (key));
   }

   /**
    * <pre>
    *           0..1     current     0..1
    * DLRTool ------------------------> DLRToken
    *           fileDLRCodeWriter               token
    * </pre>
    */
   public static final String PROPERTY_TOKEN = "token";

   @Property( name = PROPERTY_TOKEN, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private DLRToken token;

   @Property( name = PROPERTY_TOKEN )
   public boolean setToken (DLRToken value)
   {
      boolean changed = false;

      if (this.token != value)
      {
      
         DLRToken oldValue = this.token;
         this.token = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TOKEN )
   public DLRTool withToken (DLRToken value)
   {
      setToken (value);
      return this;
   }

   public DLRToken getToken ()
   {
      return this.token;
   }

   public void removeYou()
   {
      this.removeAllFromProjects ();
      this.setToken (null);
   }
}


