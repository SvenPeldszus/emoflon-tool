/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.rules.engine;
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_paderborn.fujaba.metamodel.structure.FCardinality;
import de.uni_paderborn.fujaba.metamodel.structure.FRole;
import de.uni_paderborn.fujaba.uml.behavior.UMLLink;
import de.uni_paderborn.fujaba.uml.behavior.UMLObject;
import de.upb.tools.sdm.JavaSDM; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.JavaSDMException;


public class DefaultPayloadStrategy extends PayloadStrategy
{


   public static final String PROPERTY_AV_G_UPPE_R_BOUND = "AVG_UPPER_BOUND";

   @Property( name = PROPERTY_AV_G_UPPE_R_BOUND, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   public static final double AVG_UPPER_BOUND = 50;


   public double getPayload (UMLLink link , UMLObject source , UMLObject target )
   {
      boolean fujaba__Success = false;
      FRole role = null;
      FCardinality card = null;
      int lower = 0;
      double upper = 0.0;
      double payload = 0.0;

      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         role = link.getCorrespondingRole (target);

         // check object role is really bound
         JavaSDM.ensure ( role != null );
         // search to-one link card from role to card
         card = role.getCard ();

         // check object card is really bound
         JavaSDM.ensure ( card != null );


         // collabStat call
         lower = card.getLowerBound ();
         // collabStat call
         upper = card.getUpperBound ();
         // collabStat call
         if ( upper==Integer.MAX_VALUE )
         {
         upper = AVG_UPPER_BOUND;
         }
         // collabStat call
         payload = (upper + lower)*0.5;
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( fujaba__Success )
      {
         return payload;

      }
      getEngine ().error ("Role without cardinality", role);
      return -1;
   }

   public boolean isResponsible (UMLLink link , UMLObject target )
   {

      return true;
   }

}


