/*
 * generated by Fujaba - CodeGen2
 */
package de.uni_kassel.fujaba.codegen.rules.engine;
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_paderborn.fujaba.metamodel.structure.FType;


public class LocalVariable
{


   public static final String PROPERTY_DEFAULT_VALUE = "defaultValue";

   @Property( name = PROPERTY_DEFAULT_VALUE, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String defaultValue;

   @Property( name = PROPERTY_DEFAULT_VALUE )
   public void setDefaultValue (String value)
   {
      this.defaultValue = value;
   }

   public LocalVariable withDefaultValue (String value)
   {
      setDefaultValue (value);
      return this;
   }

   @Property( name = PROPERTY_DEFAULT_VALUE )
   public String getDefaultValue ()
   {
      return this.defaultValue;
   }

   /**
    * <pre>
    *           0..1     localVars     0..1
    * LocalVariable ------------------------- LocalVariableInformation
    *           localVars               localVariableInformation
    * </pre>
    */
   public static final String PROPERTY_LOCAL_VARIABLE_INFORMATION = "localVariableInformation";

   @Property( name = PROPERTY_LOCAL_VARIABLE_INFORMATION, partner = LocalVariableInformation.PROPERTY_LOCAL_VARS, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private LocalVariableInformation localVariableInformation;

   @Property( name = PROPERTY_LOCAL_VARIABLE_INFORMATION )
   public boolean setLocalVariableInformation (LocalVariableInformation value)
   {
      boolean changed = false;

      if (this.localVariableInformation != value)
      {
      
         LocalVariableInformation oldValue = this.localVariableInformation;
         LocalVariable source = this;
         if (this.localVariableInformation != null)
         {
            this.localVariableInformation = null;
            oldValue.removeFromLocalVars (this);
         }
         this.localVariableInformation = value;

         if (value != null)
         {
            value.addToLocalVars (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_LOCAL_VARIABLE_INFORMATION )
   public LocalVariable withLocalVariableInformation (LocalVariableInformation value)
   {
      setLocalVariableInformation (value);
      return this;
   }

   public LocalVariableInformation getLocalVariableInformation ()
   {
      return this.localVariableInformation;
   }

   public static final String PROPERTY_NAME = "name";

   @Property( name = PROPERTY_NAME, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String name;

   @Property( name = PROPERTY_NAME )
   public void setName (String value)
   {
      this.name = value;
   }

   public LocalVariable withName (String value)
   {
      setName (value);
      return this;
   }

   @Property( name = PROPERTY_NAME )
   public String getName ()
   {
      return this.name;
   }

   public static final String PROPERTY_TYPE_NAME = "typeName";

   @Property( name = PROPERTY_TYPE_NAME, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String typeName;

   @Property( name = PROPERTY_TYPE_NAME )
   public void setTypeName (String value)
   {
      this.typeName = value;
   }

   public LocalVariable withTypeName (String value)
   {
      setTypeName (value);
      return this;
   }

   @Property( name = PROPERTY_TYPE_NAME )
   public String getTypeName ()
   {
      return this.typeName;
   }

   /**
    * <pre>
    *           0..1     type     0..1
    * LocalVariable ------------------------> FType
    *           localVariable               type
    * </pre>
    */
   public static final String PROPERTY_TYPE = "type";

   @Property( name = PROPERTY_TYPE, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private FType type;

   @Property( name = PROPERTY_TYPE )
   public boolean setType (FType value)
   {
      boolean changed = false;

      if (this.type != value)
      {
      
         FType oldValue = this.type;
         this.type = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TYPE )
   public LocalVariable withType (FType value)
   {
      setType (value);
      return this;
   }

   public FType getType ()
   {
      return this.type;
   }

   public void removeYou()
   {
      this.setLocalVariableInformation (null);
      this.setType (null);
   }
}


