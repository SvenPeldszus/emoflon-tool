opposites {
	
	//	By setting pairs of independent, undirectional references as opposites of one another,
	//		each statement creates a bidirectional association, meaning that when a reference
	//		on one side is updated, the other must be updated accordingly. In other words, 
	//		these pairs will always be synchronized.

	figure : Floor <-> floor : Figure
	floors : Board <-> board : Floor
	left : Floor <-> right : Floor
	top : Floor <-> bottom : Floor
}