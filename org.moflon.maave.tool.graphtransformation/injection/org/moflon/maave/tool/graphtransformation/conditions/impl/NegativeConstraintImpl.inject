
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphMorphisms.SymbolicGraphMorphism;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphMorphisms.SymbolicGraphMorphismsFactory;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingUtils.Status;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingFactory;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MorphismFinderFactory;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MorphismsSet;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingUtils.MatchingUtilsFactory;

partial class NegativeConstraintImpl {



@model isConsistent (SymbolicGraph graphG) <--

      MorphismFinderFactory morFinderFac = MatchingFactory.eINSTANCE.createMorphismFinderFactory();
      Status status = MatchingUtilsFactory.eINSTANCE.createStatus();
      status.setValid(true);

      for (SymbolicGraph atomicconstraintC : this.getAtomicNegativeConstraints())
      {
         SymbolicGraphMorphism partialMorC_G = SymbolicGraphMorphismsFactory.eINSTANCE.createSymbolicGraphMorphism();
         partialMorC_G.setDom(atomicconstraintC);
         partialMorC_G.setCodom(graphG);
         MorphismsSet morSetC_G = morFinderFac.createMorphismFinder(atomicconstraintC, this.getMorphismClass()).getAllMorphisms(partialMorC_G);
         if (morSetC_G.getMorphisms().size() > 0)
         {
            status.setValid(false);
            return status;
         }
      }
      return status;
-->

}