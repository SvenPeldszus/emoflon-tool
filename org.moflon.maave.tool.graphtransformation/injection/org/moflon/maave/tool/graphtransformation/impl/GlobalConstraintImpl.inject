
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphs.Condition;
import org.moflon.maave.tool.maaveutil.MaaveutilFactory;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphMorphisms.SymbolicGraphMorphism;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphMorphisms.SymbolicGraphMorphismsFactory;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.IMorphismFinder;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingFactory;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MorphismFinderFactory;

partial class GlobalConstraintImpl {



@model isConsistent (SymbolicGraph graphG) <--

      MorphismFinderFactory morFinderFac = MatchingFactory.eINSTANCE.createMorphismFinderFactory();
      Status status = MaaveutilFactory.eINSTANCE.createStatus();
      status.setValid(true);
      for (Condition cond : this.getConstraints())
      {
         SymbolicGraph graphP=cond.getGraphP();
         SymbolicGraphMorphism morP_G = SymbolicGraphMorphismsFactory.eINSTANCE.createSymbolicGraphMorphism();
         morP_G.setDom(graphP);
         morP_G.setCodom(graphG);
         if(cond.isSat(morP_G, matchMorphismClass)==false)
         {
            status.setValid(false);
            return status;
         }
      }
         
      return status;
-->

}