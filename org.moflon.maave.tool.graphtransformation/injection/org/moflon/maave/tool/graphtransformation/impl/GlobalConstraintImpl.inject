
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphs.Condition;
import org.moflon.maave.tool.maaveutil.MaaveutilFactory;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphMorphisms.SymbolicGraphMorphism;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphMorphisms.SymbolicGraphMorphismsFactory;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.IMorphismFinder;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingFactory;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MorphismFinderFactory;

partial class GlobalConstraintImpl {



@model isConsistent (SymbolicGraph graphG) <--

      MorphismFinderFactory morFinderFac = MatchingFactory.eINSTANCE.createMorphismFinderFactory();
      Status status = MaaveutilFactory.eINSTANCE.createStatus();
      status.setValid(true);
      for (SymbolicGraph graphP : this.getConditions())
      {
         IMorphismFinder morFinderForP = morFinderFac.createMorphismFinder(graphP, this.getMatchMorphismClass());
         SymbolicGraphMorphism emptyMorP_G = SymbolicGraphMorphismsFactory.eINSTANCE.createSymbolicGraphMorphism();
         emptyMorP_G.setDom(graphP);
         emptyMorP_G.setCodom(graphG);
         for (SymbolicGraphMorphism morP_G : morFinderForP.getAllMorphisms(emptyMorP_G).getMorphisms())
         {
            for (Condition cond : graphP.getConditions())
            {
               if (cond.isSat(morP_G, this.getMatchMorphismClass()) == false)
               {

                  status.setValid(false);
                  return status;
               }
            }
         }
      }
      return status;
-->

}