pattern moveFigure {

	// Patterns are a declarative, rule-based approach to transforming models, 
	//	meaning that you do not have to specify exactly HOW or
	// 	in which order changes should take place. Pattern-matching 
	//	is entirely non-deterministic, using black, green, and red 
	//	operators to indicate elements that should be matched (checked to 
	//	exist), created, or destroyed upon pattern execution. Patterns also
	// 	manipulate binding states to determine whether or not an element's 
	//	value was fixed beforehand.


	// Free variable able to match to ANY Floor instance
	oldFloor : Floor

	@floor : Floor
	
	// NAC that will force pattern to fail if bounded 'floor' already has a Figure on it.
	! occupyingFigure : Figure { 
		-floor-> floor
	}
	
	// Variable bounded to invoking Figure element; 
	//	Updates reference between current and target Floor
	@this : Figure { 
		-- -floor-> oldFloor
		++ -floor-> floor
	}

}