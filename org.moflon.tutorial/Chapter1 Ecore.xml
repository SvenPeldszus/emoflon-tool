<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE cheatsheet SYSTEM "cheatSheetFormat.dtd">
<cheatsheet
      title="Chapter 1 - Ecore">
   <intro>
<description>
         Welcome to Chapter 1, where you&apos;ll learn how to make an Ecore model of Sokoban,
         including any needed classes, attributes, references, and method signatures.  
         You are encouraged to download and read Part II of the eMoflon handbook for more details on creating models 
         after working through this chapter.<br/>
         
         <br/>
         Before anything else, please make sure you&apos;re starting this tutorial with an
         empty workspace. Although eMoflon projects work perfectly fine in a workspace
         together with any other projects, experimenting with our textual syntax for the first
         time will be much simpler this way.<br/>
         
         <br/>
         Enough chatting - Let&apos;s get started!
      </description>
   </intro>
   <item
         title="Step 1 - Getting started">
      <description>
       <br/>
         To start, navigate to:
         <br/>
         &quot;Window / Open Perspective / Other... / eMoflon / Ok&quot;<br/>
         
         <br/>
         Your toolbar should refresh and show some new buttons. The most important ones
         for us right now are <b>Create new  meta-model</b> and <b>Build</b>. 
         Make sure you&apos;re able to find these in the toolbar.<br/>
         
         <br/>
         Next, click the small upside-down arrow at the top right of your Package
         Explorer and switch <b>Top Level Elements</b> to <b>Working Sets.</b>
         These working sets are used to structure your workspace.<br/>
         
		 <br/>
         Create a new project by pressing <b>Create new meta-model.</b> Name it 
         <b>SokobanTutorial</b>, and select <b>Textual (MOSL)</b> as its concrete syntax. 
         Do not select &quot;Add Demo Specification.&quot; <br/>
         
         <br/>
         Inspect the new &quot;Specifications&quot; working set in the package explorer and expand the tree
         until you reach <b>MyWorkingSet.</b>
         Right-click this and choose &quot;New / EPackage&quot;.  Name this package 
         <b>SokobanLanguage</b>. This folder is where all files needed to model
         Sokoban will be stored.<br/>
         
         <br/>
         To finish initializing your language as an Ecore model, press 
         <b>Build</b> in the toolbar.
         To generate code for the newly created Java project <b>SokobanLanguage</b> in your workspace, choose it and also press <b>Build</b>.
         Please note that the building process can last quite a few seconds depending on
         your hardware.<br/>
         
         <br/>
         <b>Note:</b> If you&apos;re ever feeling lazy and just want to see the results of each step
         without doing anything, you can always take a shortcut by pressing 
         <b>Click To Proceed</b> at the end of most steps (such as this step). At this point, the 
         tutorial will overwrite any files with the same name and load the solution for the
         current step into your workspace. Feel free to press this button anyway and review 
         the comments and explanations in the new files. These provide more detail than
         what we&apos;re able to include in these short instruction sets.<br/>
         
         <br/>
         If your build was successful, you&apos;re ready to start modelling!
      </description>
      <action class = "org.moflon.tutorial.actions.CopyResourceToProject" pluginId = "org.moflon.CheatSheetTutorial"
         required = "false"
      param1 = "resources/tutorial-Sokoban/Chapter1/Step01/noAction"
      param2 = "SokobanTutorial/MOSL/MyWorkingSet/SokobanLanguage"/>
   </item>
   <item
         title="Step 2 - Creating classes"
         validation="chapter1;1">
      <description>
         Before starting the next task, can you see the green check mark icon in this 
         title bar, and in most of the ones that follow? This is a validation check we've
         provided to confirm your work in the previous step is correct. It quickly scans
         for common mistakes, and will inform you in the console window below the editor
         if it finds anything.<br/>
         
         <br/>
         Let's create our model's classes, starting with one to represent the playing area.
         This will be a board that can contain an unlimited number of valid floor spaces
         that in turn, can hold up to one figure object at any time.<br/>
         
         <br/>
         Right-click on <b>SokobanLanguage</b> and select "New / EClass".  Name it 
         <b>Board</b> and press finish. The class file should automatically open in your editor.
         <br/>
         
         <br/>
         In the same way, create EClass files for each of <b>Floor</b> and <b>Figure</b>. 
      </description>
         <action class = "org.moflon.tutorial.actions.CopyResourceToProject" pluginId = "org.moflon.CheatSheetTutorial"
         required = "false"
      param1 = "resources/tutorial-Sokoban/Chapter1/Step02"
      param2 = "SokobanTutorial/MOSL/MyWorkingSet/SokobanLanguage"/>
   </item>
   <item
         title="Step 3 - Adding attributes"
         validation="chapter1;2">
      <description>
         Did you validate your previous work? If you're sure you've done everything correctly 
         and the check still isn't working, double-check to ensure you built the 
         project - validation won't work otherwise.<br/>
         
         <br/>
         Let's add some attributes so that our classes may store useful information.
         Open <b>Board</b>, and add the following attributes:<br/>
         
         <br/><b>width : EInt</b>
         
         <br/><b>height : EInt</b><br/>
         
         <br/>
         Did you notice that eMoflon provides an auto-completion feature? Press 
         <b>Ctrl + Space</b> and select "attribute" to use a template for creating attributes.
      </description>
         <action class = "org.moflon.tutorial.actions.CopyResourceToProject" pluginId = "org.moflon.CheatSheetTutorial"
         required = "false"
      param1 = "resources/tutorial-Sokoban/Chapter1/Step03"
      param2 = "SokobanTutorial/MOSL/MyWorkingSet/SokobanLanguage"/>
   </item>
   <item
         title="Step 4 - 'Floor' and 'Figure' attributes"
         validation="chapter1;3">
      <description>
   		 Open <b>Floor</b>, and add two attributes: <br/>
   		 
   		 <br/><b>row : EInt</b>
   		 <br/><b>col : EInt</b><br/>
   		 
   		 <br/>
   		 This class will be used as a place holder for figures, identified on the board by 
   		 these position numbers.<br/>
   		 
   		 <br/>
   		 There's no need to have any attributes in <b>Figure</b>. This class will be 
   		 used as an abstract superclass for Sokoban's three figure types - the Sokoban character
   		 himself, moveable blocks, and immobile boulders. You'll be able to tell them apart during 
   		 gameplay by their appearance.
   </description>
         <action class = "org.moflon.tutorial.actions.CopyResourceToProject" pluginId = "org.moflon.CheatSheetTutorial"
         required = "false"
      param1 = "resources/tutorial-Sokoban/Chapter1/Step04"
      param2 = "SokobanTutorial/MOSL/MyWorkingSet/SokobanLanguage"/>
   </item>
   <item
         title="Step 5 - Relations of &apos;Board&apos;"
         validation="chapter1;4">
      <description>
         Great work! You have just learnt how to model classes and their attributes. We will now take a look
         at how to specify associations between them. Our modelling language, MOSL, 
         supports two different kinds of associations: <b>simple references</b>, which act 
         like pointers from one object to another, and <b>container references</b>, where 
         one class contains multiple instances of another.<br/>
         <b>Hint:</b> Don&apos;t forget about eMoflon&apos;s auto-completion! Here you&apos;ll want to use 
         the &apos;composite&apos; and &apos;reference&apos; templates.<br/>
         
         <br/>
         Open <b>Board</b> and add the following container reference:<br/>
         <br/><b>&lt;&gt;- floors(0..*) -&gt; Floor</b><br/>
         
         <br/>
         This states that <b>Board</b> can have an unlimited number of <b>Floor</b> spaces.
         
         <br/>
         Now add the following simple reference:<br/>
         <br/><b>- selectedFigure(0..1) ->	 Figure</b><br/>
         
         <br/>
         This reference will store <b>Board</b>&apos;s active figure, which may(1) or may not(0)
         be currently active.
      </description>
	 <action class = "org.moflon.tutorial.actions.CopyResourceToProject" pluginId = "org.moflon.CheatSheetTutorial"
         required = "false"
      param1 = "resources/tutorial-Sokoban/Chapter1/Step05"
      param2 = "SokobanTutorial/MOSL/MyWorkingSet/SokobanLanguage"/>
   </item>
   <item
         title="Step 6 - Complete &apos;Floor&apos;"
         validation="chapter1;5">
      <description>
         Open <b>Floor</b>, and add the four simple references below. What do their 
         multiplicities state?<br/>
         
         <br/>
         <b>- left(0..1) -&gt; Floor   </b><br/>
         <b>- right(0..1) -&gt; Floor  </b><br/>
         <b>- top(0..1) -&gt; Floor    </b><br/>
         <b>- bottom(0..1) -&gt; Floor </b><br/>
         
		 <br/>
         We're not done yet; Given that every Floor can be either empty or contain exactly one
         <b>Figure</b>, add the container reference below:<br/>
         
         <br/><b>&lt;&gt;- figure(0..1) -&gt; Figure</b><br/>
         
         <br/>
         Finally, add one simple reference to indicate the Board to which a Floor instance
         belongs to: <br/>
         
         <br/><b> - board(0..1) -&gt; Board </b>
      </description>
         <action class = "org.moflon.tutorial.actions.CopyResourceToProject" pluginId = "org.moflon.CheatSheetTutorial"
         required = "false"
      param1 = "resources/tutorial-Sokoban/Chapter1/Step06"
      param2 = "SokobanTutorial/MOSL/MyWorkingSet/SokobanLanguage"/>
   </item>
   <item
         title="Step 7 - Complete &apos;Figure&apos;"
         validation="chapter1;6">
      <description>
         Open <b>Figure</b> and add the sole reference:<br/>
         
         <br/><b>- floor(1..1) -&gt; Floor</b><br/>
         
         <br/>
         This is the link between a <b>Figure</b> and the <b>Floor</b> instance it currently 
         stands on.
      </description>
         <action class = "org.moflon.tutorial.actions.CopyResourceToProject" pluginId = "org.moflon.CheatSheetTutorial"
         required = "false"
      param1 = "resources/tutorial-Sokoban/Chapter1/Step07"
      param2 = "SokobanTutorial/MOSL/MyWorkingSet/SokobanLanguage"/>
   </item>
   <item
         title="Step 8 - Constraints"
         validation="chapter1;7">
      <description>
   	   	  If you have built without errors and passed the validation check, you have 
   	   	  successfully declared a set of unidirectional references! In order to make some of them
   	   	  bidirectional however, we need to add a set of constraints.<br/>
   	   	  
   	   	  <br/>
   	   	  You may have noticed that when you created the SokobanLanguage EPackage, a
   	   	  <b>_constraints.mconf</b> file was generated. Open this now and add the following 
   	   	  opposites: <br/>
   	   	  
   	   	  <br/>
   	   	  <b> figure : Floor &lt;-&gt; floor : Figure </b><br/>
   	   	  <b> floors : Board &lt;-&gt; board : Floor  </b><br/>
   	   	  <b> left : Floor &lt;-&gt; right : Floor    </b><br/>
   	   	  <b> top : Floor &lt;-&gt; bottom : Floor    </b><br/>
   	   	  
   	   	  <br/>
   	   	  Each statement demands that when a reference on one side is updated, the
   	   	  other must be updated as well. Thus, each statement establishes a bidirectional
   	   	  association. Ergo, a Figure is always on the Floor that contains it, 
   	   	  and a Floor always contains the Figure on it.
   	   </description>
	 <action class = "org.moflon.tutorial.actions.CopyResourceToProject" pluginId = "org.moflon.CheatSheetTutorial"
         required = "false"
      param1 = "resources/tutorial-Sokoban/Chapter1/Step08"
      param2 = "SokobanTutorial/MOSL/MyWorkingSet/SokobanLanguage"/>
   </item>
   
   <item
         title="Step 9 - Extending &apos;Figure&apos;"
         validation="chapter1;8">
      <description>
         When setting the class attributes, we mentioned that there are three types of 
         Figures in the game. We have "twisted" the original design of Sokoban - Our game 
         will have a System Administrator pushing Servers around a brick building to 
         LAN port Goal spaces. Thus, create a new EClass for each of: <br/>
         
         <b>Admin</b>, <b>Goal</b>, <b>Server</b>, and <b>Wall</b>.<br/>
         
         <br/>
         Open each one, and add '<b>extends Figure</b>' to the heading of each class.<br/>
         
         <br/>
         <b>Example:</b>  class Admin extends Figure { ... } <br/>
         
         <br/>
         Now open <b>Figure</b>, and declare it as abstract so it resembles:<br/>
         
         <br/><b> abstract class Figure { ... } </b><br/>
         
         <br/>
         These modifications declare that whatever methods you create in <b>Figure</b> will 
         be inherited and implemented by <b>Admin, Server, Wall</b>, and <b>Goal</b> only. 
         You won't be able to instantiate the Figure class directly.
      </description>
          <action class = "org.moflon.tutorial.actions.CopyResourceToProject" pluginId = "org.moflon.CheatSheetTutorial"
         required = "false"
      param1 = "resources/tutorial-Sokoban/Chapter1/Step09"
      param2 = "SokobanTutorial/MOSL/MyWorkingSet/SokobanLanguage"/>
      </item>
   
   <item
         title="Step 10 - Functions of &apos;Board&apos;">
      <description>
      	  You've nearly finished declaring Sokoban's abstract syntax (classes and
      	  associations). In fact, with the static semantics (multiplicities and opposite
      	  constraints) already specified, you're now ready to state the game's dynamic semantics 
      	  (behaviour). This includes telling the Board how to clear every Floor of all Figures and how to select 
      	  an active Figure, as well as implementing the rules of the game by specifying how 
      	  Figures are permitted to move.<br/>
      	   
      	  <br/>
      	  To begin, open <b>Board</b>, and add the following method signatures:<br/>
      	  
      	  <br/><b>clear() : void </b><br/>
      	  <br/><b>floorSelected(floor:Floor):void</b><br/><br/>
      	  
      	  <br/><b>Note</b>: the actual implementation of each method will be provided in Chapter 
      	  2 via SDMs.
      	  
      </description>
         <action class = "org.moflon.tutorial.actions.CopyResourceToProject" pluginId = "org.moflon.CheatSheetTutorial"
         required = "false"
      param1 = "resources/tutorial-Sokoban/Chapter1/Step10"
      param2 = "SokobanTutorial/MOSL/MyWorkingSet/SokobanLanguage"/>
   </item>
   <item
         title="Step 11 - Functions of &apos;Floor&apos; and &apos;Figure&apos;"
         validation="chapter1;10">
      <description>
      	  Now let's state how our Floor, Admin, Goal, Server, and Wall Figures will behave.
      	  First, <b>Floor</b> doesn't need any methods because it simply doesn't have any
      	  specific task or restrictions. A floor is a placeholder between a Board and Figure.
      	  Therefore, open the <b>Figure</b> superclass instead and add a single method:<br/>
      	  
      	  <br/><b>moveTo(floor:Floor):void</b><br/>
      	  
      	  <br/>
      	  This will implement the fundamental behaviour of any figure, specifically how it
      	  will be removed from its current floor, and shifted to the parameterized target 
      	  floor (given that it is not already occupied by another Figure).
      </description>
         <action class = "org.moflon.tutorial.actions.CopyResourceToProject" pluginId = "org.moflon.CheatSheetTutorial"
         required = "false"
      param1 = "resources/tutorial-Sokoban/Chapter1/Step11"
      param2 = "SokobanTutorial/MOSL/MyWorkingSet/SokobanLanguage"/>
   </item>
   <item
         title="Step 12 - Playing the game: The Sokoban GUI"
         validation="chapter1;11">
      <description>
         Let's carefully review what we've done so far with eMoflon: you have
         setup a new metamodelling project, creating a container EPackage to
         store the various classes. You have specified the abstract syntax of Sokoban by
         adding classes and associations to the metamodel, specified the static 
         semantics of the game via multiplicities and opposite constraints, and stated
         the dynamic semantics by declaring the method signatures (to be implemented later.)
         Fantastic! <br/>
         
         <br/>
         Now let's see everything you've done in action! Press <b>Click to Perform</b> at the end
         of this step to load a pre-prepared <b>SokobanGUI</b> into your workspace. This
         operates on what you've established in your metamodel. Start the game by selecting the 
         new folder in the Package Explorer, then navigate to the green
         <b>Run As...</b> icon in the toolbar. <br/>
         
         <br/>
         In the GUI, you'll be able to right-click on any Floor and place any Figure there.
         You'll also be able to save or load instances of your board metamodel.
         Remember - the figures cannot move yet, and a Board can't be cleared 
         as we haven't provided any implementation for these methods yet. Chapter 
         2 will bring everything to life.<br/>
         
         <br/>
         Feel free to create your own figures by extending the appropriate class and adding
         your own .png image with the same name as its eclass to "SokobanGUI/images." The 
         GUI will automatically resize the icon to fit the Floor requirements.
      </description>
      <action class = "org.moflon.tutorial.actions.CreateGUIProject" pluginId = "org.moflon.CheatSheetTutorial"
         required = "false"
      param1 = "resources/tutorial-Sokoban/Chapter1/SimpleSokobanGUI/SokobanGUI"/>
   </item>
   
   <item
         title="End of Chapter 1">
      <description>
         Congratulations! You've just completed the tutorial's first chapter on static
         structural aspects (abstract syntax and static semantics), creating your first
         eMoflon metamodel in the process. With this basic foundation in MOSL, we can now 
         implement the game's behaviour or dynamic semantics (Chapter 2), and add support for
         a standard textual export/import for Sokoban levels (Chapter 3).

         <br/><br/>
         We hope you're enjoying using our tool! If you have any comments or suggestions,
         feel free to contact us at <b>contact@moflon.org.</b> 
         Finally, don't forget to check out the official eMoflon handbook for more details 
         at <b>www.emoflon.org.</b>
      </description>
   </item>

</cheatsheet>
